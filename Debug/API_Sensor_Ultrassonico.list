
API_Sensor_Ultrassonico.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c5c  08008f40  08008f40  00018f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b9c  08009b9c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08009b9c  08009b9c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b9c  08009b9c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b9c  08009b9c  00019b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ba0  08009ba0  00019ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  200001e8  08009d8c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  08009d8c  0002072c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7c1  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002124  00000000  00000000  0002d9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0002faf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00030920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c55  00000000  00000000  00031668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbd0  00000000  00000000  0004a2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c293  00000000  00000000  00059e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6120  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000507c  00000000  00000000  000e6170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f24 	.word	0x08008f24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008f24 	.word	0x08008f24

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <Medir_Distancia_CM>:
uint32_t Distancia_Real  = 0;
uint32_t a = 0;
uint32_t b = 0;											//Variável que nos diz o quanto o sensor está errando

//Vai retornar a distância medida em centímetros
uint32_t Medir_Distancia_CM(void){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Trigger_Pin, 1); 			// Para acionar o sensor se deve gerar um pulso de duração de 10uS no pino Trigger
 8000bde:	2201      	movs	r2, #1
 8000be0:	2102      	movs	r1, #2
 8000be2:	4819      	ldr	r0, [pc, #100]	; (8000c48 <Medir_Distancia_CM+0x70>)
 8000be4:	f001 fc34 	bl	8002450 <HAL_GPIO_WritePin>
	for(int x = 0; x < 40; ++x){} 						//delay de 10uS (O clock funciona a 40Mhz)
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	e002      	b.n	8000bf4 <Medir_Distancia_CM+0x1c>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b27      	cmp	r3, #39	; 0x27
 8000bf8:	ddf9      	ble.n	8000bee <Medir_Distancia_CM+0x16>
	HAL_GPIO_WritePin(GPIOA, Trigger_Pin, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4812      	ldr	r0, [pc, #72]	; (8000c48 <Medir_Distancia_CM+0x70>)
 8000c00:	f001 fc26 	bl	8002450 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);			//Habilita a interrupção para o timer 1, irá permitir a leitura da subida do Echo
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <Medir_Distancia_CM+0x74>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <Medir_Distancia_CM+0x74>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f042 0202 	orr.w	r2, r2, #2
 8000c12:	60da      	str	r2, [r3, #12]
	Distancia = kallman(Distancia);						//Filtragem do sinal
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <Medir_Distancia_CM+0x78>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 f9d1 	bl	8000fc0 <kallman>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <Medir_Distancia_CM+0x78>)
 8000c22:	6013      	str	r3, [r2, #0]
	Distancia_Real = (Distancia - a)/(1+b);
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <Medir_Distancia_CM+0x78>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <Medir_Distancia_CM+0x7c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	1ad2      	subs	r2, r2, r3
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <Medir_Distancia_CM+0x80>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c38:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <Medir_Distancia_CM+0x84>)
 8000c3a:	6013      	str	r3, [r2, #0]
	return Distancia_Real; 								//Retorna a distância em centímetros
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <Medir_Distancia_CM+0x84>)
 8000c3e:	681b      	ldr	r3, [r3, #0]

}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40010800 	.word	0x40010800
 8000c4c:	20000278 	.word	0x20000278
 8000c50:	20000214 	.word	0x20000214
 8000c54:	2000021c 	.word	0x2000021c
 8000c58:	20000220 	.word	0x20000220
 8000c5c:	20000218 	.word	0x20000218

08000c60 <Medir_Distancia_INCH>:

//Vai retornar a distância em polegadas
uint32_t Medir_Distancia_INCH(void){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Trigger_Pin, 1); 			// Para acionar o sensor se deve gerar um pulso de duração de 10uS no pino Trigger
 8000c66:	2201      	movs	r2, #1
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4823      	ldr	r0, [pc, #140]	; (8000cf8 <Medir_Distancia_INCH+0x98>)
 8000c6c:	f001 fbf0 	bl	8002450 <HAL_GPIO_WritePin>
	for(int x = 0; x < 40; ++x){} 						//delay de 10uS (O clock funciona a 40Mhz)
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	e002      	b.n	8000c7c <Medir_Distancia_INCH+0x1c>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b27      	cmp	r3, #39	; 0x27
 8000c80:	ddf9      	ble.n	8000c76 <Medir_Distancia_INCH+0x16>
	HAL_GPIO_WritePin(GPIOA, Trigger_Pin, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2102      	movs	r1, #2
 8000c86:	481c      	ldr	r0, [pc, #112]	; (8000cf8 <Medir_Distancia_INCH+0x98>)
 8000c88:	f001 fbe2 	bl	8002450 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1); 			//Habilita a interrupção para o timer 1, irá permitir a leitura da subida do Echo
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <Medir_Distancia_INCH+0x9c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	68da      	ldr	r2, [r3, #12]
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <Medir_Distancia_INCH+0x9c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f042 0202 	orr.w	r2, r2, #2
 8000c9a:	60da      	str	r2, [r3, #12]
	Distancia = kallman(Distancia);						//Filtragem do sinal
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <Medir_Distancia_INCH+0xa0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f98d 	bl	8000fc0 <kallman>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <Medir_Distancia_INCH+0xa0>)
 8000caa:	6013      	str	r3, [r2, #0]
	Distancia_Real = (Distancia - a)/(1+b);
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <Medir_Distancia_INCH+0xa0>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <Medir_Distancia_INCH+0xa4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	1ad2      	subs	r2, r2, r3
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <Medir_Distancia_INCH+0xa8>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc0:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <Medir_Distancia_INCH+0xac>)
 8000cc2:	6013      	str	r3, [r2, #0]
	return Distancia_Real/2.54; 						//Retorna a distância em polegadas
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <Medir_Distancia_INCH+0xac>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fb8b 	bl	80003e4 <__aeabi_ui2d>
 8000cce:	a308      	add	r3, pc, #32	; (adr r3, 8000cf0 <Medir_Distancia_INCH+0x90>)
 8000cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd4:	f7ff fd2a 	bl	800072c <__aeabi_ddiv>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4610      	mov	r0, r2
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f7ff fed2 	bl	8000a88 <__aeabi_d2uiz>
 8000ce4:	4603      	mov	r3, r0

}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	851eb852 	.word	0x851eb852
 8000cf4:	400451eb 	.word	0x400451eb
 8000cf8:	40010800 	.word	0x40010800
 8000cfc:	20000278 	.word	0x20000278
 8000d00:	20000214 	.word	0x20000214
 8000d04:	2000021c 	.word	0x2000021c
 8000d08:	20000220 	.word	0x20000220
 8000d0c:	20000218 	.word	0x20000218

08000d10 <Calibracao>:

//Função para calibração do sensor
void Calibracao(void){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b090      	sub	sp, #64	; 0x40
 8000d14:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2110      	movs	r1, #16
 8000d1a:	4841      	ldr	r0, [pc, #260]	; (8000e20 <Calibracao+0x110>)
 8000d1c:	f001 fb98 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin, 1);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2110      	movs	r1, #16
 8000d24:	483e      	ldr	r0, [pc, #248]	; (8000e20 <Calibracao+0x110>)
 8000d26:	f001 fb93 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000d2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d2e:	f001 f8d9 	bl	8001ee4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin, 0);		//O LED1 irá piscar uma vez para indicar o começo da amostragem
 8000d32:	2200      	movs	r2, #0
 8000d34:	2110      	movs	r1, #16
 8000d36:	483a      	ldr	r0, [pc, #232]	; (8000e20 <Calibracao+0x110>)
 8000d38:	f001 fb8a 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000d3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d40:	f001 f8d0 	bl	8001ee4 <HAL_Delay>
	uint32_t medicao[10];
	uint32_t dist = 10;
 8000d44:	230a      	movs	r3, #10
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t somaY = 0 , somaX = 100 , somaQX = 1000, somaXY ;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d4c:	2364      	movs	r3, #100	; 0x64
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
    for(int a = 0; a < 10; ++a){				//o loop serve para realizar 10 amostras da distância
 8000d56:	2300      	movs	r3, #0
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
 8000d5a:	e024      	b.n	8000da6 <Calibracao+0x96>
        medicao[a] = Medir_Distancia_CM() - dist;
 8000d5c:	f7ff ff3c 	bl	8000bd8 <Medir_Distancia_CM>
 8000d60:	4602      	mov	r2, r0
 8000d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d64:	1ad2      	subs	r2, r2, r3
 8000d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	3340      	adds	r3, #64	; 0x40
 8000d6c:	443b      	add	r3, r7
 8000d6e:	f843 2c40 	str.w	r2, [r3, #-64]
        somaY += medicao[a];
 8000d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	3340      	adds	r3, #64	; 0x40
 8000d78:	443b      	add	r3, r7
 8000d7a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8000d7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d80:	4413      	add	r3, r2
 8000d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        somaXY = medicao[a]*10;
 8000d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	3340      	adds	r3, #64	; 0x40
 8000d8a:	443b      	add	r3, r7
 8000d8c:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8000d90:	4613      	mov	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	63bb      	str	r3, [r7, #56]	; 0x38
        HAL_Delay(60);
 8000d9a:	203c      	movs	r0, #60	; 0x3c
 8000d9c:	f001 f8a2 	bl	8001ee4 <HAL_Delay>
    for(int a = 0; a < 10; ++a){				//o loop serve para realizar 10 amostras da distância
 8000da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da2:	3301      	adds	r3, #1
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
 8000da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da8:	2b09      	cmp	r3, #9
 8000daa:	ddd7      	ble.n	8000d5c <Calibracao+0x4c>
    }
    a = ((somaY*somaQX)-(somaX*somaXY))/(10*somaQX - (somaX*somaX)); //Calculo dos parâmetros para definição da distância correta
 8000dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000db0:	fb03 f202 	mul.w	r2, r3, r2
 8000db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000db8:	fb01 f303 	mul.w	r3, r1, r3
 8000dbc:	1ad1      	subs	r1, r2, r3
 8000dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	461a      	mov	r2, r3
 8000dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dcc:	fb03 f303 	mul.w	r3, r3, r3
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dd6:	4a13      	ldr	r2, [pc, #76]	; (8000e24 <Calibracao+0x114>)
 8000dd8:	6013      	str	r3, [r2, #0]
    b = (10*somaXY-(somaX*somaY))/(10*somaQX - (somaX*somaX));
 8000dda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ddc:	4613      	mov	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4619      	mov	r1, r3
 8000de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000dea:	fb02 f303 	mul.w	r3, r2, r3
 8000dee:	1ac9      	subs	r1, r1, r3
 8000df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000df2:	4613      	mov	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfe:	fb03 f303 	mul.w	r3, r3, r3
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <Calibracao+0x118>)
 8000e0a:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin, 1);							//LED1 acende para indicar a finalização da calibração
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2110      	movs	r1, #16
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <Calibracao+0x110>)
 8000e12:	f001 fb1d 	bl	8002450 <HAL_GPIO_WritePin>
}
 8000e16:	bf00      	nop
 8000e18:	3740      	adds	r7, #64	; 0x40
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40010800 	.word	0x40010800
 8000e24:	2000021c 	.word	0x2000021c
 8000e28:	20000220 	.word	0x20000220

08000e2c <Alerta_Distancia>:

//Recebe um valor de distância como parâmetro e quando o objeto estiver em uma distância menor um led irá acender como alerta
void Alerta_Distancia(uint32_t dist){ 					//A função vai acontecer enquanto a variável funcao estiver em 2
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	uint32_t dist_atual = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
	while(funcao == 2){
 8000e38:	e014      	b.n	8000e64 <Alerta_Distancia+0x38>
	dist_atual = Medir_Distancia_CM(); 					//Mede a distancia atual
 8000e3a:	f7ff fecd 	bl	8000bd8 <Medir_Distancia_CM>
 8000e3e:	60f8      	str	r0, [r7, #12]
	if (dist_atual < dist) HAL_GPIO_WritePin(GPIOA, LED_2_Pin, 1); //Condicional para decisao se acende o led ou não
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d205      	bcs.n	8000e54 <Alerta_Distancia+0x28>
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	480a      	ldr	r0, [pc, #40]	; (8000e78 <Alerta_Distancia+0x4c>)
 8000e4e:	f001 faff 	bl	8002450 <HAL_GPIO_WritePin>
 8000e52:	e004      	b.n	8000e5e <Alerta_Distancia+0x32>
	else HAL_GPIO_WritePin(GPIOA, LED_2_Pin, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2120      	movs	r1, #32
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <Alerta_Distancia+0x4c>)
 8000e5a:	f001 faf9 	bl	8002450 <HAL_GPIO_WritePin>
	HAL_Delay(60); 										//delay de 60ms indicado pelo fabricante do sensor entre uma medição e outra
 8000e5e:	203c      	movs	r0, #60	; 0x3c
 8000e60:	f001 f840 	bl	8001ee4 <HAL_Delay>
	while(funcao == 2){
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <Alerta_Distancia+0x50>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d0e6      	beq.n	8000e3a <Alerta_Distancia+0xe>
	}
} 														//Recebe um valor de distância como parâmetro e quando o objeto estiver em uma distância menor um led irá acender como alerta
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40010800 	.word	0x40010800
 8000e7c:	20000308 	.word	0x20000308

08000e80 <HAL_TIM_IC_CaptureCallback>:


//Esta função serve para capturar o tempo de que Echo fica em nível lógico alto
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7f1b      	ldrb	r3, [r3, #28]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	f040 8082 	bne.w	8000f96 <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (Primeira_Captura==0) 						//Se a variavel for igual a zero significa que o sinal subiu para nivel lógico alto
 8000e92:	4b45      	ldr	r3, [pc, #276]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d11a      	bne.n	8000ed0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			Time1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); //O momento de subida é armazenado na variavel time1
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f003 f8dd 	bl	800405c <HAL_TIM_ReadCapturedValue>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4a41      	ldr	r2, [pc, #260]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ea6:	6013      	str	r3, [r2, #0]
			Primeira_Captura = 1;
 8000ea8:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]


			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING); //Muda a configuração para ler o momento em que o sinal esteja descendo
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6a1a      	ldr	r2, [r3, #32]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 020a 	bic.w	r2, r2, #10
 8000ebc:	621a      	str	r2, [r3, #32]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6a1a      	ldr	r2, [r3, #32]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f042 0202 	orr.w	r2, r2, #2
 8000ecc:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); //Muda a configuração para ler o momento em que o sinal esteja subindo
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1); //A interrupção é desabilitada para ser chamada apenas quando necessário
		}
	}
}
 8000ece:	e062      	b.n	8000f96 <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Primeira_Captura==1) 					//Se a variavel for igual a um significa que o sinal desceu para nivel lógico baixo
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d15e      	bne.n	8000f96 <HAL_TIM_IC_CaptureCallback+0x116>
			Time2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);// //O momento de descida é armazenado na variavel time1
 8000ed8:	2100      	movs	r1, #0
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f003 f8be 	bl	800405c <HAL_TIM_ReadCapturedValue>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a33      	ldr	r2, [pc, #204]	; (8000fb0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ee4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0); 			//Reinicia o contador do timer1 para zero
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
			if (Time2 > Time1)							// Se time2 for maior que time1 o resultado do tempo é igual a diferenca
 8000eee:	4b30      	ldr	r3, [pc, #192]	; (8000fb0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d907      	bls.n	8000f0a <HAL_TIM_IC_CaptureCallback+0x8a>
				Diferenca = Time2-Time1;
 8000efa:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	4a2b      	ldr	r2, [pc, #172]	; (8000fb4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	e00f      	b.n	8000f2a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (Time1 > Time2)						// Se time1 for maior que time2 significa que o contador ultrapassou seu limite e reiniciou a contagem
 8000f0a:	4b28      	ldr	r3, [pc, #160]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d909      	bls.n	8000f2a <HAL_TIM_IC_CaptureCallback+0xaa>
				Diferenca = (0xffff - Time1) + Time2;
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b24      	ldr	r3, [pc, #144]	; (8000fac <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f24:	33ff      	adds	r3, #255	; 0xff
 8000f26:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f28:	6013      	str	r3, [r2, #0]
			Distancia = Diferenca * 0.034/2;
 8000f2a:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fa58 	bl	80003e4 <__aeabi_ui2d>
 8000f34:	a31a      	add	r3, pc, #104	; (adr r3, 8000fa0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3a:	f7ff facd 	bl	80004d8 <__aeabi_dmul>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	4610      	mov	r0, r2
 8000f44:	4619      	mov	r1, r3
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f4e:	f7ff fbed 	bl	800072c <__aeabi_ddiv>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4610      	mov	r0, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f7ff fd95 	bl	8000a88 <__aeabi_d2uiz>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000f62:	6013      	str	r3, [r2, #0]
			Primeira_Captura = 0;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); //Muda a configuração para ler o momento em que o sinal esteja subindo
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6a1a      	ldr	r2, [r3, #32]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 020a 	bic.w	r2, r2, #10
 8000f78:	621a      	str	r2, [r3, #32]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6a12      	ldr	r2, [r2, #32]
 8000f84:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1); //A interrupção é desabilitada para ser chamada apenas quando necessário
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 0202 	bic.w	r2, r2, #2
 8000f94:	60da      	str	r2, [r3, #12]
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	b020c49c 	.word	0xb020c49c
 8000fa4:	3fa16872 	.word	0x3fa16872
 8000fa8:	20000210 	.word	0x20000210
 8000fac:	20000204 	.word	0x20000204
 8000fb0:	20000208 	.word	0x20000208
 8000fb4:	2000020c 	.word	0x2000020c
 8000fb8:	20000214 	.word	0x20000214
 8000fbc:	20000278 	.word	0x20000278

08000fc0 <kallman>:

//Filtro de Kallman para tratamento do sinal
uint32_t kallman(uint32_t U){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	  uint32_t R = 40;
 8000fc8:	2328      	movs	r3, #40	; 0x28
 8000fca:	61fb      	str	r3, [r7, #28]
	  uint32_t H = 1.00;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61bb      	str	r3, [r7, #24]
	  uint32_t Q = 10;
 8000fd0:	230a      	movs	r3, #10
 8000fd2:	617b      	str	r3, [r7, #20]
	  uint32_t P = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	613b      	str	r3, [r7, #16]
	  uint32_t U_hat = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
	  uint32_t K = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
	  K = P*H/(H*P*H+R);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	fb03 f202 	mul.w	r2, r3, r2
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6939      	ldr	r1, [r7, #16]
 8000fec:	fb01 f303 	mul.w	r3, r1, r3
 8000ff0:	69b9      	ldr	r1, [r7, #24]
 8000ff2:	fb03 f101 	mul.w	r1, r3, r1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	440b      	add	r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	60bb      	str	r3, [r7, #8]
	  U_hat += + K*(U-H*U_hat);
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	fb02 f303 	mul.w	r3, r2, r3
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	fb02 f303 	mul.w	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	4413      	add	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
	  P = (1-K*H)*P+Q;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	fb02 f303 	mul.w	r3, r2, r3
 8001020:	f1c3 0301 	rsb	r3, r3, #1
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	fb02 f303 	mul.w	r3, r2, r3
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	4413      	add	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
	  return U_hat;
 8001030:	68fb      	ldr	r3, [r7, #12]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	; 0x50
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char distancia_cm_str[30];
	char distancia_inch_str[30];
	uint32_t distancia_cm = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t distancia_inch = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t distancia_limite_cm = 10;
 800104a:	230a      	movs	r3, #10
 800104c:	647b      	str	r3, [r7, #68]	; 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104e:	f000 fee7 	bl	8001e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001052:	f000 f869 	bl	8001128 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_TIM_Base_Start(&htim3);
 8001056:	482e      	ldr	r0, [pc, #184]	; (8001110 <main+0xd4>)
 8001058:	f002 fbf8 	bl	800384c <HAL_TIM_Base_Start>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105c:	f000 f998 	bl	8001390 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001060:	f000 f8d2 	bl	8001208 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001064:	f000 f946 	bl	80012f4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001068:	f000 f8a0 	bl	80011ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800106c:	f000 fa16 	bl	800149c <SSD1306_Init>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001070:	2100      	movs	r1, #0
 8001072:	4828      	ldr	r0, [pc, #160]	; (8001114 <main+0xd8>)
 8001074:	f002 fc8c 	bl	8003990 <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
// Este projeto irá chamar uma função da API de acordo com o valor da variável funcao, esta variável varia de acordo com a quantidade de vezes que o botão B2 foi apertado

  {
	  switch (funcao){
 8001078:	4b27      	ldr	r3, [pc, #156]	; (8001118 <main+0xdc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d03e      	beq.n	80010fe <main+0xc2>
 8001080:	2b02      	cmp	r3, #2
 8001082:	dc40      	bgt.n	8001106 <main+0xca>
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <main+0x52>
 8001088:	2b01      	cmp	r3, #1
 800108a:	d033      	beq.n	80010f4 <main+0xb8>
 800108c:	e03b      	b.n	8001106 <main+0xca>
	  case 0:
	  		  Calibracao();
 800108e:	f7ff fe3f 	bl	8000d10 <Calibracao>
	  		  break;
 8001092:	e03b      	b.n	800110c <main+0xd0>

	  case 1:
		  while(funcao == 0){ // Neste caso ele irá medir a distância em centímetros e polegadas e então printar no display OLED
			  distancia_cm = Medir_Distancia_CM();
 8001094:	f7ff fda0 	bl	8000bd8 <Medir_Distancia_CM>
 8001098:	64f8      	str	r0, [r7, #76]	; 0x4c
			  distancia_inch = Medir_Distancia_INCH();
 800109a:	f7ff fde1 	bl	8000c60 <Medir_Distancia_INCH>
 800109e:	64b8      	str	r0, [r7, #72]	; 0x48
			  sprintf(distancia_cm_str, "D_cm: %.2lu cm",distancia_cm);
 80010a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80010a6:	491d      	ldr	r1, [pc, #116]	; (800111c <main+0xe0>)
 80010a8:	4618      	mov	r0, r3
 80010aa:	f004 f97d 	bl	80053a8 <siprintf>
			  SSD1306_GotoXY (0,0);
 80010ae:	2100      	movs	r1, #0
 80010b0:	2000      	movs	r0, #0
 80010b2:	f000 fb5b 	bl	800176c <SSD1306_GotoXY>
			  SSD1306_Puts (distancia_cm_str, &Font_7x10, 1);
 80010b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ba:	2201      	movs	r2, #1
 80010bc:	4918      	ldr	r1, [pc, #96]	; (8001120 <main+0xe4>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 fbea 	bl	8001898 <SSD1306_Puts>
			  SSD1306_UpdateScreen(); // update display
 80010c4:	f000 faae 	bl	8001624 <SSD1306_UpdateScreen>
			  sprintf(distancia_inch_str, "D_inch: %.2lu inch",distancia_inch);
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010cc:	4915      	ldr	r1, [pc, #84]	; (8001124 <main+0xe8>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f004 f96a 	bl	80053a8 <siprintf>
			  SSD1306_GotoXY (0,30);
 80010d4:	211e      	movs	r1, #30
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 fb48 	bl	800176c <SSD1306_GotoXY>
			  SSD1306_Puts (distancia_inch_str, &Font_7x10, 1);
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2201      	movs	r2, #1
 80010e0:	490f      	ldr	r1, [pc, #60]	; (8001120 <main+0xe4>)
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 fbd8 	bl	8001898 <SSD1306_Puts>
			  SSD1306_UpdateScreen(); // update display
 80010e8:	f000 fa9c 	bl	8001624 <SSD1306_UpdateScreen>
			  HAL_Delay(600);}
 80010ec:	f44f 7016 	mov.w	r0, #600	; 0x258
 80010f0:	f000 fef8 	bl	8001ee4 <HAL_Delay>
		  while(funcao == 0){ // Neste caso ele irá medir a distância em centímetros e polegadas e então printar no display OLED
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <main+0xdc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0cb      	beq.n	8001094 <main+0x58>
		  break;
 80010fc:	e006      	b.n	800110c <main+0xd0>

	  case 2:
		  Alerta_Distancia(distancia_limite_cm);
 80010fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001100:	f7ff fe94 	bl	8000e2c <Alerta_Distancia>
		  break;
 8001104:	e002      	b.n	800110c <main+0xd0>

	  default:
		  funcao = 0;
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <main+0xdc>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
	  switch (funcao){
 800110c:	e7b4      	b.n	8001078 <main+0x3c>
 800110e:	bf00      	nop
 8001110:	200002c0 	.word	0x200002c0
 8001114:	20000278 	.word	0x20000278
 8001118:	20000308 	.word	0x20000308
 800111c:	08008f40 	.word	0x08008f40
 8001120:	20000000 	.word	0x20000000
 8001124:	08008f50 	.word	0x08008f50

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b090      	sub	sp, #64	; 0x40
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0318 	add.w	r3, r7, #24
 8001132:	2228      	movs	r2, #40	; 0x28
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fabc 	bl	80046b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114e:	2301      	movs	r3, #1
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001152:	2310      	movs	r3, #16
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001156:	2302      	movs	r3, #2
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800115a:	2300      	movs	r3, #0
 800115c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800115e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001164:	f107 0318 	add.w	r3, r7, #24
 8001168:	4618      	mov	r0, r3
 800116a:	f001 ff19 	bl	8002fa0 <HAL_RCC_OscConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001174:	f000 f98c 	bl	8001490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001178:	230f      	movs	r3, #15
 800117a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117c:	2302      	movs	r3, #2
 800117e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001188:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2102      	movs	r1, #2
 8001192:	4618      	mov	r0, r3
 8001194:	f002 f986 	bl	80034a4 <HAL_RCC_ClockConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800119e:	f000 f977 	bl	8001490 <Error_Handler>
  }
}
 80011a2:	bf00      	nop
 80011a4:	3740      	adds	r7, #64	; 0x40
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_I2C1_Init+0x50>)
 80011b2:	4a13      	ldr	r2, [pc, #76]	; (8001200 <MX_I2C1_Init+0x54>)
 80011b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_I2C1_Init+0x50>)
 80011b8:	4a12      	ldr	r2, [pc, #72]	; (8001204 <MX_I2C1_Init+0x58>)
 80011ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_I2C1_Init+0x50>)
 80011ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <MX_I2C1_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_I2C1_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <MX_I2C1_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_I2C1_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_I2C1_Init+0x50>)
 80011ea:	f001 f961 	bl	80024b0 <HAL_I2C_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011f4:	f000 f94c 	bl	8001490 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000224 	.word	0x20000224
 8001200:	40005400 	.word	0x40005400
 8001204:	00061a80 	.word	0x00061a80

08001208 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0318 	add.w	r3, r7, #24
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001226:	463b      	mov	r3, r7
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001232:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <MX_TIM1_Init+0xe4>)
 8001234:	4a2e      	ldr	r2, [pc, #184]	; (80012f0 <MX_TIM1_Init+0xe8>)
 8001236:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8001238:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <MX_TIM1_Init+0xe4>)
 800123a:	223f      	movs	r2, #63	; 0x3f
 800123c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <MX_TIM1_Init+0xe4>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff - 1;
 8001244:	4b29      	ldr	r3, [pc, #164]	; (80012ec <MX_TIM1_Init+0xe4>)
 8001246:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800124a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b27      	ldr	r3, [pc, #156]	; (80012ec <MX_TIM1_Init+0xe4>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001252:	4b26      	ldr	r3, [pc, #152]	; (80012ec <MX_TIM1_Init+0xe4>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001258:	4b24      	ldr	r3, [pc, #144]	; (80012ec <MX_TIM1_Init+0xe4>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800125e:	4823      	ldr	r0, [pc, #140]	; (80012ec <MX_TIM1_Init+0xe4>)
 8001260:	f002 faa4 	bl	80037ac <HAL_TIM_Base_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800126a:	f000 f911 	bl	8001490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001272:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001274:	f107 0318 	add.w	r3, r7, #24
 8001278:	4619      	mov	r1, r3
 800127a:	481c      	ldr	r0, [pc, #112]	; (80012ec <MX_TIM1_Init+0xe4>)
 800127c:	f002 fe2a 	bl	8003ed4 <HAL_TIM_ConfigClockSource>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001286:	f000 f903 	bl	8001490 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800128a:	4818      	ldr	r0, [pc, #96]	; (80012ec <MX_TIM1_Init+0xe4>)
 800128c:	f002 fb28 	bl	80038e0 <HAL_TIM_IC_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001296:	f000 f8fb 	bl	8001490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4619      	mov	r1, r3
 80012a8:	4810      	ldr	r0, [pc, #64]	; (80012ec <MX_TIM1_Init+0xe4>)
 80012aa:	f003 f969 	bl	8004580 <HAL_TIMEx_MasterConfigSynchronization>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80012b4:	f000 f8ec 	bl	8001490 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012b8:	2300      	movs	r3, #0
 80012ba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012bc:	2301      	movs	r3, #1
 80012be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	4619      	mov	r1, r3
 80012ce:	4807      	ldr	r0, [pc, #28]	; (80012ec <MX_TIM1_Init+0xe4>)
 80012d0:	f002 fd6c 	bl	8003dac <HAL_TIM_IC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80012da:	f000 f8d9 	bl	8001490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 80012de:	4803      	ldr	r0, [pc, #12]	; (80012ec <MX_TIM1_Init+0xe4>)
 80012e0:	f002 fab4 	bl	800384c <HAL_TIM_Base_Start>
  /* USER CODE END TIM1_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	3728      	adds	r7, #40	; 0x28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000278 	.word	0x20000278
 80012f0:	40012c00 	.word	0x40012c00

080012f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001308:	463b      	mov	r3, r7
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001310:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <MX_TIM3_Init+0x94>)
 8001312:	4a1e      	ldr	r2, [pc, #120]	; (800138c <MX_TIM3_Init+0x98>)
 8001314:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_TIM3_Init+0x94>)
 8001318:	223f      	movs	r2, #63	; 0x3f
 800131a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_TIM3_Init+0x94>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_TIM3_Init+0x94>)
 8001324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001328:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_TIM3_Init+0x94>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_TIM3_Init+0x94>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001336:	4814      	ldr	r0, [pc, #80]	; (8001388 <MX_TIM3_Init+0x94>)
 8001338:	f002 fa38 	bl	80037ac <HAL_TIM_Base_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001342:	f000 f8a5 	bl	8001490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	4619      	mov	r1, r3
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_TIM3_Init+0x94>)
 8001354:	f002 fdbe 	bl	8003ed4 <HAL_TIM_ConfigClockSource>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800135e:	f000 f897 	bl	8001490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <MX_TIM3_Init+0x94>)
 8001370:	f003 f906 	bl	8004580 <HAL_TIMEx_MasterConfigSynchronization>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800137a:	f000 f889 	bl	8001490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200002c0 	.word	0x200002c0
 800138c:	40000400 	.word	0x40000400

08001390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a4:	4b27      	ldr	r3, [pc, #156]	; (8001444 <MX_GPIO_Init+0xb4>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a26      	ldr	r2, [pc, #152]	; (8001444 <MX_GPIO_Init+0xb4>)
 80013aa:	f043 0310 	orr.w	r3, r3, #16
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <MX_GPIO_Init+0xb4>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b21      	ldr	r3, [pc, #132]	; (8001444 <MX_GPIO_Init+0xb4>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a20      	ldr	r2, [pc, #128]	; (8001444 <MX_GPIO_Init+0xb4>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_GPIO_Init+0xb4>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_GPIO_Init+0xb4>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a1a      	ldr	r2, [pc, #104]	; (8001444 <MX_GPIO_Init+0xb4>)
 80013da:	f043 0308 	orr.w	r3, r3, #8
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_GPIO_Init+0xb4>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trigger_Pin|LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2132      	movs	r1, #50	; 0x32
 80013f0:	4815      	ldr	r0, [pc, #84]	; (8001448 <MX_GPIO_Init+0xb8>)
 80013f2:	f001 f82d 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80013f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <MX_GPIO_Init+0xbc>)
 80013fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	4619      	mov	r1, r3
 800140a:	4811      	ldr	r0, [pc, #68]	; (8001450 <MX_GPIO_Init+0xc0>)
 800140c:	f000 fe9c 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trigger_Pin LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin|LED_1_Pin|LED_2_Pin;
 8001410:	2332      	movs	r3, #50	; 0x32
 8001412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2302      	movs	r3, #2
 800141e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4619      	mov	r1, r3
 8001426:	4808      	ldr	r0, [pc, #32]	; (8001448 <MX_GPIO_Init+0xb8>)
 8001428:	f000 fe8e 	bl	8002148 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	2028      	movs	r0, #40	; 0x28
 8001432:	f000 fe52 	bl	80020da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001436:	2028      	movs	r0, #40	; 0x28
 8001438:	f000 fe6b 	bl	8002112 <HAL_NVIC_EnableIRQ>

}
 800143c:	bf00      	nop
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	40010800 	.word	0x40010800
 800144c:	10210000 	.word	0x10210000
 8001450:	40011000 	.word	0x40011000

08001454 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001464:	d10c      	bne.n	8001480 <HAL_GPIO_EXTI_Callback+0x2c>
		if(funcao < 2)
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_GPIO_EXTI_Callback+0x38>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b01      	cmp	r3, #1
 800146c:	dc05      	bgt.n	800147a <HAL_GPIO_EXTI_Callback+0x26>
		funcao++;
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <HAL_GPIO_EXTI_Callback+0x38>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3301      	adds	r3, #1
 8001474:	4a05      	ldr	r2, [pc, #20]	; (800148c <HAL_GPIO_EXTI_Callback+0x38>)
 8001476:	6013      	str	r3, [r2, #0]
		else
		funcao = 0;}
}
 8001478:	e002      	b.n	8001480 <HAL_GPIO_EXTI_Callback+0x2c>
		funcao = 0;}
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <HAL_GPIO_EXTI_Callback+0x38>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000308 	.word	0x20000308

08001490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001494:	b672      	cpsid	i
}
 8001496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001498:	e7fe      	b.n	8001498 <Error_Handler+0x8>
	...

0800149c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80014a2:	f000 fa1f 	bl	80018e4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80014a6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80014aa:	2201      	movs	r2, #1
 80014ac:	2178      	movs	r1, #120	; 0x78
 80014ae:	485b      	ldr	r0, [pc, #364]	; (800161c <SSD1306_Init+0x180>)
 80014b0:	f001 fa40 	bl	8002934 <HAL_I2C_IsDeviceReady>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e0a9      	b.n	8001612 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80014be:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80014c2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014c4:	e002      	b.n	80014cc <SSD1306_Init+0x30>
		p--;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f9      	bne.n	80014c6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80014d2:	22ae      	movs	r2, #174	; 0xae
 80014d4:	2100      	movs	r1, #0
 80014d6:	2078      	movs	r0, #120	; 0x78
 80014d8:	f000 fa7e 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80014dc:	2220      	movs	r2, #32
 80014de:	2100      	movs	r1, #0
 80014e0:	2078      	movs	r0, #120	; 0x78
 80014e2:	f000 fa79 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80014e6:	2210      	movs	r2, #16
 80014e8:	2100      	movs	r1, #0
 80014ea:	2078      	movs	r0, #120	; 0x78
 80014ec:	f000 fa74 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014f0:	22b0      	movs	r2, #176	; 0xb0
 80014f2:	2100      	movs	r1, #0
 80014f4:	2078      	movs	r0, #120	; 0x78
 80014f6:	f000 fa6f 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80014fa:	22c8      	movs	r2, #200	; 0xc8
 80014fc:	2100      	movs	r1, #0
 80014fe:	2078      	movs	r0, #120	; 0x78
 8001500:	f000 fa6a 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	2078      	movs	r0, #120	; 0x78
 800150a:	f000 fa65 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800150e:	2210      	movs	r2, #16
 8001510:	2100      	movs	r1, #0
 8001512:	2078      	movs	r0, #120	; 0x78
 8001514:	f000 fa60 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001518:	2240      	movs	r2, #64	; 0x40
 800151a:	2100      	movs	r1, #0
 800151c:	2078      	movs	r0, #120	; 0x78
 800151e:	f000 fa5b 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001522:	2281      	movs	r2, #129	; 0x81
 8001524:	2100      	movs	r1, #0
 8001526:	2078      	movs	r0, #120	; 0x78
 8001528:	f000 fa56 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800152c:	22ff      	movs	r2, #255	; 0xff
 800152e:	2100      	movs	r1, #0
 8001530:	2078      	movs	r0, #120	; 0x78
 8001532:	f000 fa51 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001536:	22a1      	movs	r2, #161	; 0xa1
 8001538:	2100      	movs	r1, #0
 800153a:	2078      	movs	r0, #120	; 0x78
 800153c:	f000 fa4c 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001540:	22a6      	movs	r2, #166	; 0xa6
 8001542:	2100      	movs	r1, #0
 8001544:	2078      	movs	r0, #120	; 0x78
 8001546:	f000 fa47 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800154a:	22a8      	movs	r2, #168	; 0xa8
 800154c:	2100      	movs	r1, #0
 800154e:	2078      	movs	r0, #120	; 0x78
 8001550:	f000 fa42 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001554:	223f      	movs	r2, #63	; 0x3f
 8001556:	2100      	movs	r1, #0
 8001558:	2078      	movs	r0, #120	; 0x78
 800155a:	f000 fa3d 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800155e:	22a4      	movs	r2, #164	; 0xa4
 8001560:	2100      	movs	r1, #0
 8001562:	2078      	movs	r0, #120	; 0x78
 8001564:	f000 fa38 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001568:	22d3      	movs	r2, #211	; 0xd3
 800156a:	2100      	movs	r1, #0
 800156c:	2078      	movs	r0, #120	; 0x78
 800156e:	f000 fa33 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2078      	movs	r0, #120	; 0x78
 8001578:	f000 fa2e 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800157c:	22d5      	movs	r2, #213	; 0xd5
 800157e:	2100      	movs	r1, #0
 8001580:	2078      	movs	r0, #120	; 0x78
 8001582:	f000 fa29 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001586:	22f0      	movs	r2, #240	; 0xf0
 8001588:	2100      	movs	r1, #0
 800158a:	2078      	movs	r0, #120	; 0x78
 800158c:	f000 fa24 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001590:	22d9      	movs	r2, #217	; 0xd9
 8001592:	2100      	movs	r1, #0
 8001594:	2078      	movs	r0, #120	; 0x78
 8001596:	f000 fa1f 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800159a:	2222      	movs	r2, #34	; 0x22
 800159c:	2100      	movs	r1, #0
 800159e:	2078      	movs	r0, #120	; 0x78
 80015a0:	f000 fa1a 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80015a4:	22da      	movs	r2, #218	; 0xda
 80015a6:	2100      	movs	r1, #0
 80015a8:	2078      	movs	r0, #120	; 0x78
 80015aa:	f000 fa15 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80015ae:	2212      	movs	r2, #18
 80015b0:	2100      	movs	r1, #0
 80015b2:	2078      	movs	r0, #120	; 0x78
 80015b4:	f000 fa10 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80015b8:	22db      	movs	r2, #219	; 0xdb
 80015ba:	2100      	movs	r1, #0
 80015bc:	2078      	movs	r0, #120	; 0x78
 80015be:	f000 fa0b 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80015c2:	2220      	movs	r2, #32
 80015c4:	2100      	movs	r1, #0
 80015c6:	2078      	movs	r0, #120	; 0x78
 80015c8:	f000 fa06 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80015cc:	228d      	movs	r2, #141	; 0x8d
 80015ce:	2100      	movs	r1, #0
 80015d0:	2078      	movs	r0, #120	; 0x78
 80015d2:	f000 fa01 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80015d6:	2214      	movs	r2, #20
 80015d8:	2100      	movs	r1, #0
 80015da:	2078      	movs	r0, #120	; 0x78
 80015dc:	f000 f9fc 	bl	80019d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80015e0:	22af      	movs	r2, #175	; 0xaf
 80015e2:	2100      	movs	r1, #0
 80015e4:	2078      	movs	r0, #120	; 0x78
 80015e6:	f000 f9f7 	bl	80019d8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80015ea:	222e      	movs	r2, #46	; 0x2e
 80015ec:	2100      	movs	r1, #0
 80015ee:	2078      	movs	r0, #120	; 0x78
 80015f0:	f000 f9f2 	bl	80019d8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80015f4:	2000      	movs	r0, #0
 80015f6:	f000 f843 	bl	8001680 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80015fa:	f000 f813 	bl	8001624 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <SSD1306_Init+0x184>)
 8001600:	2200      	movs	r2, #0
 8001602:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <SSD1306_Init+0x184>)
 8001606:	2200      	movs	r2, #0
 8001608:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <SSD1306_Init+0x184>)
 800160c:	2201      	movs	r2, #1
 800160e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001610:	2301      	movs	r3, #1
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000224 	.word	0x20000224
 8001620:	2000070c 	.word	0x2000070c

08001624 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800162a:	2300      	movs	r3, #0
 800162c:	71fb      	strb	r3, [r7, #7]
 800162e:	e01d      	b.n	800166c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	3b50      	subs	r3, #80	; 0x50
 8001634:	b2db      	uxtb	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	2100      	movs	r1, #0
 800163a:	2078      	movs	r0, #120	; 0x78
 800163c:	f000 f9cc 	bl	80019d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	2078      	movs	r0, #120	; 0x78
 8001646:	f000 f9c7 	bl	80019d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800164a:	2210      	movs	r2, #16
 800164c:	2100      	movs	r1, #0
 800164e:	2078      	movs	r0, #120	; 0x78
 8001650:	f000 f9c2 	bl	80019d8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	01db      	lsls	r3, r3, #7
 8001658:	4a08      	ldr	r2, [pc, #32]	; (800167c <SSD1306_UpdateScreen+0x58>)
 800165a:	441a      	add	r2, r3
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	2140      	movs	r1, #64	; 0x40
 8001660:	2078      	movs	r0, #120	; 0x78
 8001662:	f000 f953 	bl	800190c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	3301      	adds	r3, #1
 800166a:	71fb      	strb	r3, [r7, #7]
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	2b07      	cmp	r3, #7
 8001670:	d9de      	bls.n	8001630 <SSD1306_UpdateScreen+0xc>
	}
}
 8001672:	bf00      	nop
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000030c 	.word	0x2000030c

08001680 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <SSD1306_Fill+0x14>
 8001690:	2300      	movs	r3, #0
 8001692:	e000      	b.n	8001696 <SSD1306_Fill+0x16>
 8001694:	23ff      	movs	r3, #255	; 0xff
 8001696:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800169a:	4619      	mov	r1, r3
 800169c:	4803      	ldr	r0, [pc, #12]	; (80016ac <SSD1306_Fill+0x2c>)
 800169e:	f003 f809 	bl	80046b4 <memset>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2000030c 	.word	0x2000030c

080016b0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
 80016ba:	460b      	mov	r3, r1
 80016bc:	80bb      	strh	r3, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	70fb      	strb	r3, [r7, #3]
	if (
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	2b7f      	cmp	r3, #127	; 0x7f
 80016c6:	d848      	bhi.n	800175a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80016c8:	88bb      	ldrh	r3, [r7, #4]
 80016ca:	2b3f      	cmp	r3, #63	; 0x3f
 80016cc:	d845      	bhi.n	800175a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80016ce:	4b25      	ldr	r3, [pc, #148]	; (8001764 <SSD1306_DrawPixel+0xb4>)
 80016d0:	791b      	ldrb	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d006      	beq.n	80016e4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80016d6:	78fb      	ldrb	r3, [r7, #3]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	bf0c      	ite	eq
 80016dc:	2301      	moveq	r3, #1
 80016de:	2300      	movne	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d11a      	bne.n	8001720 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016ea:	88fa      	ldrh	r2, [r7, #6]
 80016ec:	88bb      	ldrh	r3, [r7, #4]
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	b298      	uxth	r0, r3
 80016f2:	4603      	mov	r3, r0
 80016f4:	01db      	lsls	r3, r3, #7
 80016f6:	4413      	add	r3, r2
 80016f8:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <SSD1306_DrawPixel+0xb8>)
 80016fa:	5cd3      	ldrb	r3, [r2, r3]
 80016fc:	b25a      	sxtb	r2, r3
 80016fe:	88bb      	ldrh	r3, [r7, #4]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	2101      	movs	r1, #1
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	b25b      	sxtb	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b259      	sxtb	r1, r3
 8001710:	88fa      	ldrh	r2, [r7, #6]
 8001712:	4603      	mov	r3, r0
 8001714:	01db      	lsls	r3, r3, #7
 8001716:	4413      	add	r3, r2
 8001718:	b2c9      	uxtb	r1, r1
 800171a:	4a13      	ldr	r2, [pc, #76]	; (8001768 <SSD1306_DrawPixel+0xb8>)
 800171c:	54d1      	strb	r1, [r2, r3]
 800171e:	e01d      	b.n	800175c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001720:	88fa      	ldrh	r2, [r7, #6]
 8001722:	88bb      	ldrh	r3, [r7, #4]
 8001724:	08db      	lsrs	r3, r3, #3
 8001726:	b298      	uxth	r0, r3
 8001728:	4603      	mov	r3, r0
 800172a:	01db      	lsls	r3, r3, #7
 800172c:	4413      	add	r3, r2
 800172e:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <SSD1306_DrawPixel+0xb8>)
 8001730:	5cd3      	ldrb	r3, [r2, r3]
 8001732:	b25a      	sxtb	r2, r3
 8001734:	88bb      	ldrh	r3, [r7, #4]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	2101      	movs	r1, #1
 800173c:	fa01 f303 	lsl.w	r3, r1, r3
 8001740:	b25b      	sxtb	r3, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	b25b      	sxtb	r3, r3
 8001746:	4013      	ands	r3, r2
 8001748:	b259      	sxtb	r1, r3
 800174a:	88fa      	ldrh	r2, [r7, #6]
 800174c:	4603      	mov	r3, r0
 800174e:	01db      	lsls	r3, r3, #7
 8001750:	4413      	add	r3, r2
 8001752:	b2c9      	uxtb	r1, r1
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <SSD1306_DrawPixel+0xb8>)
 8001756:	54d1      	strb	r1, [r2, r3]
 8001758:	e000      	b.n	800175c <SSD1306_DrawPixel+0xac>
		return;
 800175a:	bf00      	nop
	}
}
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	2000070c 	.word	0x2000070c
 8001768:	2000030c 	.word	0x2000030c

0800176c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	80fb      	strh	r3, [r7, #6]
 8001778:	4613      	mov	r3, r2
 800177a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800177c:	4a05      	ldr	r2, [pc, #20]	; (8001794 <SSD1306_GotoXY+0x28>)
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <SSD1306_GotoXY+0x28>)
 8001784:	88bb      	ldrh	r3, [r7, #4]
 8001786:	8053      	strh	r3, [r2, #2]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	2000070c 	.word	0x2000070c

08001798 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	4613      	mov	r3, r2
 80017a6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017a8:	4b3a      	ldr	r3, [pc, #232]	; (8001894 <SSD1306_Putc+0xfc>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	4413      	add	r3, r2
	if (
 80017b4:	2b7f      	cmp	r3, #127	; 0x7f
 80017b6:	dc07      	bgt.n	80017c8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80017b8:	4b36      	ldr	r3, [pc, #216]	; (8001894 <SSD1306_Putc+0xfc>)
 80017ba:	885b      	ldrh	r3, [r3, #2]
 80017bc:	461a      	mov	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	785b      	ldrb	r3, [r3, #1]
 80017c2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017c4:	2b3f      	cmp	r3, #63	; 0x3f
 80017c6:	dd01      	ble.n	80017cc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e05e      	b.n	800188a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	e04b      	b.n	800186a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	3b20      	subs	r3, #32
 80017da:	6839      	ldr	r1, [r7, #0]
 80017dc:	7849      	ldrb	r1, [r1, #1]
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4619      	mov	r1, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	440b      	add	r3, r1
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	e030      	b.n	8001858 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d010      	beq.n	8001828 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001806:	4b23      	ldr	r3, [pc, #140]	; (8001894 <SSD1306_Putc+0xfc>)
 8001808:	881a      	ldrh	r2, [r3, #0]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4413      	add	r3, r2
 8001810:	b298      	uxth	r0, r3
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <SSD1306_Putc+0xfc>)
 8001814:	885a      	ldrh	r2, [r3, #2]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	b29b      	uxth	r3, r3
 800181a:	4413      	add	r3, r2
 800181c:	b29b      	uxth	r3, r3
 800181e:	79ba      	ldrb	r2, [r7, #6]
 8001820:	4619      	mov	r1, r3
 8001822:	f7ff ff45 	bl	80016b0 <SSD1306_DrawPixel>
 8001826:	e014      	b.n	8001852 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <SSD1306_Putc+0xfc>)
 800182a:	881a      	ldrh	r2, [r3, #0]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	b29b      	uxth	r3, r3
 8001830:	4413      	add	r3, r2
 8001832:	b298      	uxth	r0, r3
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <SSD1306_Putc+0xfc>)
 8001836:	885a      	ldrh	r2, [r3, #2]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	b29b      	uxth	r3, r3
 800183c:	4413      	add	r3, r2
 800183e:	b299      	uxth	r1, r3
 8001840:	79bb      	ldrb	r3, [r7, #6]
 8001842:	2b00      	cmp	r3, #0
 8001844:	bf0c      	ite	eq
 8001846:	2301      	moveq	r3, #1
 8001848:	2300      	movne	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	f7ff ff2f 	bl	80016b0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	3301      	adds	r3, #1
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4293      	cmp	r3, r2
 8001862:	d3c8      	bcc.n	80017f6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	461a      	mov	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	4293      	cmp	r3, r2
 8001874:	d3ad      	bcc.n	80017d2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001876:	4b07      	ldr	r3, [pc, #28]	; (8001894 <SSD1306_Putc+0xfc>)
 8001878:	881a      	ldrh	r2, [r3, #0]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4413      	add	r3, r2
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <SSD1306_Putc+0xfc>)
 8001886:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001888:	79fb      	ldrb	r3, [r7, #7]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	2000070c 	.word	0x2000070c

08001898 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	4613      	mov	r3, r2
 80018a4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80018a6:	e012      	b.n	80018ce <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	79fa      	ldrb	r2, [r7, #7]
 80018ae:	68b9      	ldr	r1, [r7, #8]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff71 	bl	8001798 <SSD1306_Putc>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d002      	beq.n	80018c8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	e008      	b.n	80018da <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	3301      	adds	r3, #1
 80018cc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1e8      	bne.n	80018a8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	781b      	ldrb	r3, [r3, #0]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <ssd1306_I2C_Init+0x24>)
 80018ec:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018ee:	e002      	b.n	80018f6 <ssd1306_I2C_Init+0x12>
		p--;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f9      	bne.n	80018f0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	0003d090 	.word	0x0003d090

0800190c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b0c7      	sub	sp, #284	; 0x11c
 8001910:	af02      	add	r7, sp, #8
 8001912:	4604      	mov	r4, r0
 8001914:	4608      	mov	r0, r1
 8001916:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800191a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800191e:	600a      	str	r2, [r1, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001926:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800192a:	4622      	mov	r2, r4
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001932:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001936:	4602      	mov	r2, r0
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800193e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001942:	460a      	mov	r2, r1
 8001944:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001946:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800194a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800194e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001952:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001956:	7812      	ldrb	r2, [r2, #0]
 8001958:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800195a:	2300      	movs	r3, #0
 800195c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001960:	e015      	b.n	800198e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001962:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001966:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800196a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	441a      	add	r2, r3
 8001972:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001976:	3301      	adds	r3, #1
 8001978:	7811      	ldrb	r1, [r2, #0]
 800197a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800197e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001982:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001984:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001988:	3301      	adds	r3, #1
 800198a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800198e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001992:	b29b      	uxth	r3, r3
 8001994:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001998:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800199c:	8812      	ldrh	r2, [r2, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d8df      	bhi.n	8001962 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80019a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019a6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b299      	uxth	r1, r3
 80019ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	f107 020c 	add.w	r2, r7, #12
 80019c0:	200a      	movs	r0, #10
 80019c2:	9000      	str	r0, [sp, #0]
 80019c4:	4803      	ldr	r0, [pc, #12]	; (80019d4 <ssd1306_I2C_WriteMulti+0xc8>)
 80019c6:	f000 feb7 	bl	8002738 <HAL_I2C_Master_Transmit>
}
 80019ca:	bf00      	nop
 80019cc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd90      	pop	{r4, r7, pc}
 80019d4:	20000224 	.word	0x20000224

080019d8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af02      	add	r7, sp, #8
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
 80019e2:	460b      	mov	r3, r1
 80019e4:	71bb      	strb	r3, [r7, #6]
 80019e6:	4613      	mov	r3, r2
 80019e8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80019ea:	79bb      	ldrb	r3, [r7, #6]
 80019ec:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80019ee:	797b      	ldrb	r3, [r7, #5]
 80019f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	b299      	uxth	r1, r3
 80019f6:	f107 020c 	add.w	r2, r7, #12
 80019fa:	230a      	movs	r3, #10
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	2302      	movs	r3, #2
 8001a00:	4803      	ldr	r0, [pc, #12]	; (8001a10 <ssd1306_I2C_Write+0x38>)
 8001a02:	f000 fe99 	bl	8002738 <HAL_I2C_Master_Transmit>
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000224 	.word	0x20000224

08001a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_MspInit+0x40>)
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <HAL_MspInit+0x40>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6193      	str	r3, [r2, #24]
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_MspInit+0x40>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_MspInit+0x40>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_MspInit+0x40>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	61d3      	str	r3, [r2, #28]
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_MspInit+0x40>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	40021000 	.word	0x40021000

08001a58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <HAL_I2C_MspInit+0x90>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d132      	bne.n	8001ade <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a78:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <HAL_I2C_MspInit+0x94>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a1b      	ldr	r2, [pc, #108]	; (8001aec <HAL_I2C_MspInit+0x94>)
 8001a7e:	f043 0308 	orr.w	r3, r3, #8
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_I2C_MspInit+0x94>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a96:	2312      	movs	r3, #18
 8001a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4812      	ldr	r0, [pc, #72]	; (8001af0 <HAL_I2C_MspInit+0x98>)
 8001aa6:	f000 fb4f 	bl	8002148 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_I2C_MspInit+0x9c>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	f043 0302 	orr.w	r3, r3, #2
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac0:	4a0c      	ldr	r2, [pc, #48]	; (8001af4 <HAL_I2C_MspInit+0x9c>)
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_I2C_MspInit+0x94>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a08      	ldr	r2, [pc, #32]	; (8001aec <HAL_I2C_MspInit+0x94>)
 8001acc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ad0:	61d3      	str	r3, [r2, #28]
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_I2C_MspInit+0x94>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ade:	bf00      	nop
 8001ae0:	3728      	adds	r7, #40	; 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010c00 	.word	0x40010c00
 8001af4:	40010000 	.word	0x40010000

08001af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0318 	add.w	r3, r7, #24
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a27      	ldr	r2, [pc, #156]	; (8001bb0 <HAL_TIM_Base_MspInit+0xb8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d12d      	bne.n	8001b74 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b18:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a25      	ldr	r2, [pc, #148]	; (8001bb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001b1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 0318 	add.w	r3, r7, #24
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4816      	ldr	r0, [pc, #88]	; (8001bb8 <HAL_TIM_Base_MspInit+0xc0>)
 8001b5e:	f000 faf3 	bl	8002148 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	201b      	movs	r0, #27
 8001b68:	f000 fab7 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001b6c:	201b      	movs	r0, #27
 8001b6e:	f000 fad0 	bl	8002112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b72:	e018      	b.n	8001ba6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <HAL_TIM_Base_MspInit+0xc4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d113      	bne.n	8001ba6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	4a0c      	ldr	r2, [pc, #48]	; (8001bb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	61d3      	str	r3, [r2, #28]
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_TIM_Base_MspInit+0xbc>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2100      	movs	r1, #0
 8001b9a:	201d      	movs	r0, #29
 8001b9c:	f000 fa9d 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ba0:	201d      	movs	r0, #29
 8001ba2:	f000 fab6 	bl	8002112 <HAL_NVIC_EnableIRQ>
}
 8001ba6:	bf00      	nop
 8001ba8:	3728      	adds	r7, #40	; 0x28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40012c00 	.word	0x40012c00
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010800 	.word	0x40010800
 8001bbc:	40000400 	.word	0x40000400

08001bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <NMI_Handler+0x4>

08001bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <BusFault_Handler+0x4>

08001bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <UsageFault_Handler+0x4>

08001bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c06:	f000 f951 	bl	8001eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <TIM1_CC_IRQHandler+0x10>)
 8001c16:	f001 ffc1 	bl	8003b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000278 	.word	0x20000278

08001c24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <TIM3_IRQHandler+0x10>)
 8001c2a:	f001 ffb7 	bl	8003b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200002c0 	.word	0x200002c0

08001c38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8001c3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c40:	f000 fc1e 	bl	8002480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_getpid>:
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <_kill>:
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
 8001c60:	f002 fcfe 	bl	8004660 <__errno>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2216      	movs	r2, #22
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_exit>:
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ffe7 	bl	8001c56 <_kill>
 8001c88:	e7fe      	b.n	8001c88 <_exit+0x12>

08001c8a <_read>:
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	e00a      	b.n	8001cb2 <_read+0x28>
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	4601      	mov	r1, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	60ba      	str	r2, [r7, #8]
 8001ca8:	b2ca      	uxtb	r2, r1
 8001caa:	701a      	strb	r2, [r3, #0]
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	dbf0      	blt.n	8001c9c <_read+0x12>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <_write>:
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	e009      	b.n	8001cea <_write+0x26>
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	60ba      	str	r2, [r7, #8]
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f3af 8000 	nop.w
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	dbf1      	blt.n	8001cd6 <_write+0x12>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_close>:
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <_fstat>:
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	2300      	movs	r3, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <_isatty>:
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <_lseek>:
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	2300      	movs	r3, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <_sbrk>:
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <_sbrk+0x5c>)
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <_sbrk+0x60>)
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <_sbrk+0x22>
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <_sbrk+0x64>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <_sbrk+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d207      	bcs.n	8001d9c <_sbrk+0x40>
 8001d8c:	f002 fc68 	bl	8004660 <__errno>
 8001d90:	4603      	mov	r3, r0
 8001d92:	220c      	movs	r2, #12
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d9a:	e009      	b.n	8001db0 <_sbrk+0x54>
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <_sbrk+0x64>)
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20005000 	.word	0x20005000
 8001dbc:	00000400 	.word	0x00000400
 8001dc0:	20000714 	.word	0x20000714
 8001dc4:	20000730 	.word	0x20000730

08001dc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <Reset_Handler>:
 8001dd4:	480c      	ldr	r0, [pc, #48]	; (8001e08 <LoopFillZerobss+0x12>)
 8001dd6:	490d      	ldr	r1, [pc, #52]	; (8001e0c <LoopFillZerobss+0x16>)
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <LoopFillZerobss+0x1a>)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e002      	b.n	8001de4 <LoopCopyDataInit>

08001dde <CopyDataInit>:
 8001dde:	58d4      	ldr	r4, [r2, r3]
 8001de0:	50c4      	str	r4, [r0, r3]
 8001de2:	3304      	adds	r3, #4

08001de4 <LoopCopyDataInit>:
 8001de4:	18c4      	adds	r4, r0, r3
 8001de6:	428c      	cmp	r4, r1
 8001de8:	d3f9      	bcc.n	8001dde <CopyDataInit>
 8001dea:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <LoopFillZerobss+0x1e>)
 8001dec:	4c0a      	ldr	r4, [pc, #40]	; (8001e18 <LoopFillZerobss+0x22>)
 8001dee:	2300      	movs	r3, #0
 8001df0:	e001      	b.n	8001df6 <LoopFillZerobss>

08001df2 <FillZerobss>:
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	3204      	adds	r2, #4

08001df6 <LoopFillZerobss>:
 8001df6:	42a2      	cmp	r2, r4
 8001df8:	d3fb      	bcc.n	8001df2 <FillZerobss>
 8001dfa:	f7ff ffe5 	bl	8001dc8 <SystemInit>
 8001dfe:	f002 fc35 	bl	800466c <__libc_init_array>
 8001e02:	f7ff f91b 	bl	800103c <main>
 8001e06:	4770      	bx	lr
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	200001e8 	.word	0x200001e8
 8001e10:	08009ba4 	.word	0x08009ba4
 8001e14:	200001e8 	.word	0x200001e8
 8001e18:	2000072c 	.word	0x2000072c

08001e1c <ADC1_2_IRQHandler>:
 8001e1c:	e7fe      	b.n	8001e1c <ADC1_2_IRQHandler>
	...

08001e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_Init+0x28>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_Init+0x28>)
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f000 f947 	bl	80020c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e36:	200f      	movs	r0, #15
 8001e38:	f000 f808 	bl	8001e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e3c:	f7ff fdea 	bl	8001a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40022000 	.word	0x40022000

08001e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_InitTick+0x54>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x58>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f95f 	bl	800212e <HAL_SYSTICK_Config>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00e      	b.n	8001e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b0f      	cmp	r3, #15
 8001e7e:	d80a      	bhi.n	8001e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e80:	2200      	movs	r2, #0
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e88:	f000 f927 	bl	80020da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e8c:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <HAL_InitTick+0x5c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000008 	.word	0x20000008
 8001ea4:	20000010 	.word	0x20000010
 8001ea8:	2000000c 	.word	0x2000000c

08001eac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_IncTick+0x1c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_IncTick+0x20>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a03      	ldr	r2, [pc, #12]	; (8001ecc <HAL_IncTick+0x20>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	20000010 	.word	0x20000010
 8001ecc:	20000718 	.word	0x20000718

08001ed0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed4:	4b02      	ldr	r3, [pc, #8]	; (8001ee0 <HAL_GetTick+0x10>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	20000718 	.word	0x20000718

08001ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff fff0 	bl	8001ed0 <HAL_GetTick>
 8001ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001efc:	d005      	beq.n	8001f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_Delay+0x44>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f0a:	bf00      	nop
 8001f0c:	f7ff ffe0 	bl	8001ed0 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d8f7      	bhi.n	8001f0c <HAL_Delay+0x28>
  {
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000010 	.word	0x20000010

08001f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5e:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	60d3      	str	r3, [r2, #12]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <__NVIC_GetPriorityGrouping+0x18>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	f003 0307 	and.w	r3, r3, #7
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	db0b      	blt.n	8001fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4906      	ldr	r1, [pc, #24]	; (8001fc4 <__NVIC_EnableIRQ+0x34>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	db0a      	blt.n	8001ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	490c      	ldr	r1, [pc, #48]	; (8002014 <__NVIC_SetPriority+0x4c>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	0112      	lsls	r2, r2, #4
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	440b      	add	r3, r1
 8001fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff0:	e00a      	b.n	8002008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4908      	ldr	r1, [pc, #32]	; (8002018 <__NVIC_SetPriority+0x50>)
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	3b04      	subs	r3, #4
 8002000:	0112      	lsls	r2, r2, #4
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	440b      	add	r3, r1
 8002006:	761a      	strb	r2, [r3, #24]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e100 	.word	0xe000e100
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f1c3 0307 	rsb	r3, r3, #7
 8002036:	2b04      	cmp	r3, #4
 8002038:	bf28      	it	cs
 800203a:	2304      	movcs	r3, #4
 800203c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3304      	adds	r3, #4
 8002042:	2b06      	cmp	r3, #6
 8002044:	d902      	bls.n	800204c <NVIC_EncodePriority+0x30>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3b03      	subs	r3, #3
 800204a:	e000      	b.n	800204e <NVIC_EncodePriority+0x32>
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	401a      	ands	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002064:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	43d9      	mvns	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	4313      	orrs	r3, r2
         );
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002090:	d301      	bcc.n	8002096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002092:	2301      	movs	r3, #1
 8002094:	e00f      	b.n	80020b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <SysTick_Config+0x40>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209e:	210f      	movs	r1, #15
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020a4:	f7ff ff90 	bl	8001fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <SysTick_Config+0x40>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ae:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <SysTick_Config+0x40>)
 80020b0:	2207      	movs	r2, #7
 80020b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	e000e010 	.word	0xe000e010

080020c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff2d 	bl	8001f2c <__NVIC_SetPriorityGrouping>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ec:	f7ff ff42 	bl	8001f74 <__NVIC_GetPriorityGrouping>
 80020f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68b9      	ldr	r1, [r7, #8]
 80020f6:	6978      	ldr	r0, [r7, #20]
 80020f8:	f7ff ff90 	bl	800201c <NVIC_EncodePriority>
 80020fc:	4602      	mov	r2, r0
 80020fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff5f 	bl	8001fc8 <__NVIC_SetPriority>
}
 800210a:	bf00      	nop
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff35 	bl	8001f90 <__NVIC_EnableIRQ>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ffa2 	bl	8002080 <SysTick_Config>
 800213c:	4603      	mov	r3, r0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	b480      	push	{r7}
 800214a:	b08b      	sub	sp, #44	; 0x2c
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002156:	2300      	movs	r3, #0
 8002158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215a:	e169      	b.n	8002430 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800215c:	2201      	movs	r2, #1
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	429a      	cmp	r2, r3
 8002176:	f040 8158 	bne.w	800242a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4a9a      	ldr	r2, [pc, #616]	; (80023e8 <HAL_GPIO_Init+0x2a0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d05e      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 8002184:	4a98      	ldr	r2, [pc, #608]	; (80023e8 <HAL_GPIO_Init+0x2a0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d875      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 800218a:	4a98      	ldr	r2, [pc, #608]	; (80023ec <HAL_GPIO_Init+0x2a4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d058      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 8002190:	4a96      	ldr	r2, [pc, #600]	; (80023ec <HAL_GPIO_Init+0x2a4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d86f      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 8002196:	4a96      	ldr	r2, [pc, #600]	; (80023f0 <HAL_GPIO_Init+0x2a8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d052      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 800219c:	4a94      	ldr	r2, [pc, #592]	; (80023f0 <HAL_GPIO_Init+0x2a8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d869      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 80021a2:	4a94      	ldr	r2, [pc, #592]	; (80023f4 <HAL_GPIO_Init+0x2ac>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d04c      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 80021a8:	4a92      	ldr	r2, [pc, #584]	; (80023f4 <HAL_GPIO_Init+0x2ac>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d863      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 80021ae:	4a92      	ldr	r2, [pc, #584]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d046      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
 80021b4:	4a90      	ldr	r2, [pc, #576]	; (80023f8 <HAL_GPIO_Init+0x2b0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d85d      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 80021ba:	2b12      	cmp	r3, #18
 80021bc:	d82a      	bhi.n	8002214 <HAL_GPIO_Init+0xcc>
 80021be:	2b12      	cmp	r3, #18
 80021c0:	d859      	bhi.n	8002276 <HAL_GPIO_Init+0x12e>
 80021c2:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <HAL_GPIO_Init+0x80>)
 80021c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c8:	08002243 	.word	0x08002243
 80021cc:	0800221d 	.word	0x0800221d
 80021d0:	0800222f 	.word	0x0800222f
 80021d4:	08002271 	.word	0x08002271
 80021d8:	08002277 	.word	0x08002277
 80021dc:	08002277 	.word	0x08002277
 80021e0:	08002277 	.word	0x08002277
 80021e4:	08002277 	.word	0x08002277
 80021e8:	08002277 	.word	0x08002277
 80021ec:	08002277 	.word	0x08002277
 80021f0:	08002277 	.word	0x08002277
 80021f4:	08002277 	.word	0x08002277
 80021f8:	08002277 	.word	0x08002277
 80021fc:	08002277 	.word	0x08002277
 8002200:	08002277 	.word	0x08002277
 8002204:	08002277 	.word	0x08002277
 8002208:	08002277 	.word	0x08002277
 800220c:	08002225 	.word	0x08002225
 8002210:	08002239 	.word	0x08002239
 8002214:	4a79      	ldr	r2, [pc, #484]	; (80023fc <HAL_GPIO_Init+0x2b4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800221a:	e02c      	b.n	8002276 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	623b      	str	r3, [r7, #32]
          break;
 8002222:	e029      	b.n	8002278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	3304      	adds	r3, #4
 800222a:	623b      	str	r3, [r7, #32]
          break;
 800222c:	e024      	b.n	8002278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	3308      	adds	r3, #8
 8002234:	623b      	str	r3, [r7, #32]
          break;
 8002236:	e01f      	b.n	8002278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	330c      	adds	r3, #12
 800223e:	623b      	str	r3, [r7, #32]
          break;
 8002240:	e01a      	b.n	8002278 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800224a:	2304      	movs	r3, #4
 800224c:	623b      	str	r3, [r7, #32]
          break;
 800224e:	e013      	b.n	8002278 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d105      	bne.n	8002264 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002258:	2308      	movs	r3, #8
 800225a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	611a      	str	r2, [r3, #16]
          break;
 8002262:	e009      	b.n	8002278 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002264:	2308      	movs	r3, #8
 8002266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	615a      	str	r2, [r3, #20]
          break;
 800226e:	e003      	b.n	8002278 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002270:	2300      	movs	r3, #0
 8002272:	623b      	str	r3, [r7, #32]
          break;
 8002274:	e000      	b.n	8002278 <HAL_GPIO_Init+0x130>
          break;
 8002276:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2bff      	cmp	r3, #255	; 0xff
 800227c:	d801      	bhi.n	8002282 <HAL_GPIO_Init+0x13a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	e001      	b.n	8002286 <HAL_GPIO_Init+0x13e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3304      	adds	r3, #4
 8002286:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2bff      	cmp	r3, #255	; 0xff
 800228c:	d802      	bhi.n	8002294 <HAL_GPIO_Init+0x14c>
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	e002      	b.n	800229a <HAL_GPIO_Init+0x152>
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	3b08      	subs	r3, #8
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	210f      	movs	r1, #15
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	401a      	ands	r2, r3
 80022ac:	6a39      	ldr	r1, [r7, #32]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	431a      	orrs	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80b1 	beq.w	800242a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022c8:	4b4d      	ldr	r3, [pc, #308]	; (8002400 <HAL_GPIO_Init+0x2b8>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	4a4c      	ldr	r2, [pc, #304]	; (8002400 <HAL_GPIO_Init+0x2b8>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6193      	str	r3, [r2, #24]
 80022d4:	4b4a      	ldr	r3, [pc, #296]	; (8002400 <HAL_GPIO_Init+0x2b8>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022e0:	4a48      	ldr	r2, [pc, #288]	; (8002404 <HAL_GPIO_Init+0x2bc>)
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	3302      	adds	r3, #2
 80022e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	220f      	movs	r2, #15
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a40      	ldr	r2, [pc, #256]	; (8002408 <HAL_GPIO_Init+0x2c0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d013      	beq.n	8002334 <HAL_GPIO_Init+0x1ec>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3f      	ldr	r2, [pc, #252]	; (800240c <HAL_GPIO_Init+0x2c4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00d      	beq.n	8002330 <HAL_GPIO_Init+0x1e8>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a3e      	ldr	r2, [pc, #248]	; (8002410 <HAL_GPIO_Init+0x2c8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d007      	beq.n	800232c <HAL_GPIO_Init+0x1e4>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a3d      	ldr	r2, [pc, #244]	; (8002414 <HAL_GPIO_Init+0x2cc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d101      	bne.n	8002328 <HAL_GPIO_Init+0x1e0>
 8002324:	2303      	movs	r3, #3
 8002326:	e006      	b.n	8002336 <HAL_GPIO_Init+0x1ee>
 8002328:	2304      	movs	r3, #4
 800232a:	e004      	b.n	8002336 <HAL_GPIO_Init+0x1ee>
 800232c:	2302      	movs	r3, #2
 800232e:	e002      	b.n	8002336 <HAL_GPIO_Init+0x1ee>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <HAL_GPIO_Init+0x1ee>
 8002334:	2300      	movs	r3, #0
 8002336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002338:	f002 0203 	and.w	r2, r2, #3
 800233c:	0092      	lsls	r2, r2, #2
 800233e:	4093      	lsls	r3, r2
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002346:	492f      	ldr	r1, [pc, #188]	; (8002404 <HAL_GPIO_Init+0x2bc>)
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	089b      	lsrs	r3, r3, #2
 800234c:	3302      	adds	r3, #2
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d006      	beq.n	800236e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002360:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	492c      	ldr	r1, [pc, #176]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]
 800236c:	e006      	b.n	800237c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800236e:	4b2a      	ldr	r3, [pc, #168]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	43db      	mvns	r3, r3
 8002376:	4928      	ldr	r1, [pc, #160]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 8002378:	4013      	ands	r3, r2
 800237a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d006      	beq.n	8002396 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002388:	4b23      	ldr	r3, [pc, #140]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	4922      	ldr	r1, [pc, #136]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
 8002394:	e006      	b.n	80023a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	43db      	mvns	r3, r3
 800239e:	491e      	ldr	r1, [pc, #120]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d006      	beq.n	80023be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023b0:	4b19      	ldr	r3, [pc, #100]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	4918      	ldr	r1, [pc, #96]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	608b      	str	r3, [r1, #8]
 80023bc:	e006      	b.n	80023cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023be:	4b16      	ldr	r3, [pc, #88]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	4914      	ldr	r1, [pc, #80]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d021      	beq.n	800241c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	490e      	ldr	r1, [pc, #56]	; (8002418 <HAL_GPIO_Init+0x2d0>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60cb      	str	r3, [r1, #12]
 80023e4:	e021      	b.n	800242a <HAL_GPIO_Init+0x2e2>
 80023e6:	bf00      	nop
 80023e8:	10320000 	.word	0x10320000
 80023ec:	10310000 	.word	0x10310000
 80023f0:	10220000 	.word	0x10220000
 80023f4:	10210000 	.word	0x10210000
 80023f8:	10120000 	.word	0x10120000
 80023fc:	10110000 	.word	0x10110000
 8002400:	40021000 	.word	0x40021000
 8002404:	40010000 	.word	0x40010000
 8002408:	40010800 	.word	0x40010800
 800240c:	40010c00 	.word	0x40010c00
 8002410:	40011000 	.word	0x40011000
 8002414:	40011400 	.word	0x40011400
 8002418:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_GPIO_Init+0x304>)
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	43db      	mvns	r3, r3
 8002424:	4909      	ldr	r1, [pc, #36]	; (800244c <HAL_GPIO_Init+0x304>)
 8002426:	4013      	ands	r3, r2
 8002428:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	3301      	adds	r3, #1
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	fa22 f303 	lsr.w	r3, r2, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	f47f ae8e 	bne.w	800215c <HAL_GPIO_Init+0x14>
  }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	372c      	adds	r7, #44	; 0x2c
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	40010400 	.word	0x40010400

08002450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
 800245c:	4613      	mov	r3, r2
 800245e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002460:	787b      	ldrb	r3, [r7, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800246c:	e003      	b.n	8002476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	041a      	lsls	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	611a      	str	r2, [r3, #16]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	4013      	ands	r3, r2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002496:	4a05      	ldr	r2, [pc, #20]	; (80024ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe ffd8 	bl	8001454 <HAL_GPIO_EXTI_Callback>
  }
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40010400 	.word	0x40010400

080024b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e12b      	b.n	800271a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff fabe 	bl	8001a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2224      	movs	r2, #36	; 0x24
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0201 	bic.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002502:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002512:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002514:	f001 f918 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 8002518:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4a81      	ldr	r2, [pc, #516]	; (8002724 <HAL_I2C_Init+0x274>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d807      	bhi.n	8002534 <HAL_I2C_Init+0x84>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4a80      	ldr	r2, [pc, #512]	; (8002728 <HAL_I2C_Init+0x278>)
 8002528:	4293      	cmp	r3, r2
 800252a:	bf94      	ite	ls
 800252c:	2301      	movls	r3, #1
 800252e:	2300      	movhi	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	e006      	b.n	8002542 <HAL_I2C_Init+0x92>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4a7d      	ldr	r2, [pc, #500]	; (800272c <HAL_I2C_Init+0x27c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	bf94      	ite	ls
 800253c:	2301      	movls	r3, #1
 800253e:	2300      	movhi	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0e7      	b.n	800271a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4a78      	ldr	r2, [pc, #480]	; (8002730 <HAL_I2C_Init+0x280>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	0c9b      	lsrs	r3, r3, #18
 8002554:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	430a      	orrs	r2, r1
 8002568:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4a6a      	ldr	r2, [pc, #424]	; (8002724 <HAL_I2C_Init+0x274>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d802      	bhi.n	8002584 <HAL_I2C_Init+0xd4>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	3301      	adds	r3, #1
 8002582:	e009      	b.n	8002598 <HAL_I2C_Init+0xe8>
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800258a:	fb02 f303 	mul.w	r3, r2, r3
 800258e:	4a69      	ldr	r2, [pc, #420]	; (8002734 <HAL_I2C_Init+0x284>)
 8002590:	fba2 2303 	umull	r2, r3, r2, r3
 8002594:	099b      	lsrs	r3, r3, #6
 8002596:	3301      	adds	r3, #1
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	430b      	orrs	r3, r1
 800259e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	495c      	ldr	r1, [pc, #368]	; (8002724 <HAL_I2C_Init+0x274>)
 80025b4:	428b      	cmp	r3, r1
 80025b6:	d819      	bhi.n	80025ec <HAL_I2C_Init+0x13c>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1e59      	subs	r1, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025c6:	1c59      	adds	r1, r3, #1
 80025c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025cc:	400b      	ands	r3, r1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_I2C_Init+0x138>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1e59      	subs	r1, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e6:	e051      	b.n	800268c <HAL_I2C_Init+0x1dc>
 80025e8:	2304      	movs	r3, #4
 80025ea:	e04f      	b.n	800268c <HAL_I2C_Init+0x1dc>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d111      	bne.n	8002618 <HAL_I2C_Init+0x168>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1e58      	subs	r0, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6859      	ldr	r1, [r3, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	440b      	add	r3, r1
 8002602:	fbb0 f3f3 	udiv	r3, r0, r3
 8002606:	3301      	adds	r3, #1
 8002608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	e012      	b.n	800263e <HAL_I2C_Init+0x18e>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1e58      	subs	r0, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6859      	ldr	r1, [r3, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	0099      	lsls	r1, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	fbb0 f3f3 	udiv	r3, r0, r3
 800262e:	3301      	adds	r3, #1
 8002630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_I2C_Init+0x196>
 8002642:	2301      	movs	r3, #1
 8002644:	e022      	b.n	800268c <HAL_I2C_Init+0x1dc>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10e      	bne.n	800266c <HAL_I2C_Init+0x1bc>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1e58      	subs	r0, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6859      	ldr	r1, [r3, #4]
 8002656:	460b      	mov	r3, r1
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	440b      	add	r3, r1
 800265c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002660:	3301      	adds	r3, #1
 8002662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800266a:	e00f      	b.n	800268c <HAL_I2C_Init+0x1dc>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1e58      	subs	r0, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6859      	ldr	r1, [r3, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	0099      	lsls	r1, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002682:	3301      	adds	r3, #1
 8002684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	6809      	ldr	r1, [r1, #0]
 8002690:	4313      	orrs	r3, r2
 8002692:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6911      	ldr	r1, [r2, #16]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68d2      	ldr	r2, [r2, #12]
 80026c6:	4311      	orrs	r1, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	430b      	orrs	r3, r1
 80026ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	000186a0 	.word	0x000186a0
 8002728:	001e847f 	.word	0x001e847f
 800272c:	003d08ff 	.word	0x003d08ff
 8002730:	431bde83 	.word	0x431bde83
 8002734:	10624dd3 	.word	0x10624dd3

08002738 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	461a      	mov	r2, r3
 8002744:	460b      	mov	r3, r1
 8002746:	817b      	strh	r3, [r7, #10]
 8002748:	4613      	mov	r3, r2
 800274a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800274c:	f7ff fbc0 	bl	8001ed0 <HAL_GetTick>
 8002750:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b20      	cmp	r3, #32
 800275c:	f040 80e0 	bne.w	8002920 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2319      	movs	r3, #25
 8002766:	2201      	movs	r2, #1
 8002768:	4970      	ldr	r1, [pc, #448]	; (800292c <HAL_I2C_Master_Transmit+0x1f4>)
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 fa92 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002776:	2302      	movs	r3, #2
 8002778:	e0d3      	b.n	8002922 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_I2C_Master_Transmit+0x50>
 8002784:	2302      	movs	r3, #2
 8002786:	e0cc      	b.n	8002922 <HAL_I2C_Master_Transmit+0x1ea>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b01      	cmp	r3, #1
 800279c:	d007      	beq.n	80027ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0201 	orr.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2221      	movs	r2, #33	; 0x21
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2210      	movs	r2, #16
 80027ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	893a      	ldrh	r2, [r7, #8]
 80027de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4a50      	ldr	r2, [pc, #320]	; (8002930 <HAL_I2C_Master_Transmit+0x1f8>)
 80027ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027f0:	8979      	ldrh	r1, [r7, #10]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	6a3a      	ldr	r2, [r7, #32]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f9ca 	bl	8002b90 <I2C_MasterRequestWrite>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e08d      	b.n	8002922 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800281c:	e066      	b.n	80028ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	6a39      	ldr	r1, [r7, #32]
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 fb0c 	bl	8002e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00d      	beq.n	800284a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	2b04      	cmp	r3, #4
 8002834:	d107      	bne.n	8002846 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002844:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e06b      	b.n	8002922 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	781a      	ldrb	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b04      	cmp	r3, #4
 8002886:	d11b      	bne.n	80028c0 <HAL_I2C_Master_Transmit+0x188>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	2b00      	cmp	r3, #0
 800288e:	d017      	beq.n	80028c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	6a39      	ldr	r1, [r7, #32]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fafc 	bl	8002ec2 <I2C_WaitOnBTFFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00d      	beq.n	80028ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d107      	bne.n	80028e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e01a      	b.n	8002922 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d194      	bne.n	800281e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	e000      	b.n	8002922 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002920:	2302      	movs	r3, #2
  }
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	00100002 	.word	0x00100002
 8002930:	ffff0000 	.word	0xffff0000

08002934 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	; 0x28
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	460b      	mov	r3, r1
 8002942:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002944:	f7ff fac4 	bl	8001ed0 <HAL_GetTick>
 8002948:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800294a:	2301      	movs	r3, #1
 800294c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b20      	cmp	r3, #32
 8002958:	f040 8111 	bne.w	8002b7e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2319      	movs	r3, #25
 8002962:	2201      	movs	r2, #1
 8002964:	4988      	ldr	r1, [pc, #544]	; (8002b88 <HAL_I2C_IsDeviceReady+0x254>)
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f994 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002972:	2302      	movs	r3, #2
 8002974:	e104      	b.n	8002b80 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_I2C_IsDeviceReady+0x50>
 8002980:	2302      	movs	r3, #2
 8002982:	e0fd      	b.n	8002b80 <HAL_I2C_IsDeviceReady+0x24c>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b01      	cmp	r3, #1
 8002998:	d007      	beq.n	80029aa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2224      	movs	r2, #36	; 0x24
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4a70      	ldr	r2, [pc, #448]	; (8002b8c <HAL_I2C_IsDeviceReady+0x258>)
 80029cc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029dc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f952 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00d      	beq.n	8002a12 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a04:	d103      	bne.n	8002a0e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0b6      	b.n	8002b80 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a12:	897b      	ldrh	r3, [r7, #10]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a20:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002a22:	f7ff fa55 	bl	8001ed0 <HAL_GetTick>
 8002a26:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4c:	bf0c      	ite	eq
 8002a4e:	2301      	moveq	r3, #1
 8002a50:	2300      	movne	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a56:	e025      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a58:	f7ff fa3a 	bl	8001ed0 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d302      	bcc.n	8002a6e <HAL_I2C_IsDeviceReady+0x13a>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d103      	bne.n	8002a76 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	22a0      	movs	r2, #160	; 0xa0
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2ba0      	cmp	r3, #160	; 0xa0
 8002aae:	d005      	beq.n	8002abc <HAL_I2C_IsDeviceReady+0x188>
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d102      	bne.n	8002abc <HAL_I2C_IsDeviceReady+0x188>
 8002ab6:	7dbb      	ldrb	r3, [r7, #22]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0cd      	beq.n	8002a58 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d129      	bne.n	8002b26 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	2319      	movs	r3, #25
 8002afe:	2201      	movs	r2, #1
 8002b00:	4921      	ldr	r1, [pc, #132]	; (8002b88 <HAL_I2C_IsDeviceReady+0x254>)
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f8c6 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e036      	b.n	8002b80 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	e02c      	b.n	8002b80 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b34:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b3e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2319      	movs	r3, #25
 8002b46:	2201      	movs	r2, #1
 8002b48:	490f      	ldr	r1, [pc, #60]	; (8002b88 <HAL_I2C_IsDeviceReady+0x254>)
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f8a2 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e012      	b.n	8002b80 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	f4ff af32 	bcc.w	80029ce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002b7e:	2302      	movs	r3, #2
  }
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3720      	adds	r7, #32
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	00100002 	.word	0x00100002
 8002b8c:	ffff0000 	.word	0xffff0000

08002b90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d006      	beq.n	8002bba <I2C_MasterRequestWrite+0x2a>
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d003      	beq.n	8002bba <I2C_MasterRequestWrite+0x2a>
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bb8:	d108      	bne.n	8002bcc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	e00b      	b.n	8002be4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	2b12      	cmp	r3, #18
 8002bd2:	d107      	bne.n	8002be4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002be2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f84f 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00d      	beq.n	8002c18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c0a:	d103      	bne.n	8002c14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e035      	b.n	8002c84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c20:	d108      	bne.n	8002c34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c22:	897b      	ldrh	r3, [r7, #10]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c30:	611a      	str	r2, [r3, #16]
 8002c32:	e01b      	b.n	8002c6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c34:	897b      	ldrh	r3, [r7, #10]
 8002c36:	11db      	asrs	r3, r3, #7
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	f003 0306 	and.w	r3, r3, #6
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f063 030f 	orn	r3, r3, #15
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	490e      	ldr	r1, [pc, #56]	; (8002c8c <I2C_MasterRequestWrite+0xfc>)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f875 	bl	8002d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e010      	b.n	8002c84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c62:	897b      	ldrh	r3, [r7, #10]
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	4907      	ldr	r1, [pc, #28]	; (8002c90 <I2C_MasterRequestWrite+0x100>)
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f865 	bl	8002d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	00010008 	.word	0x00010008
 8002c90:	00010002 	.word	0x00010002

08002c94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca4:	e025      	b.n	8002cf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cac:	d021      	beq.n	8002cf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cae:	f7ff f90f 	bl	8001ed0 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d302      	bcc.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d116      	bne.n	8002cf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f043 0220 	orr.w	r2, r3, #32
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e023      	b.n	8002d3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	0c1b      	lsrs	r3, r3, #16
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d10d      	bne.n	8002d18 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	43da      	mvns	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4013      	ands	r3, r2
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	bf0c      	ite	eq
 8002d0e:	2301      	moveq	r3, #1
 8002d10:	2300      	movne	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	e00c      	b.n	8002d32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4013      	ands	r3, r2
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf0c      	ite	eq
 8002d2a:	2301      	moveq	r3, #1
 8002d2c:	2300      	movne	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d0b6      	beq.n	8002ca6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d50:	e051      	b.n	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d60:	d123      	bne.n	8002daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f043 0204 	orr.w	r2, r3, #4
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e046      	b.n	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002db0:	d021      	beq.n	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db2:	f7ff f88d 	bl	8001ed0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d302      	bcc.n	8002dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d116      	bne.n	8002df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f043 0220 	orr.w	r2, r3, #32
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e020      	b.n	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	0c1b      	lsrs	r3, r3, #16
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d10c      	bne.n	8002e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	43da      	mvns	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	e00b      	b.n	8002e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	43da      	mvns	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4013      	ands	r3, r2
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bf14      	ite	ne
 8002e2c:	2301      	movne	r3, #1
 8002e2e:	2300      	moveq	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d18d      	bne.n	8002d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e4c:	e02d      	b.n	8002eaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f878 	bl	8002f44 <I2C_IsAcknowledgeFailed>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e02d      	b.n	8002eba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e64:	d021      	beq.n	8002eaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e66:	f7ff f833 	bl	8001ed0 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d302      	bcc.n	8002e7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d116      	bne.n	8002eaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f043 0220 	orr.w	r2, r3, #32
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e007      	b.n	8002eba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb4:	2b80      	cmp	r3, #128	; 0x80
 8002eb6:	d1ca      	bne.n	8002e4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ece:	e02d      	b.n	8002f2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f837 	bl	8002f44 <I2C_IsAcknowledgeFailed>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e02d      	b.n	8002f3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ee6:	d021      	beq.n	8002f2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee8:	f7fe fff2 	bl	8001ed0 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d302      	bcc.n	8002efe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d116      	bne.n	8002f2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e007      	b.n	8002f3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d1ca      	bne.n	8002ed0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5a:	d11b      	bne.n	8002f94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f043 0204 	orr.w	r2, r3, #4
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e272      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8087 	beq.w	80030ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fc0:	4b92      	ldr	r3, [pc, #584]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 030c 	and.w	r3, r3, #12
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d00c      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fcc:	4b8f      	ldr	r3, [pc, #572]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d112      	bne.n	8002ffe <HAL_RCC_OscConfig+0x5e>
 8002fd8:	4b8c      	ldr	r3, [pc, #560]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe4:	d10b      	bne.n	8002ffe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe6:	4b89      	ldr	r3, [pc, #548]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d06c      	beq.n	80030cc <HAL_RCC_OscConfig+0x12c>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d168      	bne.n	80030cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e24c      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x76>
 8003008:	4b80      	ldr	r3, [pc, #512]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a7f      	ldr	r2, [pc, #508]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 800300e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	e02e      	b.n	8003074 <HAL_RCC_OscConfig+0xd4>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x98>
 800301e:	4b7b      	ldr	r3, [pc, #492]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a7a      	ldr	r2, [pc, #488]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	4b78      	ldr	r3, [pc, #480]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a77      	ldr	r2, [pc, #476]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003030:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	e01d      	b.n	8003074 <HAL_RCC_OscConfig+0xd4>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003040:	d10c      	bne.n	800305c <HAL_RCC_OscConfig+0xbc>
 8003042:	4b72      	ldr	r3, [pc, #456]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a71      	ldr	r2, [pc, #452]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	4b6f      	ldr	r3, [pc, #444]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a6e      	ldr	r2, [pc, #440]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e00b      	b.n	8003074 <HAL_RCC_OscConfig+0xd4>
 800305c:	4b6b      	ldr	r3, [pc, #428]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6a      	ldr	r2, [pc, #424]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	4b68      	ldr	r3, [pc, #416]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a67      	ldr	r2, [pc, #412]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 800306e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003072:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d013      	beq.n	80030a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fe ff28 	bl	8001ed0 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003084:	f7fe ff24 	bl	8001ed0 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	; 0x64
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e200      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003096:	4b5d      	ldr	r3, [pc, #372]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0xe4>
 80030a2:	e014      	b.n	80030ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7fe ff14 	bl	8001ed0 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ac:	f7fe ff10 	bl	8001ed0 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	; 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e1ec      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030be:	4b53      	ldr	r3, [pc, #332]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x10c>
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d063      	beq.n	80031a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030da:	4b4c      	ldr	r3, [pc, #304]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030e6:	4b49      	ldr	r3, [pc, #292]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d11c      	bne.n	800312c <HAL_RCC_OscConfig+0x18c>
 80030f2:	4b46      	ldr	r3, [pc, #280]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d116      	bne.n	800312c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fe:	4b43      	ldr	r3, [pc, #268]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <HAL_RCC_OscConfig+0x176>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d001      	beq.n	8003116 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e1c0      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003116:	4b3d      	ldr	r3, [pc, #244]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4939      	ldr	r1, [pc, #228]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312a:	e03a      	b.n	80031a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d020      	beq.n	8003176 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003134:	4b36      	ldr	r3, [pc, #216]	; (8003210 <HAL_RCC_OscConfig+0x270>)
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fe fec9 	bl	8001ed0 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003142:	f7fe fec5 	bl	8001ed0 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e1a1      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003154:	4b2d      	ldr	r3, [pc, #180]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003160:	4b2a      	ldr	r3, [pc, #168]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4927      	ldr	r1, [pc, #156]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003170:	4313      	orrs	r3, r2
 8003172:	600b      	str	r3, [r1, #0]
 8003174:	e015      	b.n	80031a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003176:	4b26      	ldr	r3, [pc, #152]	; (8003210 <HAL_RCC_OscConfig+0x270>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fe fea8 	bl	8001ed0 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003184:	f7fe fea4 	bl	8001ed0 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e180      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003196:	4b1d      	ldr	r3, [pc, #116]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d03a      	beq.n	8003224 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d019      	beq.n	80031ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b6:	4b17      	ldr	r3, [pc, #92]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031bc:	f7fe fe88 	bl	8001ed0 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c4:	f7fe fe84 	bl	8001ed0 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e160      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d6:	4b0d      	ldr	r3, [pc, #52]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031e2:	2001      	movs	r0, #1
 80031e4:	f000 fac4 	bl	8003770 <RCC_Delay>
 80031e8:	e01c      	b.n	8003224 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f0:	f7fe fe6e 	bl	8001ed0 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f6:	e00f      	b.n	8003218 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f8:	f7fe fe6a 	bl	8001ed0 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d908      	bls.n	8003218 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e146      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	42420000 	.word	0x42420000
 8003214:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003218:	4b92      	ldr	r3, [pc, #584]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e9      	bne.n	80031f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80a6 	beq.w	800337e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003232:	2300      	movs	r3, #0
 8003234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003236:	4b8b      	ldr	r3, [pc, #556]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10d      	bne.n	800325e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	4b88      	ldr	r3, [pc, #544]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4a87      	ldr	r2, [pc, #540]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324c:	61d3      	str	r3, [r2, #28]
 800324e:	4b85      	ldr	r3, [pc, #532]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	4b82      	ldr	r3, [pc, #520]	; (8003468 <HAL_RCC_OscConfig+0x4c8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d118      	bne.n	800329c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326a:	4b7f      	ldr	r3, [pc, #508]	; (8003468 <HAL_RCC_OscConfig+0x4c8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a7e      	ldr	r2, [pc, #504]	; (8003468 <HAL_RCC_OscConfig+0x4c8>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003276:	f7fe fe2b 	bl	8001ed0 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327e:	f7fe fe27 	bl	8001ed0 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b64      	cmp	r3, #100	; 0x64
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e103      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003290:	4b75      	ldr	r3, [pc, #468]	; (8003468 <HAL_RCC_OscConfig+0x4c8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_OscConfig+0x312>
 80032a4:	4b6f      	ldr	r3, [pc, #444]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4a6e      	ldr	r2, [pc, #440]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6213      	str	r3, [r2, #32]
 80032b0:	e02d      	b.n	800330e <HAL_RCC_OscConfig+0x36e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x334>
 80032ba:	4b6a      	ldr	r3, [pc, #424]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	4a69      	ldr	r2, [pc, #420]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	6213      	str	r3, [r2, #32]
 80032c6:	4b67      	ldr	r3, [pc, #412]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	4a66      	ldr	r2, [pc, #408]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032cc:	f023 0304 	bic.w	r3, r3, #4
 80032d0:	6213      	str	r3, [r2, #32]
 80032d2:	e01c      	b.n	800330e <HAL_RCC_OscConfig+0x36e>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2b05      	cmp	r3, #5
 80032da:	d10c      	bne.n	80032f6 <HAL_RCC_OscConfig+0x356>
 80032dc:	4b61      	ldr	r3, [pc, #388]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	4a60      	ldr	r2, [pc, #384]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032e2:	f043 0304 	orr.w	r3, r3, #4
 80032e6:	6213      	str	r3, [r2, #32]
 80032e8:	4b5e      	ldr	r3, [pc, #376]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	4a5d      	ldr	r2, [pc, #372]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6213      	str	r3, [r2, #32]
 80032f4:	e00b      	b.n	800330e <HAL_RCC_OscConfig+0x36e>
 80032f6:	4b5b      	ldr	r3, [pc, #364]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	4a5a      	ldr	r2, [pc, #360]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	6213      	str	r3, [r2, #32]
 8003302:	4b58      	ldr	r3, [pc, #352]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	4a57      	ldr	r2, [pc, #348]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003308:	f023 0304 	bic.w	r3, r3, #4
 800330c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d015      	beq.n	8003342 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003316:	f7fe fddb 	bl	8001ed0 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331c:	e00a      	b.n	8003334 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7fe fdd7 	bl	8001ed0 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e0b1      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003334:	4b4b      	ldr	r3, [pc, #300]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ee      	beq.n	800331e <HAL_RCC_OscConfig+0x37e>
 8003340:	e014      	b.n	800336c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003342:	f7fe fdc5 	bl	8001ed0 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7fe fdc1 	bl	8001ed0 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	; 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e09b      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003360:	4b40      	ldr	r3, [pc, #256]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1ee      	bne.n	800334a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d105      	bne.n	800337e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003372:	4b3c      	ldr	r3, [pc, #240]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	4a3b      	ldr	r2, [pc, #236]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 8087 	beq.w	8003496 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003388:	4b36      	ldr	r3, [pc, #216]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	2b08      	cmp	r3, #8
 8003392:	d061      	beq.n	8003458 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d146      	bne.n	800342a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339c:	4b33      	ldr	r3, [pc, #204]	; (800346c <HAL_RCC_OscConfig+0x4cc>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7fe fd95 	bl	8001ed0 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033aa:	f7fe fd91 	bl	8001ed0 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e06d      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033bc:	4b29      	ldr	r3, [pc, #164]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f0      	bne.n	80033aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d0:	d108      	bne.n	80033e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	4921      	ldr	r1, [pc, #132]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e4:	4b1f      	ldr	r3, [pc, #124]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a19      	ldr	r1, [r3, #32]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	430b      	orrs	r3, r1
 80033f6:	491b      	ldr	r1, [pc, #108]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033fc:	4b1b      	ldr	r3, [pc, #108]	; (800346c <HAL_RCC_OscConfig+0x4cc>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7fe fd65 	bl	8001ed0 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7fe fd61 	bl	8001ed0 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e03d      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800341c:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x46a>
 8003428:	e035      	b.n	8003496 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <HAL_RCC_OscConfig+0x4cc>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe fd4e 	bl	8001ed0 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003438:	f7fe fd4a 	bl	8001ed0 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e026      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_RCC_OscConfig+0x4c4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x498>
 8003456:	e01e      	b.n	8003496 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d107      	bne.n	8003470 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e019      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
 8003464:	40021000 	.word	0x40021000
 8003468:	40007000 	.word	0x40007000
 800346c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <HAL_RCC_OscConfig+0x500>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	429a      	cmp	r2, r3
 8003482:	d106      	bne.n	8003492 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d001      	beq.n	8003496 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021000 	.word	0x40021000

080034a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0d0      	b.n	800365a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b8:	4b6a      	ldr	r3, [pc, #424]	; (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d910      	bls.n	80034e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	4b67      	ldr	r3, [pc, #412]	; (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 0207 	bic.w	r2, r3, #7
 80034ce:	4965      	ldr	r1, [pc, #404]	; (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	4b63      	ldr	r3, [pc, #396]	; (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0b8      	b.n	800365a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d020      	beq.n	8003536 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003500:	4b59      	ldr	r3, [pc, #356]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4a58      	ldr	r2, [pc, #352]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800350a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003518:	4b53      	ldr	r3, [pc, #332]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	4a52      	ldr	r2, [pc, #328]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 800351e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003522:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003524:	4b50      	ldr	r3, [pc, #320]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	494d      	ldr	r1, [pc, #308]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d040      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d107      	bne.n	800355a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	4b47      	ldr	r3, [pc, #284]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d115      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e07f      	b.n	800365a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003562:	4b41      	ldr	r3, [pc, #260]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e073      	b.n	800365a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003572:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e06b      	b.n	800365a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003582:	4b39      	ldr	r3, [pc, #228]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f023 0203 	bic.w	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4936      	ldr	r1, [pc, #216]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	4313      	orrs	r3, r2
 8003592:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003594:	f7fe fc9c 	bl	8001ed0 <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359a:	e00a      	b.n	80035b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359c:	f7fe fc98 	bl	8001ed0 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e053      	b.n	800365a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	4b2d      	ldr	r3, [pc, #180]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 020c 	and.w	r2, r3, #12
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d1eb      	bne.n	800359c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035c4:	4b27      	ldr	r3, [pc, #156]	; (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d210      	bcs.n	80035f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b24      	ldr	r3, [pc, #144]	; (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 0207 	bic.w	r2, r3, #7
 80035da:	4922      	ldr	r1, [pc, #136]	; (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b20      	ldr	r3, [pc, #128]	; (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e032      	b.n	800365a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4916      	ldr	r1, [pc, #88]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800361e:	4b12      	ldr	r3, [pc, #72]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	490e      	ldr	r1, [pc, #56]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003632:	f000 f821 	bl	8003678 <HAL_RCC_GetSysClockFreq>
 8003636:	4602      	mov	r2, r0
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	490a      	ldr	r1, [pc, #40]	; (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003644:	5ccb      	ldrb	r3, [r1, r3]
 8003646:	fa22 f303 	lsr.w	r3, r2, r3
 800364a:	4a09      	ldr	r2, [pc, #36]	; (8003670 <HAL_RCC_ClockConfig+0x1cc>)
 800364c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCC_ClockConfig+0x1d0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe fbfa 	bl	8001e4c <HAL_InitTick>

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40022000 	.word	0x40022000
 8003668:	40021000 	.word	0x40021000
 800366c:	080096e0 	.word	0x080096e0
 8003670:	20000008 	.word	0x20000008
 8003674:	2000000c 	.word	0x2000000c

08003678 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003678:	b490      	push	{r4, r7}
 800367a:	b08a      	sub	sp, #40	; 0x28
 800367c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800367e:	4b29      	ldr	r3, [pc, #164]	; (8003724 <HAL_RCC_GetSysClockFreq+0xac>)
 8003680:	1d3c      	adds	r4, r7, #4
 8003682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003688:	f240 2301 	movw	r3, #513	; 0x201
 800368c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	2300      	movs	r3, #0
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	2300      	movs	r3, #0
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036a2:	4b21      	ldr	r3, [pc, #132]	; (8003728 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d002      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x40>
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d003      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x46>
 80036b6:	e02b      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036b8:	4b1c      	ldr	r3, [pc, #112]	; (800372c <HAL_RCC_GetSysClockFreq+0xb4>)
 80036ba:	623b      	str	r3, [r7, #32]
      break;
 80036bc:	e02b      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	0c9b      	lsrs	r3, r3, #18
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	3328      	adds	r3, #40	; 0x28
 80036c8:	443b      	add	r3, r7
 80036ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d012      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036da:	4b13      	ldr	r3, [pc, #76]	; (8003728 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	0c5b      	lsrs	r3, r3, #17
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	3328      	adds	r3, #40	; 0x28
 80036e6:	443b      	add	r3, r7
 80036e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	4a0e      	ldr	r2, [pc, #56]	; (800372c <HAL_RCC_GetSysClockFreq+0xb4>)
 80036f2:	fb03 f202 	mul.w	r2, r3, r2
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
 80036fe:	e004      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	4a0b      	ldr	r2, [pc, #44]	; (8003730 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003704:	fb02 f303 	mul.w	r3, r2, r3
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	623b      	str	r3, [r7, #32]
      break;
 800370e:	e002      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003712:	623b      	str	r3, [r7, #32]
      break;
 8003714:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003716:	6a3b      	ldr	r3, [r7, #32]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3728      	adds	r7, #40	; 0x28
 800371c:	46bd      	mov	sp, r7
 800371e:	bc90      	pop	{r4, r7}
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	08008f64 	.word	0x08008f64
 8003728:	40021000 	.word	0x40021000
 800372c:	007a1200 	.word	0x007a1200
 8003730:	003d0900 	.word	0x003d0900

08003734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003738:	4b02      	ldr	r3, [pc, #8]	; (8003744 <HAL_RCC_GetHCLKFreq+0x10>)
 800373a:	681b      	ldr	r3, [r3, #0]
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr
 8003744:	20000008 	.word	0x20000008

08003748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800374c:	f7ff fff2 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 8003750:	4602      	mov	r2, r0
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	4903      	ldr	r1, [pc, #12]	; (800376c <HAL_RCC_GetPCLK1Freq+0x24>)
 800375e:	5ccb      	ldrb	r3, [r1, r3]
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003764:	4618      	mov	r0, r3
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40021000 	.word	0x40021000
 800376c:	080096f0 	.word	0x080096f0

08003770 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <RCC_Delay+0x34>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <RCC_Delay+0x38>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	0a5b      	lsrs	r3, r3, #9
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	fb02 f303 	mul.w	r3, r2, r3
 800378a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800378c:	bf00      	nop
  }
  while (Delay --);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1e5a      	subs	r2, r3, #1
 8003792:	60fa      	str	r2, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f9      	bne.n	800378c <RCC_Delay+0x1c>
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	20000008 	.word	0x20000008
 80037a8:	10624dd3 	.word	0x10624dd3

080037ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e041      	b.n	8003842 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fe f990 	bl	8001af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	4619      	mov	r1, r3
 80037ea:	4610      	mov	r0, r2
 80037ec:	f000 fc9e 	bl	800412c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	d001      	beq.n	8003864 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e032      	b.n	80038ca <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <HAL_TIM_Base_Start+0x88>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00e      	beq.n	8003894 <HAL_TIM_Base_Start+0x48>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387e:	d009      	beq.n	8003894 <HAL_TIM_Base_Start+0x48>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a14      	ldr	r2, [pc, #80]	; (80038d8 <HAL_TIM_Base_Start+0x8c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d004      	beq.n	8003894 <HAL_TIM_Base_Start+0x48>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a13      	ldr	r2, [pc, #76]	; (80038dc <HAL_TIM_Base_Start+0x90>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d111      	bne.n	80038b8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b06      	cmp	r3, #6
 80038a4:	d010      	beq.n	80038c8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b6:	e007      	b.n	80038c8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr
 80038d4:	40012c00 	.word	0x40012c00
 80038d8:	40000400 	.word	0x40000400
 80038dc:	40000800 	.word	0x40000800

080038e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e041      	b.n	8003976 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f839 	bl	800397e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3304      	adds	r3, #4
 800391c:	4619      	mov	r1, r3
 800391e:	4610      	mov	r0, r2
 8003920:	f000 fc04 	bl	800412c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <HAL_TIM_IC_Start_IT+0x1a>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	e013      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0x42>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_IC_Start_IT+0x2a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	e00b      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0x42>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d104      	bne.n	80039ca <HAL_TIM_IC_Start_IT+0x3a>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	e003      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0x42>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d104      	bne.n	80039e4 <HAL_TIM_IC_Start_IT+0x54>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	e013      	b.n	8003a0c <HAL_TIM_IC_Start_IT+0x7c>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d104      	bne.n	80039f4 <HAL_TIM_IC_Start_IT+0x64>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	e00b      	b.n	8003a0c <HAL_TIM_IC_Start_IT+0x7c>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d104      	bne.n	8003a04 <HAL_TIM_IC_Start_IT+0x74>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	e003      	b.n	8003a0c <HAL_TIM_IC_Start_IT+0x7c>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d102      	bne.n	8003a1a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a14:	7bbb      	ldrb	r3, [r7, #14]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d001      	beq.n	8003a1e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e0b3      	b.n	8003b86 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <HAL_TIM_IC_Start_IT+0x9e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a2c:	e013      	b.n	8003a56 <HAL_TIM_IC_Start_IT+0xc6>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d104      	bne.n	8003a3e <HAL_TIM_IC_Start_IT+0xae>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a3c:	e00b      	b.n	8003a56 <HAL_TIM_IC_Start_IT+0xc6>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d104      	bne.n	8003a4e <HAL_TIM_IC_Start_IT+0xbe>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a4c:	e003      	b.n	8003a56 <HAL_TIM_IC_Start_IT+0xc6>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d104      	bne.n	8003a66 <HAL_TIM_IC_Start_IT+0xd6>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a64:	e013      	b.n	8003a8e <HAL_TIM_IC_Start_IT+0xfe>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d104      	bne.n	8003a76 <HAL_TIM_IC_Start_IT+0xe6>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a74:	e00b      	b.n	8003a8e <HAL_TIM_IC_Start_IT+0xfe>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d104      	bne.n	8003a86 <HAL_TIM_IC_Start_IT+0xf6>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a84:	e003      	b.n	8003a8e <HAL_TIM_IC_Start_IT+0xfe>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b0c      	cmp	r3, #12
 8003a92:	d841      	bhi.n	8003b18 <HAL_TIM_IC_Start_IT+0x188>
 8003a94:	a201      	add	r2, pc, #4	; (adr r2, 8003a9c <HAL_TIM_IC_Start_IT+0x10c>)
 8003a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9a:	bf00      	nop
 8003a9c:	08003ad1 	.word	0x08003ad1
 8003aa0:	08003b19 	.word	0x08003b19
 8003aa4:	08003b19 	.word	0x08003b19
 8003aa8:	08003b19 	.word	0x08003b19
 8003aac:	08003ae3 	.word	0x08003ae3
 8003ab0:	08003b19 	.word	0x08003b19
 8003ab4:	08003b19 	.word	0x08003b19
 8003ab8:	08003b19 	.word	0x08003b19
 8003abc:	08003af5 	.word	0x08003af5
 8003ac0:	08003b19 	.word	0x08003b19
 8003ac4:	08003b19 	.word	0x08003b19
 8003ac8:	08003b19 	.word	0x08003b19
 8003acc:	08003b07 	.word	0x08003b07
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0202 	orr.w	r2, r2, #2
 8003ade:	60da      	str	r2, [r3, #12]
      break;
 8003ae0:	e01b      	b.n	8003b1a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0204 	orr.w	r2, r2, #4
 8003af0:	60da      	str	r2, [r3, #12]
      break;
 8003af2:	e012      	b.n	8003b1a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0208 	orr.w	r2, r2, #8
 8003b02:	60da      	str	r2, [r3, #12]
      break;
 8003b04:	e009      	b.n	8003b1a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0210 	orr.w	r2, r2, #16
 8003b14:	60da      	str	r2, [r3, #12]
      break;
 8003b16:	e000      	b.n	8003b1a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003b18:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	6839      	ldr	r1, [r7, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fd07 	bl	8004536 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <HAL_TIM_IC_Start_IT+0x200>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <HAL_TIM_IC_Start_IT+0x1c0>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3a:	d009      	beq.n	8003b50 <HAL_TIM_IC_Start_IT+0x1c0>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <HAL_TIM_IC_Start_IT+0x204>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_TIM_IC_Start_IT+0x1c0>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <HAL_TIM_IC_Start_IT+0x208>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d111      	bne.n	8003b74 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d010      	beq.n	8003b84 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b72:	e007      	b.n	8003b84 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800

08003b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d122      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d11b      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0202 	mvn.w	r2, #2
 8003bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd f94e 	bl	8000e80 <HAL_TIM_IC_CaptureCallback>
 8003be4:	e005      	b.n	8003bf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fa85 	bl	80040f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fa8b 	bl	8004108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d122      	bne.n	8003c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d11b      	bne.n	8003c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0204 	mvn.w	r2, #4
 8003c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fd f924 	bl	8000e80 <HAL_TIM_IC_CaptureCallback>
 8003c38:	e005      	b.n	8003c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fa5b 	bl	80040f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 fa61 	bl	8004108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d122      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d11b      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0208 	mvn.w	r2, #8
 8003c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2204      	movs	r2, #4
 8003c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fd f8fa 	bl	8000e80 <HAL_TIM_IC_CaptureCallback>
 8003c8c:	e005      	b.n	8003c9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fa31 	bl	80040f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fa37 	bl	8004108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b10      	cmp	r3, #16
 8003cac:	d122      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d11b      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0210 	mvn.w	r2, #16
 8003cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2208      	movs	r2, #8
 8003cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fd f8d0 	bl	8000e80 <HAL_TIM_IC_CaptureCallback>
 8003ce0:	e005      	b.n	8003cee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fa07 	bl	80040f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fa0d 	bl	8004108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d10e      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d107      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f06f 0201 	mvn.w	r2, #1
 8003d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f9e2 	bl	80040e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2a:	2b80      	cmp	r3, #128	; 0x80
 8003d2c:	d10e      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d38:	2b80      	cmp	r3, #128	; 0x80
 8003d3a:	d107      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fc81 	bl	800464e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d56:	2b40      	cmp	r3, #64	; 0x40
 8003d58:	d10e      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d64:	2b40      	cmp	r3, #64	; 0x40
 8003d66:	d107      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f9d1 	bl	800411a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d10e      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d107      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0220 	mvn.w	r2, #32
 8003d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fc4c 	bl	800463c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e082      	b.n	8003ecc <HAL_TIM_IC_ConfigChannel+0x120>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d11b      	bne.n	8003e0c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	6819      	ldr	r1, [r3, #0]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f000 fa04 	bl	80041f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 020c 	bic.w	r2, r2, #12
 8003df6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6999      	ldr	r1, [r3, #24]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	619a      	str	r2, [r3, #24]
 8003e0a:	e05a      	b.n	8003ec2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d11c      	bne.n	8003e4c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	6819      	ldr	r1, [r3, #0]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f000 fa6d 	bl	8004300 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699a      	ldr	r2, [r3, #24]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e34:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6999      	ldr	r1, [r3, #24]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	021a      	lsls	r2, r3, #8
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	619a      	str	r2, [r3, #24]
 8003e4a:	e03a      	b.n	8003ec2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d11b      	bne.n	8003e8a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	6819      	ldr	r1, [r3, #0]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f000 fab8 	bl	80043d6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69da      	ldr	r2, [r3, #28]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 020c 	bic.w	r2, r2, #12
 8003e74:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69d9      	ldr	r1, [r3, #28]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	61da      	str	r2, [r3, #28]
 8003e88:	e01b      	b.n	8003ec2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	6819      	ldr	r1, [r3, #0]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f000 fad7 	bl	800444c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003eac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69d9      	ldr	r1, [r3, #28]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	021a      	lsls	r2, r3, #8
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_TIM_ConfigClockSource+0x18>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e0b3      	b.n	8004054 <HAL_TIM_ConfigClockSource+0x180>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f24:	d03e      	beq.n	8003fa4 <HAL_TIM_ConfigClockSource+0xd0>
 8003f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2a:	f200 8087 	bhi.w	800403c <HAL_TIM_ConfigClockSource+0x168>
 8003f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f32:	f000 8085 	beq.w	8004040 <HAL_TIM_ConfigClockSource+0x16c>
 8003f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3a:	d87f      	bhi.n	800403c <HAL_TIM_ConfigClockSource+0x168>
 8003f3c:	2b70      	cmp	r3, #112	; 0x70
 8003f3e:	d01a      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0xa2>
 8003f40:	2b70      	cmp	r3, #112	; 0x70
 8003f42:	d87b      	bhi.n	800403c <HAL_TIM_ConfigClockSource+0x168>
 8003f44:	2b60      	cmp	r3, #96	; 0x60
 8003f46:	d050      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x116>
 8003f48:	2b60      	cmp	r3, #96	; 0x60
 8003f4a:	d877      	bhi.n	800403c <HAL_TIM_ConfigClockSource+0x168>
 8003f4c:	2b50      	cmp	r3, #80	; 0x50
 8003f4e:	d03c      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0xf6>
 8003f50:	2b50      	cmp	r3, #80	; 0x50
 8003f52:	d873      	bhi.n	800403c <HAL_TIM_ConfigClockSource+0x168>
 8003f54:	2b40      	cmp	r3, #64	; 0x40
 8003f56:	d058      	beq.n	800400a <HAL_TIM_ConfigClockSource+0x136>
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	d86f      	bhi.n	800403c <HAL_TIM_ConfigClockSource+0x168>
 8003f5c:	2b30      	cmp	r3, #48	; 0x30
 8003f5e:	d064      	beq.n	800402a <HAL_TIM_ConfigClockSource+0x156>
 8003f60:	2b30      	cmp	r3, #48	; 0x30
 8003f62:	d86b      	bhi.n	800403c <HAL_TIM_ConfigClockSource+0x168>
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d060      	beq.n	800402a <HAL_TIM_ConfigClockSource+0x156>
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d867      	bhi.n	800403c <HAL_TIM_ConfigClockSource+0x168>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d05c      	beq.n	800402a <HAL_TIM_ConfigClockSource+0x156>
 8003f70:	2b10      	cmp	r3, #16
 8003f72:	d05a      	beq.n	800402a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f74:	e062      	b.n	800403c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	6899      	ldr	r1, [r3, #8]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f000 fab7 	bl	80044f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f98:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	609a      	str	r2, [r3, #8]
      break;
 8003fa2:	e04e      	b.n	8004042 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6818      	ldr	r0, [r3, #0]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	6899      	ldr	r1, [r3, #8]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f000 faa0 	bl	80044f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fc6:	609a      	str	r2, [r3, #8]
      break;
 8003fc8:	e03b      	b.n	8004042 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6859      	ldr	r1, [r3, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f000 f964 	bl	80042a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2150      	movs	r1, #80	; 0x50
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fa6e 	bl	80044c4 <TIM_ITRx_SetConfig>
      break;
 8003fe8:	e02b      	b.n	8004042 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6859      	ldr	r1, [r3, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f000 f9be 	bl	8004378 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2160      	movs	r1, #96	; 0x60
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fa5e 	bl	80044c4 <TIM_ITRx_SetConfig>
      break;
 8004008:	e01b      	b.n	8004042 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6859      	ldr	r1, [r3, #4]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	461a      	mov	r2, r3
 8004018:	f000 f944 	bl	80042a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2140      	movs	r1, #64	; 0x40
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fa4e 	bl	80044c4 <TIM_ITRx_SetConfig>
      break;
 8004028:	e00b      	b.n	8004042 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4619      	mov	r1, r3
 8004034:	4610      	mov	r0, r2
 8004036:	f000 fa45 	bl	80044c4 <TIM_ITRx_SetConfig>
        break;
 800403a:	e002      	b.n	8004042 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800403c:	bf00      	nop
 800403e:	e000      	b.n	8004042 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004040:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b0c      	cmp	r3, #12
 800406e:	d831      	bhi.n	80040d4 <HAL_TIM_ReadCapturedValue+0x78>
 8004070:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	080040ad 	.word	0x080040ad
 800407c:	080040d5 	.word	0x080040d5
 8004080:	080040d5 	.word	0x080040d5
 8004084:	080040d5 	.word	0x080040d5
 8004088:	080040b7 	.word	0x080040b7
 800408c:	080040d5 	.word	0x080040d5
 8004090:	080040d5 	.word	0x080040d5
 8004094:	080040d5 	.word	0x080040d5
 8004098:	080040c1 	.word	0x080040c1
 800409c:	080040d5 	.word	0x080040d5
 80040a0:	080040d5 	.word	0x080040d5
 80040a4:	080040d5 	.word	0x080040d5
 80040a8:	080040cb 	.word	0x080040cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b2:	60fb      	str	r3, [r7, #12]

      break;
 80040b4:	e00f      	b.n	80040d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	60fb      	str	r3, [r7, #12]

      break;
 80040be:	e00a      	b.n	80040d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c6:	60fb      	str	r3, [r7, #12]

      break;
 80040c8:	e005      	b.n	80040d6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	60fb      	str	r3, [r7, #12]

      break;
 80040d2:	e000      	b.n	80040d6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80040d4:	bf00      	nop
  }

  return tmpreg;
 80040d6:	68fb      	ldr	r3, [r7, #12]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop

080040e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr

0800411a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr

0800412c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a29      	ldr	r2, [pc, #164]	; (80041e4 <TIM_Base_SetConfig+0xb8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00b      	beq.n	800415c <TIM_Base_SetConfig+0x30>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414a:	d007      	beq.n	800415c <TIM_Base_SetConfig+0x30>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a26      	ldr	r2, [pc, #152]	; (80041e8 <TIM_Base_SetConfig+0xbc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_Base_SetConfig+0x30>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a25      	ldr	r2, [pc, #148]	; (80041ec <TIM_Base_SetConfig+0xc0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d108      	bne.n	800416e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a1c      	ldr	r2, [pc, #112]	; (80041e4 <TIM_Base_SetConfig+0xb8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00b      	beq.n	800418e <TIM_Base_SetConfig+0x62>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417c:	d007      	beq.n	800418e <TIM_Base_SetConfig+0x62>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <TIM_Base_SetConfig+0xbc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d003      	beq.n	800418e <TIM_Base_SetConfig+0x62>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a18      	ldr	r2, [pc, #96]	; (80041ec <TIM_Base_SetConfig+0xc0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d108      	bne.n	80041a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a07      	ldr	r2, [pc, #28]	; (80041e4 <TIM_Base_SetConfig+0xb8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d103      	bne.n	80041d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	615a      	str	r2, [r3, #20]
}
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40000400 	.word	0x40000400
 80041ec:	40000800 	.word	0x40000800

080041f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f023 0201 	bic.w	r2, r3, #1
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4a1f      	ldr	r2, [pc, #124]	; (8004298 <TIM_TI1_SetConfig+0xa8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00b      	beq.n	8004236 <TIM_TI1_SetConfig+0x46>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004224:	d007      	beq.n	8004236 <TIM_TI1_SetConfig+0x46>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4a1c      	ldr	r2, [pc, #112]	; (800429c <TIM_TI1_SetConfig+0xac>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d003      	beq.n	8004236 <TIM_TI1_SetConfig+0x46>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4a1b      	ldr	r2, [pc, #108]	; (80042a0 <TIM_TI1_SetConfig+0xb0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d101      	bne.n	800423a <TIM_TI1_SetConfig+0x4a>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <TIM_TI1_SetConfig+0x4c>
 800423a:	2300      	movs	r3, #0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f023 0303 	bic.w	r3, r3, #3
 8004246:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	e003      	b.n	800425a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004260:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	b2db      	uxtb	r3, r3
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f023 030a 	bic.w	r3, r3, #10
 8004274:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f003 030a 	and.w	r3, r3, #10
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	621a      	str	r2, [r3, #32]
}
 800428e:	bf00      	nop
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40000400 	.word	0x40000400
 80042a0:	40000800 	.word	0x40000800

080042a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f023 0201 	bic.w	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f023 030a 	bic.w	r3, r3, #10
 80042e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	f023 0210 	bic.w	r2, r3, #16
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800433e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	031b      	lsls	r3, r3, #12
 8004344:	b29b      	uxth	r3, r3
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004352:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	621a      	str	r2, [r3, #32]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	f023 0210 	bic.w	r2, r3, #16
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	031b      	lsls	r3, r3, #12
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	621a      	str	r2, [r3, #32]
}
 80043cc:	bf00      	nop
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr

080043d6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b087      	sub	sp, #28
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f023 0303 	bic.w	r3, r3, #3
 8004402:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004412:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	b2db      	uxtb	r3, r3
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004426:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	621a      	str	r2, [r3, #32]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004478:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800448a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	031b      	lsls	r3, r3, #12
 8004490:	b29b      	uxth	r3, r3
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800449e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	031b      	lsls	r3, r3, #12
 80044a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	621a      	str	r2, [r3, #32]
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr

080044c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f043 0307 	orr.w	r3, r3, #7
 80044e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	609a      	str	r2, [r3, #8]
}
 80044ee:	bf00      	nop
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004512:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	021a      	lsls	r2, r3, #8
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	431a      	orrs	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4313      	orrs	r3, r2
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	609a      	str	r2, [r3, #8]
}
 800452c:	bf00      	nop
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	bc80      	pop	{r7}
 8004534:	4770      	bx	lr

08004536 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004536:	b480      	push	{r7}
 8004538:	b087      	sub	sp, #28
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	2201      	movs	r2, #1
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a1a      	ldr	r2, [r3, #32]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	43db      	mvns	r3, r3
 8004558:	401a      	ands	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a1a      	ldr	r2, [r3, #32]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	fa01 f303 	lsl.w	r3, r1, r3
 800456e:	431a      	orrs	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	621a      	str	r2, [r3, #32]
}
 8004574:	bf00      	nop
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr
	...

08004580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004594:	2302      	movs	r3, #2
 8004596:	e046      	b.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a16      	ldr	r2, [pc, #88]	; (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00e      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e4:	d009      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a12      	ldr	r2, [pc, #72]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d004      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a10      	ldr	r2, [pc, #64]	; (8004638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d10c      	bne.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	4313      	orrs	r3, r2
 800460a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr
 8004630:	40012c00 	.word	0x40012c00
 8004634:	40000400 	.word	0x40000400
 8004638:	40000800 	.word	0x40000800

0800463c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr

0800464e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr

08004660 <__errno>:
 8004660:	4b01      	ldr	r3, [pc, #4]	; (8004668 <__errno+0x8>)
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20000014 	.word	0x20000014

0800466c <__libc_init_array>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	2600      	movs	r6, #0
 8004670:	4d0c      	ldr	r5, [pc, #48]	; (80046a4 <__libc_init_array+0x38>)
 8004672:	4c0d      	ldr	r4, [pc, #52]	; (80046a8 <__libc_init_array+0x3c>)
 8004674:	1b64      	subs	r4, r4, r5
 8004676:	10a4      	asrs	r4, r4, #2
 8004678:	42a6      	cmp	r6, r4
 800467a:	d109      	bne.n	8004690 <__libc_init_array+0x24>
 800467c:	f004 fc52 	bl	8008f24 <_init>
 8004680:	2600      	movs	r6, #0
 8004682:	4d0a      	ldr	r5, [pc, #40]	; (80046ac <__libc_init_array+0x40>)
 8004684:	4c0a      	ldr	r4, [pc, #40]	; (80046b0 <__libc_init_array+0x44>)
 8004686:	1b64      	subs	r4, r4, r5
 8004688:	10a4      	asrs	r4, r4, #2
 800468a:	42a6      	cmp	r6, r4
 800468c:	d105      	bne.n	800469a <__libc_init_array+0x2e>
 800468e:	bd70      	pop	{r4, r5, r6, pc}
 8004690:	f855 3b04 	ldr.w	r3, [r5], #4
 8004694:	4798      	blx	r3
 8004696:	3601      	adds	r6, #1
 8004698:	e7ee      	b.n	8004678 <__libc_init_array+0xc>
 800469a:	f855 3b04 	ldr.w	r3, [r5], #4
 800469e:	4798      	blx	r3
 80046a0:	3601      	adds	r6, #1
 80046a2:	e7f2      	b.n	800468a <__libc_init_array+0x1e>
 80046a4:	08009b9c 	.word	0x08009b9c
 80046a8:	08009b9c 	.word	0x08009b9c
 80046ac:	08009b9c 	.word	0x08009b9c
 80046b0:	08009ba0 	.word	0x08009ba0

080046b4 <memset>:
 80046b4:	4603      	mov	r3, r0
 80046b6:	4402      	add	r2, r0
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d100      	bne.n	80046be <memset+0xa>
 80046bc:	4770      	bx	lr
 80046be:	f803 1b01 	strb.w	r1, [r3], #1
 80046c2:	e7f9      	b.n	80046b8 <memset+0x4>

080046c4 <__cvt>:
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046ca:	461f      	mov	r7, r3
 80046cc:	bfbb      	ittet	lt
 80046ce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80046d2:	461f      	movlt	r7, r3
 80046d4:	2300      	movge	r3, #0
 80046d6:	232d      	movlt	r3, #45	; 0x2d
 80046d8:	b088      	sub	sp, #32
 80046da:	4614      	mov	r4, r2
 80046dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80046de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80046e0:	7013      	strb	r3, [r2, #0]
 80046e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80046e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80046e8:	f023 0820 	bic.w	r8, r3, #32
 80046ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046f0:	d005      	beq.n	80046fe <__cvt+0x3a>
 80046f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80046f6:	d100      	bne.n	80046fa <__cvt+0x36>
 80046f8:	3501      	adds	r5, #1
 80046fa:	2302      	movs	r3, #2
 80046fc:	e000      	b.n	8004700 <__cvt+0x3c>
 80046fe:	2303      	movs	r3, #3
 8004700:	aa07      	add	r2, sp, #28
 8004702:	9204      	str	r2, [sp, #16]
 8004704:	aa06      	add	r2, sp, #24
 8004706:	e9cd a202 	strd	sl, r2, [sp, #8]
 800470a:	e9cd 3500 	strd	r3, r5, [sp]
 800470e:	4622      	mov	r2, r4
 8004710:	463b      	mov	r3, r7
 8004712:	f001 fd85 	bl	8006220 <_dtoa_r>
 8004716:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800471a:	4606      	mov	r6, r0
 800471c:	d102      	bne.n	8004724 <__cvt+0x60>
 800471e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004720:	07db      	lsls	r3, r3, #31
 8004722:	d522      	bpl.n	800476a <__cvt+0xa6>
 8004724:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004728:	eb06 0905 	add.w	r9, r6, r5
 800472c:	d110      	bne.n	8004750 <__cvt+0x8c>
 800472e:	7833      	ldrb	r3, [r6, #0]
 8004730:	2b30      	cmp	r3, #48	; 0x30
 8004732:	d10a      	bne.n	800474a <__cvt+0x86>
 8004734:	2200      	movs	r2, #0
 8004736:	2300      	movs	r3, #0
 8004738:	4620      	mov	r0, r4
 800473a:	4639      	mov	r1, r7
 800473c:	f7fc f934 	bl	80009a8 <__aeabi_dcmpeq>
 8004740:	b918      	cbnz	r0, 800474a <__cvt+0x86>
 8004742:	f1c5 0501 	rsb	r5, r5, #1
 8004746:	f8ca 5000 	str.w	r5, [sl]
 800474a:	f8da 3000 	ldr.w	r3, [sl]
 800474e:	4499      	add	r9, r3
 8004750:	2200      	movs	r2, #0
 8004752:	2300      	movs	r3, #0
 8004754:	4620      	mov	r0, r4
 8004756:	4639      	mov	r1, r7
 8004758:	f7fc f926 	bl	80009a8 <__aeabi_dcmpeq>
 800475c:	b108      	cbz	r0, 8004762 <__cvt+0x9e>
 800475e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004762:	2230      	movs	r2, #48	; 0x30
 8004764:	9b07      	ldr	r3, [sp, #28]
 8004766:	454b      	cmp	r3, r9
 8004768:	d307      	bcc.n	800477a <__cvt+0xb6>
 800476a:	4630      	mov	r0, r6
 800476c:	9b07      	ldr	r3, [sp, #28]
 800476e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004770:	1b9b      	subs	r3, r3, r6
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	b008      	add	sp, #32
 8004776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477a:	1c59      	adds	r1, r3, #1
 800477c:	9107      	str	r1, [sp, #28]
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	e7f0      	b.n	8004764 <__cvt+0xa0>

08004782 <__exponent>:
 8004782:	4603      	mov	r3, r0
 8004784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004786:	2900      	cmp	r1, #0
 8004788:	f803 2b02 	strb.w	r2, [r3], #2
 800478c:	bfb6      	itet	lt
 800478e:	222d      	movlt	r2, #45	; 0x2d
 8004790:	222b      	movge	r2, #43	; 0x2b
 8004792:	4249      	neglt	r1, r1
 8004794:	2909      	cmp	r1, #9
 8004796:	7042      	strb	r2, [r0, #1]
 8004798:	dd2b      	ble.n	80047f2 <__exponent+0x70>
 800479a:	f10d 0407 	add.w	r4, sp, #7
 800479e:	46a4      	mov	ip, r4
 80047a0:	270a      	movs	r7, #10
 80047a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80047a6:	460a      	mov	r2, r1
 80047a8:	46a6      	mov	lr, r4
 80047aa:	fb07 1516 	mls	r5, r7, r6, r1
 80047ae:	2a63      	cmp	r2, #99	; 0x63
 80047b0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80047b4:	4631      	mov	r1, r6
 80047b6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80047ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80047be:	dcf0      	bgt.n	80047a2 <__exponent+0x20>
 80047c0:	3130      	adds	r1, #48	; 0x30
 80047c2:	f1ae 0502 	sub.w	r5, lr, #2
 80047c6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80047ca:	4629      	mov	r1, r5
 80047cc:	1c44      	adds	r4, r0, #1
 80047ce:	4561      	cmp	r1, ip
 80047d0:	d30a      	bcc.n	80047e8 <__exponent+0x66>
 80047d2:	f10d 0209 	add.w	r2, sp, #9
 80047d6:	eba2 020e 	sub.w	r2, r2, lr
 80047da:	4565      	cmp	r5, ip
 80047dc:	bf88      	it	hi
 80047de:	2200      	movhi	r2, #0
 80047e0:	4413      	add	r3, r2
 80047e2:	1a18      	subs	r0, r3, r0
 80047e4:	b003      	add	sp, #12
 80047e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047ec:	f804 2f01 	strb.w	r2, [r4, #1]!
 80047f0:	e7ed      	b.n	80047ce <__exponent+0x4c>
 80047f2:	2330      	movs	r3, #48	; 0x30
 80047f4:	3130      	adds	r1, #48	; 0x30
 80047f6:	7083      	strb	r3, [r0, #2]
 80047f8:	70c1      	strb	r1, [r0, #3]
 80047fa:	1d03      	adds	r3, r0, #4
 80047fc:	e7f1      	b.n	80047e2 <__exponent+0x60>
	...

08004800 <_printf_float>:
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004804:	b091      	sub	sp, #68	; 0x44
 8004806:	460c      	mov	r4, r1
 8004808:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800480c:	4616      	mov	r6, r2
 800480e:	461f      	mov	r7, r3
 8004810:	4605      	mov	r5, r0
 8004812:	f002 fe59 	bl	80074c8 <_localeconv_r>
 8004816:	6803      	ldr	r3, [r0, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	9309      	str	r3, [sp, #36]	; 0x24
 800481c:	f7fb fc98 	bl	8000150 <strlen>
 8004820:	2300      	movs	r3, #0
 8004822:	930e      	str	r3, [sp, #56]	; 0x38
 8004824:	f8d8 3000 	ldr.w	r3, [r8]
 8004828:	900a      	str	r0, [sp, #40]	; 0x28
 800482a:	3307      	adds	r3, #7
 800482c:	f023 0307 	bic.w	r3, r3, #7
 8004830:	f103 0208 	add.w	r2, r3, #8
 8004834:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004838:	f8d4 b000 	ldr.w	fp, [r4]
 800483c:	f8c8 2000 	str.w	r2, [r8]
 8004840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004844:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004848:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800484c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004850:	930b      	str	r3, [sp, #44]	; 0x2c
 8004852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004856:	4640      	mov	r0, r8
 8004858:	4b9c      	ldr	r3, [pc, #624]	; (8004acc <_printf_float+0x2cc>)
 800485a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800485c:	f7fc f8d6 	bl	8000a0c <__aeabi_dcmpun>
 8004860:	bb70      	cbnz	r0, 80048c0 <_printf_float+0xc0>
 8004862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004866:	4640      	mov	r0, r8
 8004868:	4b98      	ldr	r3, [pc, #608]	; (8004acc <_printf_float+0x2cc>)
 800486a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800486c:	f7fc f8b0 	bl	80009d0 <__aeabi_dcmple>
 8004870:	bb30      	cbnz	r0, 80048c0 <_printf_float+0xc0>
 8004872:	2200      	movs	r2, #0
 8004874:	2300      	movs	r3, #0
 8004876:	4640      	mov	r0, r8
 8004878:	4651      	mov	r1, sl
 800487a:	f7fc f89f 	bl	80009bc <__aeabi_dcmplt>
 800487e:	b110      	cbz	r0, 8004886 <_printf_float+0x86>
 8004880:	232d      	movs	r3, #45	; 0x2d
 8004882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004886:	4b92      	ldr	r3, [pc, #584]	; (8004ad0 <_printf_float+0x2d0>)
 8004888:	4892      	ldr	r0, [pc, #584]	; (8004ad4 <_printf_float+0x2d4>)
 800488a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800488e:	bf94      	ite	ls
 8004890:	4698      	movls	r8, r3
 8004892:	4680      	movhi	r8, r0
 8004894:	2303      	movs	r3, #3
 8004896:	f04f 0a00 	mov.w	sl, #0
 800489a:	6123      	str	r3, [r4, #16]
 800489c:	f02b 0304 	bic.w	r3, fp, #4
 80048a0:	6023      	str	r3, [r4, #0]
 80048a2:	4633      	mov	r3, r6
 80048a4:	4621      	mov	r1, r4
 80048a6:	4628      	mov	r0, r5
 80048a8:	9700      	str	r7, [sp, #0]
 80048aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80048ac:	f000 f9d4 	bl	8004c58 <_printf_common>
 80048b0:	3001      	adds	r0, #1
 80048b2:	f040 8090 	bne.w	80049d6 <_printf_float+0x1d6>
 80048b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048ba:	b011      	add	sp, #68	; 0x44
 80048bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c0:	4642      	mov	r2, r8
 80048c2:	4653      	mov	r3, sl
 80048c4:	4640      	mov	r0, r8
 80048c6:	4651      	mov	r1, sl
 80048c8:	f7fc f8a0 	bl	8000a0c <__aeabi_dcmpun>
 80048cc:	b148      	cbz	r0, 80048e2 <_printf_float+0xe2>
 80048ce:	f1ba 0f00 	cmp.w	sl, #0
 80048d2:	bfb8      	it	lt
 80048d4:	232d      	movlt	r3, #45	; 0x2d
 80048d6:	4880      	ldr	r0, [pc, #512]	; (8004ad8 <_printf_float+0x2d8>)
 80048d8:	bfb8      	it	lt
 80048da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80048de:	4b7f      	ldr	r3, [pc, #508]	; (8004adc <_printf_float+0x2dc>)
 80048e0:	e7d3      	b.n	800488a <_printf_float+0x8a>
 80048e2:	6863      	ldr	r3, [r4, #4]
 80048e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	d142      	bne.n	8004972 <_printf_float+0x172>
 80048ec:	2306      	movs	r3, #6
 80048ee:	6063      	str	r3, [r4, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	9206      	str	r2, [sp, #24]
 80048f4:	aa0e      	add	r2, sp, #56	; 0x38
 80048f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80048fa:	aa0d      	add	r2, sp, #52	; 0x34
 80048fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004900:	9203      	str	r2, [sp, #12]
 8004902:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004906:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800490a:	6023      	str	r3, [r4, #0]
 800490c:	6863      	ldr	r3, [r4, #4]
 800490e:	4642      	mov	r2, r8
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	4628      	mov	r0, r5
 8004914:	4653      	mov	r3, sl
 8004916:	910b      	str	r1, [sp, #44]	; 0x2c
 8004918:	f7ff fed4 	bl	80046c4 <__cvt>
 800491c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800491e:	4680      	mov	r8, r0
 8004920:	2947      	cmp	r1, #71	; 0x47
 8004922:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004924:	d108      	bne.n	8004938 <_printf_float+0x138>
 8004926:	1cc8      	adds	r0, r1, #3
 8004928:	db02      	blt.n	8004930 <_printf_float+0x130>
 800492a:	6863      	ldr	r3, [r4, #4]
 800492c:	4299      	cmp	r1, r3
 800492e:	dd40      	ble.n	80049b2 <_printf_float+0x1b2>
 8004930:	f1a9 0902 	sub.w	r9, r9, #2
 8004934:	fa5f f989 	uxtb.w	r9, r9
 8004938:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800493c:	d81f      	bhi.n	800497e <_printf_float+0x17e>
 800493e:	464a      	mov	r2, r9
 8004940:	3901      	subs	r1, #1
 8004942:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004946:	910d      	str	r1, [sp, #52]	; 0x34
 8004948:	f7ff ff1b 	bl	8004782 <__exponent>
 800494c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800494e:	4682      	mov	sl, r0
 8004950:	1813      	adds	r3, r2, r0
 8004952:	2a01      	cmp	r2, #1
 8004954:	6123      	str	r3, [r4, #16]
 8004956:	dc02      	bgt.n	800495e <_printf_float+0x15e>
 8004958:	6822      	ldr	r2, [r4, #0]
 800495a:	07d2      	lsls	r2, r2, #31
 800495c:	d501      	bpl.n	8004962 <_printf_float+0x162>
 800495e:	3301      	adds	r3, #1
 8004960:	6123      	str	r3, [r4, #16]
 8004962:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004966:	2b00      	cmp	r3, #0
 8004968:	d09b      	beq.n	80048a2 <_printf_float+0xa2>
 800496a:	232d      	movs	r3, #45	; 0x2d
 800496c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004970:	e797      	b.n	80048a2 <_printf_float+0xa2>
 8004972:	2947      	cmp	r1, #71	; 0x47
 8004974:	d1bc      	bne.n	80048f0 <_printf_float+0xf0>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1ba      	bne.n	80048f0 <_printf_float+0xf0>
 800497a:	2301      	movs	r3, #1
 800497c:	e7b7      	b.n	80048ee <_printf_float+0xee>
 800497e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004982:	d118      	bne.n	80049b6 <_printf_float+0x1b6>
 8004984:	2900      	cmp	r1, #0
 8004986:	6863      	ldr	r3, [r4, #4]
 8004988:	dd0b      	ble.n	80049a2 <_printf_float+0x1a2>
 800498a:	6121      	str	r1, [r4, #16]
 800498c:	b913      	cbnz	r3, 8004994 <_printf_float+0x194>
 800498e:	6822      	ldr	r2, [r4, #0]
 8004990:	07d0      	lsls	r0, r2, #31
 8004992:	d502      	bpl.n	800499a <_printf_float+0x19a>
 8004994:	3301      	adds	r3, #1
 8004996:	440b      	add	r3, r1
 8004998:	6123      	str	r3, [r4, #16]
 800499a:	f04f 0a00 	mov.w	sl, #0
 800499e:	65a1      	str	r1, [r4, #88]	; 0x58
 80049a0:	e7df      	b.n	8004962 <_printf_float+0x162>
 80049a2:	b913      	cbnz	r3, 80049aa <_printf_float+0x1aa>
 80049a4:	6822      	ldr	r2, [r4, #0]
 80049a6:	07d2      	lsls	r2, r2, #31
 80049a8:	d501      	bpl.n	80049ae <_printf_float+0x1ae>
 80049aa:	3302      	adds	r3, #2
 80049ac:	e7f4      	b.n	8004998 <_printf_float+0x198>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e7f2      	b.n	8004998 <_printf_float+0x198>
 80049b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80049b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049b8:	4299      	cmp	r1, r3
 80049ba:	db05      	blt.n	80049c8 <_printf_float+0x1c8>
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	6121      	str	r1, [r4, #16]
 80049c0:	07d8      	lsls	r0, r3, #31
 80049c2:	d5ea      	bpl.n	800499a <_printf_float+0x19a>
 80049c4:	1c4b      	adds	r3, r1, #1
 80049c6:	e7e7      	b.n	8004998 <_printf_float+0x198>
 80049c8:	2900      	cmp	r1, #0
 80049ca:	bfcc      	ite	gt
 80049cc:	2201      	movgt	r2, #1
 80049ce:	f1c1 0202 	rsble	r2, r1, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	e7e0      	b.n	8004998 <_printf_float+0x198>
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	055a      	lsls	r2, r3, #21
 80049da:	d407      	bmi.n	80049ec <_printf_float+0x1ec>
 80049dc:	6923      	ldr	r3, [r4, #16]
 80049de:	4642      	mov	r2, r8
 80049e0:	4631      	mov	r1, r6
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b8      	blx	r7
 80049e6:	3001      	adds	r0, #1
 80049e8:	d12b      	bne.n	8004a42 <_printf_float+0x242>
 80049ea:	e764      	b.n	80048b6 <_printf_float+0xb6>
 80049ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80049f0:	f240 80dd 	bls.w	8004bae <_printf_float+0x3ae>
 80049f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049f8:	2200      	movs	r2, #0
 80049fa:	2300      	movs	r3, #0
 80049fc:	f7fb ffd4 	bl	80009a8 <__aeabi_dcmpeq>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d033      	beq.n	8004a6c <_printf_float+0x26c>
 8004a04:	2301      	movs	r3, #1
 8004a06:	4631      	mov	r1, r6
 8004a08:	4628      	mov	r0, r5
 8004a0a:	4a35      	ldr	r2, [pc, #212]	; (8004ae0 <_printf_float+0x2e0>)
 8004a0c:	47b8      	blx	r7
 8004a0e:	3001      	adds	r0, #1
 8004a10:	f43f af51 	beq.w	80048b6 <_printf_float+0xb6>
 8004a14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	db02      	blt.n	8004a22 <_printf_float+0x222>
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	07d8      	lsls	r0, r3, #31
 8004a20:	d50f      	bpl.n	8004a42 <_printf_float+0x242>
 8004a22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a26:	4631      	mov	r1, r6
 8004a28:	4628      	mov	r0, r5
 8004a2a:	47b8      	blx	r7
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	f43f af42 	beq.w	80048b6 <_printf_float+0xb6>
 8004a32:	f04f 0800 	mov.w	r8, #0
 8004a36:	f104 091a 	add.w	r9, r4, #26
 8004a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	4543      	cmp	r3, r8
 8004a40:	dc09      	bgt.n	8004a56 <_printf_float+0x256>
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	079b      	lsls	r3, r3, #30
 8004a46:	f100 8102 	bmi.w	8004c4e <_printf_float+0x44e>
 8004a4a:	68e0      	ldr	r0, [r4, #12]
 8004a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a4e:	4298      	cmp	r0, r3
 8004a50:	bfb8      	it	lt
 8004a52:	4618      	movlt	r0, r3
 8004a54:	e731      	b.n	80048ba <_printf_float+0xba>
 8004a56:	2301      	movs	r3, #1
 8004a58:	464a      	mov	r2, r9
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	47b8      	blx	r7
 8004a60:	3001      	adds	r0, #1
 8004a62:	f43f af28 	beq.w	80048b6 <_printf_float+0xb6>
 8004a66:	f108 0801 	add.w	r8, r8, #1
 8004a6a:	e7e6      	b.n	8004a3a <_printf_float+0x23a>
 8004a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	dc38      	bgt.n	8004ae4 <_printf_float+0x2e4>
 8004a72:	2301      	movs	r3, #1
 8004a74:	4631      	mov	r1, r6
 8004a76:	4628      	mov	r0, r5
 8004a78:	4a19      	ldr	r2, [pc, #100]	; (8004ae0 <_printf_float+0x2e0>)
 8004a7a:	47b8      	blx	r7
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	f43f af1a 	beq.w	80048b6 <_printf_float+0xb6>
 8004a82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a86:	4313      	orrs	r3, r2
 8004a88:	d102      	bne.n	8004a90 <_printf_float+0x290>
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	07d9      	lsls	r1, r3, #31
 8004a8e:	d5d8      	bpl.n	8004a42 <_printf_float+0x242>
 8004a90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a94:	4631      	mov	r1, r6
 8004a96:	4628      	mov	r0, r5
 8004a98:	47b8      	blx	r7
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	f43f af0b 	beq.w	80048b6 <_printf_float+0xb6>
 8004aa0:	f04f 0900 	mov.w	r9, #0
 8004aa4:	f104 0a1a 	add.w	sl, r4, #26
 8004aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004aaa:	425b      	negs	r3, r3
 8004aac:	454b      	cmp	r3, r9
 8004aae:	dc01      	bgt.n	8004ab4 <_printf_float+0x2b4>
 8004ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ab2:	e794      	b.n	80049de <_printf_float+0x1de>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	4652      	mov	r2, sl
 8004ab8:	4631      	mov	r1, r6
 8004aba:	4628      	mov	r0, r5
 8004abc:	47b8      	blx	r7
 8004abe:	3001      	adds	r0, #1
 8004ac0:	f43f aef9 	beq.w	80048b6 <_printf_float+0xb6>
 8004ac4:	f109 0901 	add.w	r9, r9, #1
 8004ac8:	e7ee      	b.n	8004aa8 <_printf_float+0x2a8>
 8004aca:	bf00      	nop
 8004acc:	7fefffff 	.word	0x7fefffff
 8004ad0:	080096fc 	.word	0x080096fc
 8004ad4:	08009700 	.word	0x08009700
 8004ad8:	08009708 	.word	0x08009708
 8004adc:	08009704 	.word	0x08009704
 8004ae0:	0800970c 	.word	0x0800970c
 8004ae4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ae6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	bfa8      	it	ge
 8004aec:	461a      	movge	r2, r3
 8004aee:	2a00      	cmp	r2, #0
 8004af0:	4691      	mov	r9, r2
 8004af2:	dc37      	bgt.n	8004b64 <_printf_float+0x364>
 8004af4:	f04f 0b00 	mov.w	fp, #0
 8004af8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004afc:	f104 021a 	add.w	r2, r4, #26
 8004b00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004b04:	ebaa 0309 	sub.w	r3, sl, r9
 8004b08:	455b      	cmp	r3, fp
 8004b0a:	dc33      	bgt.n	8004b74 <_printf_float+0x374>
 8004b0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b10:	429a      	cmp	r2, r3
 8004b12:	db3b      	blt.n	8004b8c <_printf_float+0x38c>
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	07da      	lsls	r2, r3, #31
 8004b18:	d438      	bmi.n	8004b8c <_printf_float+0x38c>
 8004b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b1c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b1e:	eba3 020a 	sub.w	r2, r3, sl
 8004b22:	eba3 0901 	sub.w	r9, r3, r1
 8004b26:	4591      	cmp	r9, r2
 8004b28:	bfa8      	it	ge
 8004b2a:	4691      	movge	r9, r2
 8004b2c:	f1b9 0f00 	cmp.w	r9, #0
 8004b30:	dc34      	bgt.n	8004b9c <_printf_float+0x39c>
 8004b32:	f04f 0800 	mov.w	r8, #0
 8004b36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b3a:	f104 0a1a 	add.w	sl, r4, #26
 8004b3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b42:	1a9b      	subs	r3, r3, r2
 8004b44:	eba3 0309 	sub.w	r3, r3, r9
 8004b48:	4543      	cmp	r3, r8
 8004b4a:	f77f af7a 	ble.w	8004a42 <_printf_float+0x242>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	4652      	mov	r2, sl
 8004b52:	4631      	mov	r1, r6
 8004b54:	4628      	mov	r0, r5
 8004b56:	47b8      	blx	r7
 8004b58:	3001      	adds	r0, #1
 8004b5a:	f43f aeac 	beq.w	80048b6 <_printf_float+0xb6>
 8004b5e:	f108 0801 	add.w	r8, r8, #1
 8004b62:	e7ec      	b.n	8004b3e <_printf_float+0x33e>
 8004b64:	4613      	mov	r3, r2
 8004b66:	4631      	mov	r1, r6
 8004b68:	4642      	mov	r2, r8
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	47b8      	blx	r7
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d1c0      	bne.n	8004af4 <_printf_float+0x2f4>
 8004b72:	e6a0      	b.n	80048b6 <_printf_float+0xb6>
 8004b74:	2301      	movs	r3, #1
 8004b76:	4631      	mov	r1, r6
 8004b78:	4628      	mov	r0, r5
 8004b7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8004b7c:	47b8      	blx	r7
 8004b7e:	3001      	adds	r0, #1
 8004b80:	f43f ae99 	beq.w	80048b6 <_printf_float+0xb6>
 8004b84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b86:	f10b 0b01 	add.w	fp, fp, #1
 8004b8a:	e7b9      	b.n	8004b00 <_printf_float+0x300>
 8004b8c:	4631      	mov	r1, r6
 8004b8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b92:	4628      	mov	r0, r5
 8004b94:	47b8      	blx	r7
 8004b96:	3001      	adds	r0, #1
 8004b98:	d1bf      	bne.n	8004b1a <_printf_float+0x31a>
 8004b9a:	e68c      	b.n	80048b6 <_printf_float+0xb6>
 8004b9c:	464b      	mov	r3, r9
 8004b9e:	4631      	mov	r1, r6
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	eb08 020a 	add.w	r2, r8, sl
 8004ba6:	47b8      	blx	r7
 8004ba8:	3001      	adds	r0, #1
 8004baa:	d1c2      	bne.n	8004b32 <_printf_float+0x332>
 8004bac:	e683      	b.n	80048b6 <_printf_float+0xb6>
 8004bae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bb0:	2a01      	cmp	r2, #1
 8004bb2:	dc01      	bgt.n	8004bb8 <_printf_float+0x3b8>
 8004bb4:	07db      	lsls	r3, r3, #31
 8004bb6:	d537      	bpl.n	8004c28 <_printf_float+0x428>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	4642      	mov	r2, r8
 8004bbc:	4631      	mov	r1, r6
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	47b8      	blx	r7
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	f43f ae77 	beq.w	80048b6 <_printf_float+0xb6>
 8004bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bcc:	4631      	mov	r1, r6
 8004bce:	4628      	mov	r0, r5
 8004bd0:	47b8      	blx	r7
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	f43f ae6f 	beq.w	80048b6 <_printf_float+0xb6>
 8004bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2300      	movs	r3, #0
 8004be0:	f7fb fee2 	bl	80009a8 <__aeabi_dcmpeq>
 8004be4:	b9d8      	cbnz	r0, 8004c1e <_printf_float+0x41e>
 8004be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004be8:	f108 0201 	add.w	r2, r8, #1
 8004bec:	3b01      	subs	r3, #1
 8004bee:	4631      	mov	r1, r6
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	47b8      	blx	r7
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d10e      	bne.n	8004c16 <_printf_float+0x416>
 8004bf8:	e65d      	b.n	80048b6 <_printf_float+0xb6>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	464a      	mov	r2, r9
 8004bfe:	4631      	mov	r1, r6
 8004c00:	4628      	mov	r0, r5
 8004c02:	47b8      	blx	r7
 8004c04:	3001      	adds	r0, #1
 8004c06:	f43f ae56 	beq.w	80048b6 <_printf_float+0xb6>
 8004c0a:	f108 0801 	add.w	r8, r8, #1
 8004c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c10:	3b01      	subs	r3, #1
 8004c12:	4543      	cmp	r3, r8
 8004c14:	dcf1      	bgt.n	8004bfa <_printf_float+0x3fa>
 8004c16:	4653      	mov	r3, sl
 8004c18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c1c:	e6e0      	b.n	80049e0 <_printf_float+0x1e0>
 8004c1e:	f04f 0800 	mov.w	r8, #0
 8004c22:	f104 091a 	add.w	r9, r4, #26
 8004c26:	e7f2      	b.n	8004c0e <_printf_float+0x40e>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	4642      	mov	r2, r8
 8004c2c:	e7df      	b.n	8004bee <_printf_float+0x3ee>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	464a      	mov	r2, r9
 8004c32:	4631      	mov	r1, r6
 8004c34:	4628      	mov	r0, r5
 8004c36:	47b8      	blx	r7
 8004c38:	3001      	adds	r0, #1
 8004c3a:	f43f ae3c 	beq.w	80048b6 <_printf_float+0xb6>
 8004c3e:	f108 0801 	add.w	r8, r8, #1
 8004c42:	68e3      	ldr	r3, [r4, #12]
 8004c44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004c46:	1a5b      	subs	r3, r3, r1
 8004c48:	4543      	cmp	r3, r8
 8004c4a:	dcf0      	bgt.n	8004c2e <_printf_float+0x42e>
 8004c4c:	e6fd      	b.n	8004a4a <_printf_float+0x24a>
 8004c4e:	f04f 0800 	mov.w	r8, #0
 8004c52:	f104 0919 	add.w	r9, r4, #25
 8004c56:	e7f4      	b.n	8004c42 <_printf_float+0x442>

08004c58 <_printf_common>:
 8004c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c5c:	4616      	mov	r6, r2
 8004c5e:	4699      	mov	r9, r3
 8004c60:	688a      	ldr	r2, [r1, #8]
 8004c62:	690b      	ldr	r3, [r1, #16]
 8004c64:	4607      	mov	r7, r0
 8004c66:	4293      	cmp	r3, r2
 8004c68:	bfb8      	it	lt
 8004c6a:	4613      	movlt	r3, r2
 8004c6c:	6033      	str	r3, [r6, #0]
 8004c6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c72:	460c      	mov	r4, r1
 8004c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c78:	b10a      	cbz	r2, 8004c7e <_printf_common+0x26>
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	6033      	str	r3, [r6, #0]
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	0699      	lsls	r1, r3, #26
 8004c82:	bf42      	ittt	mi
 8004c84:	6833      	ldrmi	r3, [r6, #0]
 8004c86:	3302      	addmi	r3, #2
 8004c88:	6033      	strmi	r3, [r6, #0]
 8004c8a:	6825      	ldr	r5, [r4, #0]
 8004c8c:	f015 0506 	ands.w	r5, r5, #6
 8004c90:	d106      	bne.n	8004ca0 <_printf_common+0x48>
 8004c92:	f104 0a19 	add.w	sl, r4, #25
 8004c96:	68e3      	ldr	r3, [r4, #12]
 8004c98:	6832      	ldr	r2, [r6, #0]
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	42ab      	cmp	r3, r5
 8004c9e:	dc28      	bgt.n	8004cf2 <_printf_common+0x9a>
 8004ca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ca4:	1e13      	subs	r3, r2, #0
 8004ca6:	6822      	ldr	r2, [r4, #0]
 8004ca8:	bf18      	it	ne
 8004caa:	2301      	movne	r3, #1
 8004cac:	0692      	lsls	r2, r2, #26
 8004cae:	d42d      	bmi.n	8004d0c <_printf_common+0xb4>
 8004cb0:	4649      	mov	r1, r9
 8004cb2:	4638      	mov	r0, r7
 8004cb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cb8:	47c0      	blx	r8
 8004cba:	3001      	adds	r0, #1
 8004cbc:	d020      	beq.n	8004d00 <_printf_common+0xa8>
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	68e5      	ldr	r5, [r4, #12]
 8004cc2:	f003 0306 	and.w	r3, r3, #6
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	bf18      	it	ne
 8004cca:	2500      	movne	r5, #0
 8004ccc:	6832      	ldr	r2, [r6, #0]
 8004cce:	f04f 0600 	mov.w	r6, #0
 8004cd2:	68a3      	ldr	r3, [r4, #8]
 8004cd4:	bf08      	it	eq
 8004cd6:	1aad      	subeq	r5, r5, r2
 8004cd8:	6922      	ldr	r2, [r4, #16]
 8004cda:	bf08      	it	eq
 8004cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	bfc4      	itt	gt
 8004ce4:	1a9b      	subgt	r3, r3, r2
 8004ce6:	18ed      	addgt	r5, r5, r3
 8004ce8:	341a      	adds	r4, #26
 8004cea:	42b5      	cmp	r5, r6
 8004cec:	d11a      	bne.n	8004d24 <_printf_common+0xcc>
 8004cee:	2000      	movs	r0, #0
 8004cf0:	e008      	b.n	8004d04 <_printf_common+0xac>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4652      	mov	r2, sl
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	47c0      	blx	r8
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d103      	bne.n	8004d08 <_printf_common+0xb0>
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d08:	3501      	adds	r5, #1
 8004d0a:	e7c4      	b.n	8004c96 <_printf_common+0x3e>
 8004d0c:	2030      	movs	r0, #48	; 0x30
 8004d0e:	18e1      	adds	r1, r4, r3
 8004d10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d1a:	4422      	add	r2, r4
 8004d1c:	3302      	adds	r3, #2
 8004d1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d22:	e7c5      	b.n	8004cb0 <_printf_common+0x58>
 8004d24:	2301      	movs	r3, #1
 8004d26:	4622      	mov	r2, r4
 8004d28:	4649      	mov	r1, r9
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	47c0      	blx	r8
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d0e6      	beq.n	8004d00 <_printf_common+0xa8>
 8004d32:	3601      	adds	r6, #1
 8004d34:	e7d9      	b.n	8004cea <_printf_common+0x92>
	...

08004d38 <_printf_i>:
 8004d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3c:	7e0f      	ldrb	r7, [r1, #24]
 8004d3e:	4691      	mov	r9, r2
 8004d40:	2f78      	cmp	r7, #120	; 0x78
 8004d42:	4680      	mov	r8, r0
 8004d44:	460c      	mov	r4, r1
 8004d46:	469a      	mov	sl, r3
 8004d48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d4e:	d807      	bhi.n	8004d60 <_printf_i+0x28>
 8004d50:	2f62      	cmp	r7, #98	; 0x62
 8004d52:	d80a      	bhi.n	8004d6a <_printf_i+0x32>
 8004d54:	2f00      	cmp	r7, #0
 8004d56:	f000 80d9 	beq.w	8004f0c <_printf_i+0x1d4>
 8004d5a:	2f58      	cmp	r7, #88	; 0x58
 8004d5c:	f000 80a4 	beq.w	8004ea8 <_printf_i+0x170>
 8004d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d68:	e03a      	b.n	8004de0 <_printf_i+0xa8>
 8004d6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d6e:	2b15      	cmp	r3, #21
 8004d70:	d8f6      	bhi.n	8004d60 <_printf_i+0x28>
 8004d72:	a101      	add	r1, pc, #4	; (adr r1, 8004d78 <_printf_i+0x40>)
 8004d74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d78:	08004dd1 	.word	0x08004dd1
 8004d7c:	08004de5 	.word	0x08004de5
 8004d80:	08004d61 	.word	0x08004d61
 8004d84:	08004d61 	.word	0x08004d61
 8004d88:	08004d61 	.word	0x08004d61
 8004d8c:	08004d61 	.word	0x08004d61
 8004d90:	08004de5 	.word	0x08004de5
 8004d94:	08004d61 	.word	0x08004d61
 8004d98:	08004d61 	.word	0x08004d61
 8004d9c:	08004d61 	.word	0x08004d61
 8004da0:	08004d61 	.word	0x08004d61
 8004da4:	08004ef3 	.word	0x08004ef3
 8004da8:	08004e15 	.word	0x08004e15
 8004dac:	08004ed5 	.word	0x08004ed5
 8004db0:	08004d61 	.word	0x08004d61
 8004db4:	08004d61 	.word	0x08004d61
 8004db8:	08004f15 	.word	0x08004f15
 8004dbc:	08004d61 	.word	0x08004d61
 8004dc0:	08004e15 	.word	0x08004e15
 8004dc4:	08004d61 	.word	0x08004d61
 8004dc8:	08004d61 	.word	0x08004d61
 8004dcc:	08004edd 	.word	0x08004edd
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	1d1a      	adds	r2, r3, #4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	602a      	str	r2, [r5, #0]
 8004dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0a4      	b.n	8004f2e <_printf_i+0x1f6>
 8004de4:	6820      	ldr	r0, [r4, #0]
 8004de6:	6829      	ldr	r1, [r5, #0]
 8004de8:	0606      	lsls	r6, r0, #24
 8004dea:	f101 0304 	add.w	r3, r1, #4
 8004dee:	d50a      	bpl.n	8004e06 <_printf_i+0xce>
 8004df0:	680e      	ldr	r6, [r1, #0]
 8004df2:	602b      	str	r3, [r5, #0]
 8004df4:	2e00      	cmp	r6, #0
 8004df6:	da03      	bge.n	8004e00 <_printf_i+0xc8>
 8004df8:	232d      	movs	r3, #45	; 0x2d
 8004dfa:	4276      	negs	r6, r6
 8004dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e00:	230a      	movs	r3, #10
 8004e02:	485e      	ldr	r0, [pc, #376]	; (8004f7c <_printf_i+0x244>)
 8004e04:	e019      	b.n	8004e3a <_printf_i+0x102>
 8004e06:	680e      	ldr	r6, [r1, #0]
 8004e08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e0c:	602b      	str	r3, [r5, #0]
 8004e0e:	bf18      	it	ne
 8004e10:	b236      	sxthne	r6, r6
 8004e12:	e7ef      	b.n	8004df4 <_printf_i+0xbc>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	6820      	ldr	r0, [r4, #0]
 8004e18:	1d19      	adds	r1, r3, #4
 8004e1a:	6029      	str	r1, [r5, #0]
 8004e1c:	0601      	lsls	r1, r0, #24
 8004e1e:	d501      	bpl.n	8004e24 <_printf_i+0xec>
 8004e20:	681e      	ldr	r6, [r3, #0]
 8004e22:	e002      	b.n	8004e2a <_printf_i+0xf2>
 8004e24:	0646      	lsls	r6, r0, #25
 8004e26:	d5fb      	bpl.n	8004e20 <_printf_i+0xe8>
 8004e28:	881e      	ldrh	r6, [r3, #0]
 8004e2a:	2f6f      	cmp	r7, #111	; 0x6f
 8004e2c:	bf0c      	ite	eq
 8004e2e:	2308      	moveq	r3, #8
 8004e30:	230a      	movne	r3, #10
 8004e32:	4852      	ldr	r0, [pc, #328]	; (8004f7c <_printf_i+0x244>)
 8004e34:	2100      	movs	r1, #0
 8004e36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e3a:	6865      	ldr	r5, [r4, #4]
 8004e3c:	2d00      	cmp	r5, #0
 8004e3e:	bfa8      	it	ge
 8004e40:	6821      	ldrge	r1, [r4, #0]
 8004e42:	60a5      	str	r5, [r4, #8]
 8004e44:	bfa4      	itt	ge
 8004e46:	f021 0104 	bicge.w	r1, r1, #4
 8004e4a:	6021      	strge	r1, [r4, #0]
 8004e4c:	b90e      	cbnz	r6, 8004e52 <_printf_i+0x11a>
 8004e4e:	2d00      	cmp	r5, #0
 8004e50:	d04d      	beq.n	8004eee <_printf_i+0x1b6>
 8004e52:	4615      	mov	r5, r2
 8004e54:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e58:	fb03 6711 	mls	r7, r3, r1, r6
 8004e5c:	5dc7      	ldrb	r7, [r0, r7]
 8004e5e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e62:	4637      	mov	r7, r6
 8004e64:	42bb      	cmp	r3, r7
 8004e66:	460e      	mov	r6, r1
 8004e68:	d9f4      	bls.n	8004e54 <_printf_i+0x11c>
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d10b      	bne.n	8004e86 <_printf_i+0x14e>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	07de      	lsls	r6, r3, #31
 8004e72:	d508      	bpl.n	8004e86 <_printf_i+0x14e>
 8004e74:	6923      	ldr	r3, [r4, #16]
 8004e76:	6861      	ldr	r1, [r4, #4]
 8004e78:	4299      	cmp	r1, r3
 8004e7a:	bfde      	ittt	le
 8004e7c:	2330      	movle	r3, #48	; 0x30
 8004e7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e82:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004e86:	1b52      	subs	r2, r2, r5
 8004e88:	6122      	str	r2, [r4, #16]
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	4640      	mov	r0, r8
 8004e90:	f8cd a000 	str.w	sl, [sp]
 8004e94:	aa03      	add	r2, sp, #12
 8004e96:	f7ff fedf 	bl	8004c58 <_printf_common>
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	d14c      	bne.n	8004f38 <_printf_i+0x200>
 8004e9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ea2:	b004      	add	sp, #16
 8004ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea8:	4834      	ldr	r0, [pc, #208]	; (8004f7c <_printf_i+0x244>)
 8004eaa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004eae:	6829      	ldr	r1, [r5, #0]
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	f851 6b04 	ldr.w	r6, [r1], #4
 8004eb6:	6029      	str	r1, [r5, #0]
 8004eb8:	061d      	lsls	r5, r3, #24
 8004eba:	d514      	bpl.n	8004ee6 <_printf_i+0x1ae>
 8004ebc:	07df      	lsls	r7, r3, #31
 8004ebe:	bf44      	itt	mi
 8004ec0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ec4:	6023      	strmi	r3, [r4, #0]
 8004ec6:	b91e      	cbnz	r6, 8004ed0 <_printf_i+0x198>
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	f023 0320 	bic.w	r3, r3, #32
 8004ece:	6023      	str	r3, [r4, #0]
 8004ed0:	2310      	movs	r3, #16
 8004ed2:	e7af      	b.n	8004e34 <_printf_i+0xfc>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	f043 0320 	orr.w	r3, r3, #32
 8004eda:	6023      	str	r3, [r4, #0]
 8004edc:	2378      	movs	r3, #120	; 0x78
 8004ede:	4828      	ldr	r0, [pc, #160]	; (8004f80 <_printf_i+0x248>)
 8004ee0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ee4:	e7e3      	b.n	8004eae <_printf_i+0x176>
 8004ee6:	0659      	lsls	r1, r3, #25
 8004ee8:	bf48      	it	mi
 8004eea:	b2b6      	uxthmi	r6, r6
 8004eec:	e7e6      	b.n	8004ebc <_printf_i+0x184>
 8004eee:	4615      	mov	r5, r2
 8004ef0:	e7bb      	b.n	8004e6a <_printf_i+0x132>
 8004ef2:	682b      	ldr	r3, [r5, #0]
 8004ef4:	6826      	ldr	r6, [r4, #0]
 8004ef6:	1d18      	adds	r0, r3, #4
 8004ef8:	6961      	ldr	r1, [r4, #20]
 8004efa:	6028      	str	r0, [r5, #0]
 8004efc:	0635      	lsls	r5, r6, #24
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	d501      	bpl.n	8004f06 <_printf_i+0x1ce>
 8004f02:	6019      	str	r1, [r3, #0]
 8004f04:	e002      	b.n	8004f0c <_printf_i+0x1d4>
 8004f06:	0670      	lsls	r0, r6, #25
 8004f08:	d5fb      	bpl.n	8004f02 <_printf_i+0x1ca>
 8004f0a:	8019      	strh	r1, [r3, #0]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	4615      	mov	r5, r2
 8004f10:	6123      	str	r3, [r4, #16]
 8004f12:	e7ba      	b.n	8004e8a <_printf_i+0x152>
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	2100      	movs	r1, #0
 8004f18:	1d1a      	adds	r2, r3, #4
 8004f1a:	602a      	str	r2, [r5, #0]
 8004f1c:	681d      	ldr	r5, [r3, #0]
 8004f1e:	6862      	ldr	r2, [r4, #4]
 8004f20:	4628      	mov	r0, r5
 8004f22:	f002 faef 	bl	8007504 <memchr>
 8004f26:	b108      	cbz	r0, 8004f2c <_printf_i+0x1f4>
 8004f28:	1b40      	subs	r0, r0, r5
 8004f2a:	6060      	str	r0, [r4, #4]
 8004f2c:	6863      	ldr	r3, [r4, #4]
 8004f2e:	6123      	str	r3, [r4, #16]
 8004f30:	2300      	movs	r3, #0
 8004f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f36:	e7a8      	b.n	8004e8a <_printf_i+0x152>
 8004f38:	462a      	mov	r2, r5
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	6923      	ldr	r3, [r4, #16]
 8004f40:	47d0      	blx	sl
 8004f42:	3001      	adds	r0, #1
 8004f44:	d0ab      	beq.n	8004e9e <_printf_i+0x166>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	079b      	lsls	r3, r3, #30
 8004f4a:	d413      	bmi.n	8004f74 <_printf_i+0x23c>
 8004f4c:	68e0      	ldr	r0, [r4, #12]
 8004f4e:	9b03      	ldr	r3, [sp, #12]
 8004f50:	4298      	cmp	r0, r3
 8004f52:	bfb8      	it	lt
 8004f54:	4618      	movlt	r0, r3
 8004f56:	e7a4      	b.n	8004ea2 <_printf_i+0x16a>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	4632      	mov	r2, r6
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	4640      	mov	r0, r8
 8004f60:	47d0      	blx	sl
 8004f62:	3001      	adds	r0, #1
 8004f64:	d09b      	beq.n	8004e9e <_printf_i+0x166>
 8004f66:	3501      	adds	r5, #1
 8004f68:	68e3      	ldr	r3, [r4, #12]
 8004f6a:	9903      	ldr	r1, [sp, #12]
 8004f6c:	1a5b      	subs	r3, r3, r1
 8004f6e:	42ab      	cmp	r3, r5
 8004f70:	dcf2      	bgt.n	8004f58 <_printf_i+0x220>
 8004f72:	e7eb      	b.n	8004f4c <_printf_i+0x214>
 8004f74:	2500      	movs	r5, #0
 8004f76:	f104 0619 	add.w	r6, r4, #25
 8004f7a:	e7f5      	b.n	8004f68 <_printf_i+0x230>
 8004f7c:	0800970e 	.word	0x0800970e
 8004f80:	0800971f 	.word	0x0800971f

08004f84 <_scanf_float>:
 8004f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f88:	b087      	sub	sp, #28
 8004f8a:	9303      	str	r3, [sp, #12]
 8004f8c:	688b      	ldr	r3, [r1, #8]
 8004f8e:	4617      	mov	r7, r2
 8004f90:	1e5a      	subs	r2, r3, #1
 8004f92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004f96:	bf85      	ittet	hi
 8004f98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004f9c:	195b      	addhi	r3, r3, r5
 8004f9e:	2300      	movls	r3, #0
 8004fa0:	9302      	strhi	r3, [sp, #8]
 8004fa2:	bf88      	it	hi
 8004fa4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004fa8:	468b      	mov	fp, r1
 8004faa:	f04f 0500 	mov.w	r5, #0
 8004fae:	bf8c      	ite	hi
 8004fb0:	608b      	strhi	r3, [r1, #8]
 8004fb2:	9302      	strls	r3, [sp, #8]
 8004fb4:	680b      	ldr	r3, [r1, #0]
 8004fb6:	4680      	mov	r8, r0
 8004fb8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004fbc:	f84b 3b1c 	str.w	r3, [fp], #28
 8004fc0:	460c      	mov	r4, r1
 8004fc2:	465e      	mov	r6, fp
 8004fc4:	46aa      	mov	sl, r5
 8004fc6:	46a9      	mov	r9, r5
 8004fc8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004fcc:	9501      	str	r5, [sp, #4]
 8004fce:	68a2      	ldr	r2, [r4, #8]
 8004fd0:	b152      	cbz	r2, 8004fe8 <_scanf_float+0x64>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b4e      	cmp	r3, #78	; 0x4e
 8004fd8:	d864      	bhi.n	80050a4 <_scanf_float+0x120>
 8004fda:	2b40      	cmp	r3, #64	; 0x40
 8004fdc:	d83c      	bhi.n	8005058 <_scanf_float+0xd4>
 8004fde:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004fe2:	b2c8      	uxtb	r0, r1
 8004fe4:	280e      	cmp	r0, #14
 8004fe6:	d93a      	bls.n	800505e <_scanf_float+0xda>
 8004fe8:	f1b9 0f00 	cmp.w	r9, #0
 8004fec:	d003      	beq.n	8004ff6 <_scanf_float+0x72>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004ffa:	f1ba 0f01 	cmp.w	sl, #1
 8004ffe:	f200 8113 	bhi.w	8005228 <_scanf_float+0x2a4>
 8005002:	455e      	cmp	r6, fp
 8005004:	f200 8105 	bhi.w	8005212 <_scanf_float+0x28e>
 8005008:	2501      	movs	r5, #1
 800500a:	4628      	mov	r0, r5
 800500c:	b007      	add	sp, #28
 800500e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005012:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005016:	2a0d      	cmp	r2, #13
 8005018:	d8e6      	bhi.n	8004fe8 <_scanf_float+0x64>
 800501a:	a101      	add	r1, pc, #4	; (adr r1, 8005020 <_scanf_float+0x9c>)
 800501c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005020:	0800515f 	.word	0x0800515f
 8005024:	08004fe9 	.word	0x08004fe9
 8005028:	08004fe9 	.word	0x08004fe9
 800502c:	08004fe9 	.word	0x08004fe9
 8005030:	080051bf 	.word	0x080051bf
 8005034:	08005197 	.word	0x08005197
 8005038:	08004fe9 	.word	0x08004fe9
 800503c:	08004fe9 	.word	0x08004fe9
 8005040:	0800516d 	.word	0x0800516d
 8005044:	08004fe9 	.word	0x08004fe9
 8005048:	08004fe9 	.word	0x08004fe9
 800504c:	08004fe9 	.word	0x08004fe9
 8005050:	08004fe9 	.word	0x08004fe9
 8005054:	08005125 	.word	0x08005125
 8005058:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800505c:	e7db      	b.n	8005016 <_scanf_float+0x92>
 800505e:	290e      	cmp	r1, #14
 8005060:	d8c2      	bhi.n	8004fe8 <_scanf_float+0x64>
 8005062:	a001      	add	r0, pc, #4	; (adr r0, 8005068 <_scanf_float+0xe4>)
 8005064:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005068:	08005117 	.word	0x08005117
 800506c:	08004fe9 	.word	0x08004fe9
 8005070:	08005117 	.word	0x08005117
 8005074:	080051ab 	.word	0x080051ab
 8005078:	08004fe9 	.word	0x08004fe9
 800507c:	080050c5 	.word	0x080050c5
 8005080:	08005101 	.word	0x08005101
 8005084:	08005101 	.word	0x08005101
 8005088:	08005101 	.word	0x08005101
 800508c:	08005101 	.word	0x08005101
 8005090:	08005101 	.word	0x08005101
 8005094:	08005101 	.word	0x08005101
 8005098:	08005101 	.word	0x08005101
 800509c:	08005101 	.word	0x08005101
 80050a0:	08005101 	.word	0x08005101
 80050a4:	2b6e      	cmp	r3, #110	; 0x6e
 80050a6:	d809      	bhi.n	80050bc <_scanf_float+0x138>
 80050a8:	2b60      	cmp	r3, #96	; 0x60
 80050aa:	d8b2      	bhi.n	8005012 <_scanf_float+0x8e>
 80050ac:	2b54      	cmp	r3, #84	; 0x54
 80050ae:	d077      	beq.n	80051a0 <_scanf_float+0x21c>
 80050b0:	2b59      	cmp	r3, #89	; 0x59
 80050b2:	d199      	bne.n	8004fe8 <_scanf_float+0x64>
 80050b4:	2d07      	cmp	r5, #7
 80050b6:	d197      	bne.n	8004fe8 <_scanf_float+0x64>
 80050b8:	2508      	movs	r5, #8
 80050ba:	e029      	b.n	8005110 <_scanf_float+0x18c>
 80050bc:	2b74      	cmp	r3, #116	; 0x74
 80050be:	d06f      	beq.n	80051a0 <_scanf_float+0x21c>
 80050c0:	2b79      	cmp	r3, #121	; 0x79
 80050c2:	e7f6      	b.n	80050b2 <_scanf_float+0x12e>
 80050c4:	6821      	ldr	r1, [r4, #0]
 80050c6:	05c8      	lsls	r0, r1, #23
 80050c8:	d51a      	bpl.n	8005100 <_scanf_float+0x17c>
 80050ca:	9b02      	ldr	r3, [sp, #8]
 80050cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80050d0:	6021      	str	r1, [r4, #0]
 80050d2:	f109 0901 	add.w	r9, r9, #1
 80050d6:	b11b      	cbz	r3, 80050e0 <_scanf_float+0x15c>
 80050d8:	3b01      	subs	r3, #1
 80050da:	3201      	adds	r2, #1
 80050dc:	9302      	str	r3, [sp, #8]
 80050de:	60a2      	str	r2, [r4, #8]
 80050e0:	68a3      	ldr	r3, [r4, #8]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	60a3      	str	r3, [r4, #8]
 80050e6:	6923      	ldr	r3, [r4, #16]
 80050e8:	3301      	adds	r3, #1
 80050ea:	6123      	str	r3, [r4, #16]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	607b      	str	r3, [r7, #4]
 80050f4:	f340 8084 	ble.w	8005200 <_scanf_float+0x27c>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	3301      	adds	r3, #1
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	e766      	b.n	8004fce <_scanf_float+0x4a>
 8005100:	eb1a 0f05 	cmn.w	sl, r5
 8005104:	f47f af70 	bne.w	8004fe8 <_scanf_float+0x64>
 8005108:	6822      	ldr	r2, [r4, #0]
 800510a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800510e:	6022      	str	r2, [r4, #0]
 8005110:	f806 3b01 	strb.w	r3, [r6], #1
 8005114:	e7e4      	b.n	80050e0 <_scanf_float+0x15c>
 8005116:	6822      	ldr	r2, [r4, #0]
 8005118:	0610      	lsls	r0, r2, #24
 800511a:	f57f af65 	bpl.w	8004fe8 <_scanf_float+0x64>
 800511e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005122:	e7f4      	b.n	800510e <_scanf_float+0x18a>
 8005124:	f1ba 0f00 	cmp.w	sl, #0
 8005128:	d10e      	bne.n	8005148 <_scanf_float+0x1c4>
 800512a:	f1b9 0f00 	cmp.w	r9, #0
 800512e:	d10e      	bne.n	800514e <_scanf_float+0x1ca>
 8005130:	6822      	ldr	r2, [r4, #0]
 8005132:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005136:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800513a:	d108      	bne.n	800514e <_scanf_float+0x1ca>
 800513c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005140:	f04f 0a01 	mov.w	sl, #1
 8005144:	6022      	str	r2, [r4, #0]
 8005146:	e7e3      	b.n	8005110 <_scanf_float+0x18c>
 8005148:	f1ba 0f02 	cmp.w	sl, #2
 800514c:	d055      	beq.n	80051fa <_scanf_float+0x276>
 800514e:	2d01      	cmp	r5, #1
 8005150:	d002      	beq.n	8005158 <_scanf_float+0x1d4>
 8005152:	2d04      	cmp	r5, #4
 8005154:	f47f af48 	bne.w	8004fe8 <_scanf_float+0x64>
 8005158:	3501      	adds	r5, #1
 800515a:	b2ed      	uxtb	r5, r5
 800515c:	e7d8      	b.n	8005110 <_scanf_float+0x18c>
 800515e:	f1ba 0f01 	cmp.w	sl, #1
 8005162:	f47f af41 	bne.w	8004fe8 <_scanf_float+0x64>
 8005166:	f04f 0a02 	mov.w	sl, #2
 800516a:	e7d1      	b.n	8005110 <_scanf_float+0x18c>
 800516c:	b97d      	cbnz	r5, 800518e <_scanf_float+0x20a>
 800516e:	f1b9 0f00 	cmp.w	r9, #0
 8005172:	f47f af3c 	bne.w	8004fee <_scanf_float+0x6a>
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800517c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005180:	f47f af39 	bne.w	8004ff6 <_scanf_float+0x72>
 8005184:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005188:	2501      	movs	r5, #1
 800518a:	6022      	str	r2, [r4, #0]
 800518c:	e7c0      	b.n	8005110 <_scanf_float+0x18c>
 800518e:	2d03      	cmp	r5, #3
 8005190:	d0e2      	beq.n	8005158 <_scanf_float+0x1d4>
 8005192:	2d05      	cmp	r5, #5
 8005194:	e7de      	b.n	8005154 <_scanf_float+0x1d0>
 8005196:	2d02      	cmp	r5, #2
 8005198:	f47f af26 	bne.w	8004fe8 <_scanf_float+0x64>
 800519c:	2503      	movs	r5, #3
 800519e:	e7b7      	b.n	8005110 <_scanf_float+0x18c>
 80051a0:	2d06      	cmp	r5, #6
 80051a2:	f47f af21 	bne.w	8004fe8 <_scanf_float+0x64>
 80051a6:	2507      	movs	r5, #7
 80051a8:	e7b2      	b.n	8005110 <_scanf_float+0x18c>
 80051aa:	6822      	ldr	r2, [r4, #0]
 80051ac:	0591      	lsls	r1, r2, #22
 80051ae:	f57f af1b 	bpl.w	8004fe8 <_scanf_float+0x64>
 80051b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80051b6:	6022      	str	r2, [r4, #0]
 80051b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80051bc:	e7a8      	b.n	8005110 <_scanf_float+0x18c>
 80051be:	6822      	ldr	r2, [r4, #0]
 80051c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80051c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80051c8:	d006      	beq.n	80051d8 <_scanf_float+0x254>
 80051ca:	0550      	lsls	r0, r2, #21
 80051cc:	f57f af0c 	bpl.w	8004fe8 <_scanf_float+0x64>
 80051d0:	f1b9 0f00 	cmp.w	r9, #0
 80051d4:	f43f af0f 	beq.w	8004ff6 <_scanf_float+0x72>
 80051d8:	0591      	lsls	r1, r2, #22
 80051da:	bf58      	it	pl
 80051dc:	9901      	ldrpl	r1, [sp, #4]
 80051de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80051e2:	bf58      	it	pl
 80051e4:	eba9 0101 	subpl.w	r1, r9, r1
 80051e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80051ec:	f04f 0900 	mov.w	r9, #0
 80051f0:	bf58      	it	pl
 80051f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80051f6:	6022      	str	r2, [r4, #0]
 80051f8:	e78a      	b.n	8005110 <_scanf_float+0x18c>
 80051fa:	f04f 0a03 	mov.w	sl, #3
 80051fe:	e787      	b.n	8005110 <_scanf_float+0x18c>
 8005200:	4639      	mov	r1, r7
 8005202:	4640      	mov	r0, r8
 8005204:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005208:	4798      	blx	r3
 800520a:	2800      	cmp	r0, #0
 800520c:	f43f aedf 	beq.w	8004fce <_scanf_float+0x4a>
 8005210:	e6ea      	b.n	8004fe8 <_scanf_float+0x64>
 8005212:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005216:	463a      	mov	r2, r7
 8005218:	4640      	mov	r0, r8
 800521a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800521e:	4798      	blx	r3
 8005220:	6923      	ldr	r3, [r4, #16]
 8005222:	3b01      	subs	r3, #1
 8005224:	6123      	str	r3, [r4, #16]
 8005226:	e6ec      	b.n	8005002 <_scanf_float+0x7e>
 8005228:	1e6b      	subs	r3, r5, #1
 800522a:	2b06      	cmp	r3, #6
 800522c:	d825      	bhi.n	800527a <_scanf_float+0x2f6>
 800522e:	2d02      	cmp	r5, #2
 8005230:	d836      	bhi.n	80052a0 <_scanf_float+0x31c>
 8005232:	455e      	cmp	r6, fp
 8005234:	f67f aee8 	bls.w	8005008 <_scanf_float+0x84>
 8005238:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800523c:	463a      	mov	r2, r7
 800523e:	4640      	mov	r0, r8
 8005240:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005244:	4798      	blx	r3
 8005246:	6923      	ldr	r3, [r4, #16]
 8005248:	3b01      	subs	r3, #1
 800524a:	6123      	str	r3, [r4, #16]
 800524c:	e7f1      	b.n	8005232 <_scanf_float+0x2ae>
 800524e:	9802      	ldr	r0, [sp, #8]
 8005250:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005254:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005258:	463a      	mov	r2, r7
 800525a:	9002      	str	r0, [sp, #8]
 800525c:	4640      	mov	r0, r8
 800525e:	4798      	blx	r3
 8005260:	6923      	ldr	r3, [r4, #16]
 8005262:	3b01      	subs	r3, #1
 8005264:	6123      	str	r3, [r4, #16]
 8005266:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800526a:	fa5f fa8a 	uxtb.w	sl, sl
 800526e:	f1ba 0f02 	cmp.w	sl, #2
 8005272:	d1ec      	bne.n	800524e <_scanf_float+0x2ca>
 8005274:	3d03      	subs	r5, #3
 8005276:	b2ed      	uxtb	r5, r5
 8005278:	1b76      	subs	r6, r6, r5
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	05da      	lsls	r2, r3, #23
 800527e:	d52f      	bpl.n	80052e0 <_scanf_float+0x35c>
 8005280:	055b      	lsls	r3, r3, #21
 8005282:	d510      	bpl.n	80052a6 <_scanf_float+0x322>
 8005284:	455e      	cmp	r6, fp
 8005286:	f67f aebf 	bls.w	8005008 <_scanf_float+0x84>
 800528a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800528e:	463a      	mov	r2, r7
 8005290:	4640      	mov	r0, r8
 8005292:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005296:	4798      	blx	r3
 8005298:	6923      	ldr	r3, [r4, #16]
 800529a:	3b01      	subs	r3, #1
 800529c:	6123      	str	r3, [r4, #16]
 800529e:	e7f1      	b.n	8005284 <_scanf_float+0x300>
 80052a0:	46aa      	mov	sl, r5
 80052a2:	9602      	str	r6, [sp, #8]
 80052a4:	e7df      	b.n	8005266 <_scanf_float+0x2e2>
 80052a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80052aa:	6923      	ldr	r3, [r4, #16]
 80052ac:	2965      	cmp	r1, #101	; 0x65
 80052ae:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80052b2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80052b6:	6123      	str	r3, [r4, #16]
 80052b8:	d00c      	beq.n	80052d4 <_scanf_float+0x350>
 80052ba:	2945      	cmp	r1, #69	; 0x45
 80052bc:	d00a      	beq.n	80052d4 <_scanf_float+0x350>
 80052be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052c2:	463a      	mov	r2, r7
 80052c4:	4640      	mov	r0, r8
 80052c6:	4798      	blx	r3
 80052c8:	6923      	ldr	r3, [r4, #16]
 80052ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	1eb5      	subs	r5, r6, #2
 80052d2:	6123      	str	r3, [r4, #16]
 80052d4:	463a      	mov	r2, r7
 80052d6:	4640      	mov	r0, r8
 80052d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052dc:	4798      	blx	r3
 80052de:	462e      	mov	r6, r5
 80052e0:	6825      	ldr	r5, [r4, #0]
 80052e2:	f015 0510 	ands.w	r5, r5, #16
 80052e6:	d155      	bne.n	8005394 <_scanf_float+0x410>
 80052e8:	7035      	strb	r5, [r6, #0]
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f4:	d11b      	bne.n	800532e <_scanf_float+0x3aa>
 80052f6:	9b01      	ldr	r3, [sp, #4]
 80052f8:	454b      	cmp	r3, r9
 80052fa:	eba3 0209 	sub.w	r2, r3, r9
 80052fe:	d123      	bne.n	8005348 <_scanf_float+0x3c4>
 8005300:	2200      	movs	r2, #0
 8005302:	4659      	mov	r1, fp
 8005304:	4640      	mov	r0, r8
 8005306:	f000 fe7b 	bl	8006000 <_strtod_r>
 800530a:	6822      	ldr	r2, [r4, #0]
 800530c:	9b03      	ldr	r3, [sp, #12]
 800530e:	f012 0f02 	tst.w	r2, #2
 8005312:	4606      	mov	r6, r0
 8005314:	460f      	mov	r7, r1
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	d021      	beq.n	800535e <_scanf_float+0x3da>
 800531a:	1d1a      	adds	r2, r3, #4
 800531c:	9903      	ldr	r1, [sp, #12]
 800531e:	600a      	str	r2, [r1, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	e9c3 6700 	strd	r6, r7, [r3]
 8005326:	68e3      	ldr	r3, [r4, #12]
 8005328:	3301      	adds	r3, #1
 800532a:	60e3      	str	r3, [r4, #12]
 800532c:	e66d      	b.n	800500a <_scanf_float+0x86>
 800532e:	9b04      	ldr	r3, [sp, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0e5      	beq.n	8005300 <_scanf_float+0x37c>
 8005334:	9905      	ldr	r1, [sp, #20]
 8005336:	230a      	movs	r3, #10
 8005338:	462a      	mov	r2, r5
 800533a:	4640      	mov	r0, r8
 800533c:	3101      	adds	r1, #1
 800533e:	f000 fee1 	bl	8006104 <_strtol_r>
 8005342:	9b04      	ldr	r3, [sp, #16]
 8005344:	9e05      	ldr	r6, [sp, #20]
 8005346:	1ac2      	subs	r2, r0, r3
 8005348:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800534c:	429e      	cmp	r6, r3
 800534e:	bf28      	it	cs
 8005350:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005354:	4630      	mov	r0, r6
 8005356:	4910      	ldr	r1, [pc, #64]	; (8005398 <_scanf_float+0x414>)
 8005358:	f000 f826 	bl	80053a8 <siprintf>
 800535c:	e7d0      	b.n	8005300 <_scanf_float+0x37c>
 800535e:	f012 0f04 	tst.w	r2, #4
 8005362:	f103 0204 	add.w	r2, r3, #4
 8005366:	d1d9      	bne.n	800531c <_scanf_float+0x398>
 8005368:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800536c:	f8cc 2000 	str.w	r2, [ip]
 8005370:	f8d3 8000 	ldr.w	r8, [r3]
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	f7fb fb48 	bl	8000a0c <__aeabi_dcmpun>
 800537c:	b128      	cbz	r0, 800538a <_scanf_float+0x406>
 800537e:	4807      	ldr	r0, [pc, #28]	; (800539c <_scanf_float+0x418>)
 8005380:	f000 f80e 	bl	80053a0 <nanf>
 8005384:	f8c8 0000 	str.w	r0, [r8]
 8005388:	e7cd      	b.n	8005326 <_scanf_float+0x3a2>
 800538a:	4630      	mov	r0, r6
 800538c:	4639      	mov	r1, r7
 800538e:	f7fb fb9b 	bl	8000ac8 <__aeabi_d2f>
 8005392:	e7f7      	b.n	8005384 <_scanf_float+0x400>
 8005394:	2500      	movs	r5, #0
 8005396:	e638      	b.n	800500a <_scanf_float+0x86>
 8005398:	08009730 	.word	0x08009730
 800539c:	08009b38 	.word	0x08009b38

080053a0 <nanf>:
 80053a0:	4800      	ldr	r0, [pc, #0]	; (80053a4 <nanf+0x4>)
 80053a2:	4770      	bx	lr
 80053a4:	7fc00000 	.word	0x7fc00000

080053a8 <siprintf>:
 80053a8:	b40e      	push	{r1, r2, r3}
 80053aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053ae:	b500      	push	{lr}
 80053b0:	b09c      	sub	sp, #112	; 0x70
 80053b2:	ab1d      	add	r3, sp, #116	; 0x74
 80053b4:	9002      	str	r0, [sp, #8]
 80053b6:	9006      	str	r0, [sp, #24]
 80053b8:	9107      	str	r1, [sp, #28]
 80053ba:	9104      	str	r1, [sp, #16]
 80053bc:	4808      	ldr	r0, [pc, #32]	; (80053e0 <siprintf+0x38>)
 80053be:	4909      	ldr	r1, [pc, #36]	; (80053e4 <siprintf+0x3c>)
 80053c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80053c4:	9105      	str	r1, [sp, #20]
 80053c6:	6800      	ldr	r0, [r0, #0]
 80053c8:	a902      	add	r1, sp, #8
 80053ca:	9301      	str	r3, [sp, #4]
 80053cc:	f002 feba 	bl	8008144 <_svfiprintf_r>
 80053d0:	2200      	movs	r2, #0
 80053d2:	9b02      	ldr	r3, [sp, #8]
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	b01c      	add	sp, #112	; 0x70
 80053d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80053dc:	b003      	add	sp, #12
 80053de:	4770      	bx	lr
 80053e0:	20000014 	.word	0x20000014
 80053e4:	ffff0208 	.word	0xffff0208

080053e8 <sulp>:
 80053e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ec:	460f      	mov	r7, r1
 80053ee:	4690      	mov	r8, r2
 80053f0:	f002 fc14 	bl	8007c1c <__ulp>
 80053f4:	4604      	mov	r4, r0
 80053f6:	460d      	mov	r5, r1
 80053f8:	f1b8 0f00 	cmp.w	r8, #0
 80053fc:	d011      	beq.n	8005422 <sulp+0x3a>
 80053fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005402:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005406:	2b00      	cmp	r3, #0
 8005408:	dd0b      	ble.n	8005422 <sulp+0x3a>
 800540a:	2400      	movs	r4, #0
 800540c:	051b      	lsls	r3, r3, #20
 800540e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005412:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005416:	4622      	mov	r2, r4
 8005418:	462b      	mov	r3, r5
 800541a:	f7fb f85d 	bl	80004d8 <__aeabi_dmul>
 800541e:	4604      	mov	r4, r0
 8005420:	460d      	mov	r5, r1
 8005422:	4620      	mov	r0, r4
 8005424:	4629      	mov	r1, r5
 8005426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800542a:	0000      	movs	r0, r0
 800542c:	0000      	movs	r0, r0
	...

08005430 <_strtod_l>:
 8005430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005434:	469b      	mov	fp, r3
 8005436:	2300      	movs	r3, #0
 8005438:	b09f      	sub	sp, #124	; 0x7c
 800543a:	931a      	str	r3, [sp, #104]	; 0x68
 800543c:	4b9e      	ldr	r3, [pc, #632]	; (80056b8 <_strtod_l+0x288>)
 800543e:	4682      	mov	sl, r0
 8005440:	681f      	ldr	r7, [r3, #0]
 8005442:	460e      	mov	r6, r1
 8005444:	4638      	mov	r0, r7
 8005446:	9215      	str	r2, [sp, #84]	; 0x54
 8005448:	f7fa fe82 	bl	8000150 <strlen>
 800544c:	f04f 0800 	mov.w	r8, #0
 8005450:	4604      	mov	r4, r0
 8005452:	f04f 0900 	mov.w	r9, #0
 8005456:	9619      	str	r6, [sp, #100]	; 0x64
 8005458:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800545a:	781a      	ldrb	r2, [r3, #0]
 800545c:	2a2b      	cmp	r2, #43	; 0x2b
 800545e:	d04c      	beq.n	80054fa <_strtod_l+0xca>
 8005460:	d83a      	bhi.n	80054d8 <_strtod_l+0xa8>
 8005462:	2a0d      	cmp	r2, #13
 8005464:	d833      	bhi.n	80054ce <_strtod_l+0x9e>
 8005466:	2a08      	cmp	r2, #8
 8005468:	d833      	bhi.n	80054d2 <_strtod_l+0xa2>
 800546a:	2a00      	cmp	r2, #0
 800546c:	d03d      	beq.n	80054ea <_strtod_l+0xba>
 800546e:	2300      	movs	r3, #0
 8005470:	930a      	str	r3, [sp, #40]	; 0x28
 8005472:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005474:	782b      	ldrb	r3, [r5, #0]
 8005476:	2b30      	cmp	r3, #48	; 0x30
 8005478:	f040 80aa 	bne.w	80055d0 <_strtod_l+0x1a0>
 800547c:	786b      	ldrb	r3, [r5, #1]
 800547e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005482:	2b58      	cmp	r3, #88	; 0x58
 8005484:	d166      	bne.n	8005554 <_strtod_l+0x124>
 8005486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005488:	4650      	mov	r0, sl
 800548a:	9301      	str	r3, [sp, #4]
 800548c:	ab1a      	add	r3, sp, #104	; 0x68
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	4a8a      	ldr	r2, [pc, #552]	; (80056bc <_strtod_l+0x28c>)
 8005492:	f8cd b008 	str.w	fp, [sp, #8]
 8005496:	ab1b      	add	r3, sp, #108	; 0x6c
 8005498:	a919      	add	r1, sp, #100	; 0x64
 800549a:	f001 fd17 	bl	8006ecc <__gethex>
 800549e:	f010 0607 	ands.w	r6, r0, #7
 80054a2:	4604      	mov	r4, r0
 80054a4:	d005      	beq.n	80054b2 <_strtod_l+0x82>
 80054a6:	2e06      	cmp	r6, #6
 80054a8:	d129      	bne.n	80054fe <_strtod_l+0xce>
 80054aa:	2300      	movs	r3, #0
 80054ac:	3501      	adds	r5, #1
 80054ae:	9519      	str	r5, [sp, #100]	; 0x64
 80054b0:	930a      	str	r3, [sp, #40]	; 0x28
 80054b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f040 858a 	bne.w	8005fce <_strtod_l+0xb9e>
 80054ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054bc:	b1d3      	cbz	r3, 80054f4 <_strtod_l+0xc4>
 80054be:	4642      	mov	r2, r8
 80054c0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80054c4:	4610      	mov	r0, r2
 80054c6:	4619      	mov	r1, r3
 80054c8:	b01f      	add	sp, #124	; 0x7c
 80054ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ce:	2a20      	cmp	r2, #32
 80054d0:	d1cd      	bne.n	800546e <_strtod_l+0x3e>
 80054d2:	3301      	adds	r3, #1
 80054d4:	9319      	str	r3, [sp, #100]	; 0x64
 80054d6:	e7bf      	b.n	8005458 <_strtod_l+0x28>
 80054d8:	2a2d      	cmp	r2, #45	; 0x2d
 80054da:	d1c8      	bne.n	800546e <_strtod_l+0x3e>
 80054dc:	2201      	movs	r2, #1
 80054de:	920a      	str	r2, [sp, #40]	; 0x28
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	9219      	str	r2, [sp, #100]	; 0x64
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1c3      	bne.n	8005472 <_strtod_l+0x42>
 80054ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80054ec:	9619      	str	r6, [sp, #100]	; 0x64
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f040 856b 	bne.w	8005fca <_strtod_l+0xb9a>
 80054f4:	4642      	mov	r2, r8
 80054f6:	464b      	mov	r3, r9
 80054f8:	e7e4      	b.n	80054c4 <_strtod_l+0x94>
 80054fa:	2200      	movs	r2, #0
 80054fc:	e7ef      	b.n	80054de <_strtod_l+0xae>
 80054fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005500:	b13a      	cbz	r2, 8005512 <_strtod_l+0xe2>
 8005502:	2135      	movs	r1, #53	; 0x35
 8005504:	a81c      	add	r0, sp, #112	; 0x70
 8005506:	f002 fc8d 	bl	8007e24 <__copybits>
 800550a:	4650      	mov	r0, sl
 800550c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800550e:	f002 f855 	bl	80075bc <_Bfree>
 8005512:	3e01      	subs	r6, #1
 8005514:	2e04      	cmp	r6, #4
 8005516:	d806      	bhi.n	8005526 <_strtod_l+0xf6>
 8005518:	e8df f006 	tbb	[pc, r6]
 800551c:	1714030a 	.word	0x1714030a
 8005520:	0a          	.byte	0x0a
 8005521:	00          	.byte	0x00
 8005522:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005526:	0721      	lsls	r1, r4, #28
 8005528:	d5c3      	bpl.n	80054b2 <_strtod_l+0x82>
 800552a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800552e:	e7c0      	b.n	80054b2 <_strtod_l+0x82>
 8005530:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005532:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005536:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800553a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800553e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005542:	e7f0      	b.n	8005526 <_strtod_l+0xf6>
 8005544:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80056c0 <_strtod_l+0x290>
 8005548:	e7ed      	b.n	8005526 <_strtod_l+0xf6>
 800554a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800554e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005552:	e7e8      	b.n	8005526 <_strtod_l+0xf6>
 8005554:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	9219      	str	r2, [sp, #100]	; 0x64
 800555a:	785b      	ldrb	r3, [r3, #1]
 800555c:	2b30      	cmp	r3, #48	; 0x30
 800555e:	d0f9      	beq.n	8005554 <_strtod_l+0x124>
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0a6      	beq.n	80054b2 <_strtod_l+0x82>
 8005564:	2301      	movs	r3, #1
 8005566:	9307      	str	r3, [sp, #28]
 8005568:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800556a:	220a      	movs	r2, #10
 800556c:	9308      	str	r3, [sp, #32]
 800556e:	2300      	movs	r3, #0
 8005570:	469b      	mov	fp, r3
 8005572:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005576:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005578:	7805      	ldrb	r5, [r0, #0]
 800557a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800557e:	b2d9      	uxtb	r1, r3
 8005580:	2909      	cmp	r1, #9
 8005582:	d927      	bls.n	80055d4 <_strtod_l+0x1a4>
 8005584:	4622      	mov	r2, r4
 8005586:	4639      	mov	r1, r7
 8005588:	f002 fef2 	bl	8008370 <strncmp>
 800558c:	2800      	cmp	r0, #0
 800558e:	d033      	beq.n	80055f8 <_strtod_l+0x1c8>
 8005590:	2000      	movs	r0, #0
 8005592:	462a      	mov	r2, r5
 8005594:	465c      	mov	r4, fp
 8005596:	4603      	mov	r3, r0
 8005598:	9004      	str	r0, [sp, #16]
 800559a:	2a65      	cmp	r2, #101	; 0x65
 800559c:	d001      	beq.n	80055a2 <_strtod_l+0x172>
 800559e:	2a45      	cmp	r2, #69	; 0x45
 80055a0:	d114      	bne.n	80055cc <_strtod_l+0x19c>
 80055a2:	b91c      	cbnz	r4, 80055ac <_strtod_l+0x17c>
 80055a4:	9a07      	ldr	r2, [sp, #28]
 80055a6:	4302      	orrs	r2, r0
 80055a8:	d09f      	beq.n	80054ea <_strtod_l+0xba>
 80055aa:	2400      	movs	r4, #0
 80055ac:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80055ae:	1c72      	adds	r2, r6, #1
 80055b0:	9219      	str	r2, [sp, #100]	; 0x64
 80055b2:	7872      	ldrb	r2, [r6, #1]
 80055b4:	2a2b      	cmp	r2, #43	; 0x2b
 80055b6:	d079      	beq.n	80056ac <_strtod_l+0x27c>
 80055b8:	2a2d      	cmp	r2, #45	; 0x2d
 80055ba:	f000 8083 	beq.w	80056c4 <_strtod_l+0x294>
 80055be:	2700      	movs	r7, #0
 80055c0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80055c4:	2909      	cmp	r1, #9
 80055c6:	f240 8083 	bls.w	80056d0 <_strtod_l+0x2a0>
 80055ca:	9619      	str	r6, [sp, #100]	; 0x64
 80055cc:	2500      	movs	r5, #0
 80055ce:	e09f      	b.n	8005710 <_strtod_l+0x2e0>
 80055d0:	2300      	movs	r3, #0
 80055d2:	e7c8      	b.n	8005566 <_strtod_l+0x136>
 80055d4:	f1bb 0f08 	cmp.w	fp, #8
 80055d8:	bfd5      	itete	le
 80055da:	9906      	ldrle	r1, [sp, #24]
 80055dc:	9905      	ldrgt	r1, [sp, #20]
 80055de:	fb02 3301 	mlale	r3, r2, r1, r3
 80055e2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80055e6:	f100 0001 	add.w	r0, r0, #1
 80055ea:	bfd4      	ite	le
 80055ec:	9306      	strle	r3, [sp, #24]
 80055ee:	9305      	strgt	r3, [sp, #20]
 80055f0:	f10b 0b01 	add.w	fp, fp, #1
 80055f4:	9019      	str	r0, [sp, #100]	; 0x64
 80055f6:	e7be      	b.n	8005576 <_strtod_l+0x146>
 80055f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80055fa:	191a      	adds	r2, r3, r4
 80055fc:	9219      	str	r2, [sp, #100]	; 0x64
 80055fe:	5d1a      	ldrb	r2, [r3, r4]
 8005600:	f1bb 0f00 	cmp.w	fp, #0
 8005604:	d036      	beq.n	8005674 <_strtod_l+0x244>
 8005606:	465c      	mov	r4, fp
 8005608:	9004      	str	r0, [sp, #16]
 800560a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800560e:	2b09      	cmp	r3, #9
 8005610:	d912      	bls.n	8005638 <_strtod_l+0x208>
 8005612:	2301      	movs	r3, #1
 8005614:	e7c1      	b.n	800559a <_strtod_l+0x16a>
 8005616:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005618:	3001      	adds	r0, #1
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	9219      	str	r2, [sp, #100]	; 0x64
 800561e:	785a      	ldrb	r2, [r3, #1]
 8005620:	2a30      	cmp	r2, #48	; 0x30
 8005622:	d0f8      	beq.n	8005616 <_strtod_l+0x1e6>
 8005624:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005628:	2b08      	cmp	r3, #8
 800562a:	f200 84d5 	bhi.w	8005fd8 <_strtod_l+0xba8>
 800562e:	9004      	str	r0, [sp, #16]
 8005630:	2000      	movs	r0, #0
 8005632:	4604      	mov	r4, r0
 8005634:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005636:	9308      	str	r3, [sp, #32]
 8005638:	3a30      	subs	r2, #48	; 0x30
 800563a:	f100 0301 	add.w	r3, r0, #1
 800563e:	d013      	beq.n	8005668 <_strtod_l+0x238>
 8005640:	9904      	ldr	r1, [sp, #16]
 8005642:	1905      	adds	r5, r0, r4
 8005644:	4419      	add	r1, r3
 8005646:	9104      	str	r1, [sp, #16]
 8005648:	4623      	mov	r3, r4
 800564a:	210a      	movs	r1, #10
 800564c:	42ab      	cmp	r3, r5
 800564e:	d113      	bne.n	8005678 <_strtod_l+0x248>
 8005650:	1823      	adds	r3, r4, r0
 8005652:	2b08      	cmp	r3, #8
 8005654:	f104 0401 	add.w	r4, r4, #1
 8005658:	4404      	add	r4, r0
 800565a:	dc1b      	bgt.n	8005694 <_strtod_l+0x264>
 800565c:	230a      	movs	r3, #10
 800565e:	9906      	ldr	r1, [sp, #24]
 8005660:	fb03 2301 	mla	r3, r3, r1, r2
 8005664:	9306      	str	r3, [sp, #24]
 8005666:	2300      	movs	r3, #0
 8005668:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800566a:	4618      	mov	r0, r3
 800566c:	1c51      	adds	r1, r2, #1
 800566e:	9119      	str	r1, [sp, #100]	; 0x64
 8005670:	7852      	ldrb	r2, [r2, #1]
 8005672:	e7ca      	b.n	800560a <_strtod_l+0x1da>
 8005674:	4658      	mov	r0, fp
 8005676:	e7d3      	b.n	8005620 <_strtod_l+0x1f0>
 8005678:	2b08      	cmp	r3, #8
 800567a:	dc04      	bgt.n	8005686 <_strtod_l+0x256>
 800567c:	9f06      	ldr	r7, [sp, #24]
 800567e:	434f      	muls	r7, r1
 8005680:	9706      	str	r7, [sp, #24]
 8005682:	3301      	adds	r3, #1
 8005684:	e7e2      	b.n	800564c <_strtod_l+0x21c>
 8005686:	1c5f      	adds	r7, r3, #1
 8005688:	2f10      	cmp	r7, #16
 800568a:	bfde      	ittt	le
 800568c:	9f05      	ldrle	r7, [sp, #20]
 800568e:	434f      	mulle	r7, r1
 8005690:	9705      	strle	r7, [sp, #20]
 8005692:	e7f6      	b.n	8005682 <_strtod_l+0x252>
 8005694:	2c10      	cmp	r4, #16
 8005696:	bfdf      	itttt	le
 8005698:	230a      	movle	r3, #10
 800569a:	9905      	ldrle	r1, [sp, #20]
 800569c:	fb03 2301 	mlale	r3, r3, r1, r2
 80056a0:	9305      	strle	r3, [sp, #20]
 80056a2:	e7e0      	b.n	8005666 <_strtod_l+0x236>
 80056a4:	2300      	movs	r3, #0
 80056a6:	9304      	str	r3, [sp, #16]
 80056a8:	2301      	movs	r3, #1
 80056aa:	e77b      	b.n	80055a4 <_strtod_l+0x174>
 80056ac:	2700      	movs	r7, #0
 80056ae:	1cb2      	adds	r2, r6, #2
 80056b0:	9219      	str	r2, [sp, #100]	; 0x64
 80056b2:	78b2      	ldrb	r2, [r6, #2]
 80056b4:	e784      	b.n	80055c0 <_strtod_l+0x190>
 80056b6:	bf00      	nop
 80056b8:	08009980 	.word	0x08009980
 80056bc:	08009738 	.word	0x08009738
 80056c0:	7ff00000 	.word	0x7ff00000
 80056c4:	2701      	movs	r7, #1
 80056c6:	e7f2      	b.n	80056ae <_strtod_l+0x27e>
 80056c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80056ca:	1c51      	adds	r1, r2, #1
 80056cc:	9119      	str	r1, [sp, #100]	; 0x64
 80056ce:	7852      	ldrb	r2, [r2, #1]
 80056d0:	2a30      	cmp	r2, #48	; 0x30
 80056d2:	d0f9      	beq.n	80056c8 <_strtod_l+0x298>
 80056d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80056d8:	2908      	cmp	r1, #8
 80056da:	f63f af77 	bhi.w	80055cc <_strtod_l+0x19c>
 80056de:	f04f 0e0a 	mov.w	lr, #10
 80056e2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80056e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80056e8:	9209      	str	r2, [sp, #36]	; 0x24
 80056ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80056ec:	1c51      	adds	r1, r2, #1
 80056ee:	9119      	str	r1, [sp, #100]	; 0x64
 80056f0:	7852      	ldrb	r2, [r2, #1]
 80056f2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80056f6:	2d09      	cmp	r5, #9
 80056f8:	d935      	bls.n	8005766 <_strtod_l+0x336>
 80056fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80056fc:	1b49      	subs	r1, r1, r5
 80056fe:	2908      	cmp	r1, #8
 8005700:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005704:	dc02      	bgt.n	800570c <_strtod_l+0x2dc>
 8005706:	4565      	cmp	r5, ip
 8005708:	bfa8      	it	ge
 800570a:	4665      	movge	r5, ip
 800570c:	b107      	cbz	r7, 8005710 <_strtod_l+0x2e0>
 800570e:	426d      	negs	r5, r5
 8005710:	2c00      	cmp	r4, #0
 8005712:	d14c      	bne.n	80057ae <_strtod_l+0x37e>
 8005714:	9907      	ldr	r1, [sp, #28]
 8005716:	4301      	orrs	r1, r0
 8005718:	f47f aecb 	bne.w	80054b2 <_strtod_l+0x82>
 800571c:	2b00      	cmp	r3, #0
 800571e:	f47f aee4 	bne.w	80054ea <_strtod_l+0xba>
 8005722:	2a69      	cmp	r2, #105	; 0x69
 8005724:	d026      	beq.n	8005774 <_strtod_l+0x344>
 8005726:	dc23      	bgt.n	8005770 <_strtod_l+0x340>
 8005728:	2a49      	cmp	r2, #73	; 0x49
 800572a:	d023      	beq.n	8005774 <_strtod_l+0x344>
 800572c:	2a4e      	cmp	r2, #78	; 0x4e
 800572e:	f47f aedc 	bne.w	80054ea <_strtod_l+0xba>
 8005732:	499d      	ldr	r1, [pc, #628]	; (80059a8 <_strtod_l+0x578>)
 8005734:	a819      	add	r0, sp, #100	; 0x64
 8005736:	f001 fe17 	bl	8007368 <__match>
 800573a:	2800      	cmp	r0, #0
 800573c:	f43f aed5 	beq.w	80054ea <_strtod_l+0xba>
 8005740:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b28      	cmp	r3, #40	; 0x28
 8005746:	d12c      	bne.n	80057a2 <_strtod_l+0x372>
 8005748:	4998      	ldr	r1, [pc, #608]	; (80059ac <_strtod_l+0x57c>)
 800574a:	aa1c      	add	r2, sp, #112	; 0x70
 800574c:	a819      	add	r0, sp, #100	; 0x64
 800574e:	f001 fe1f 	bl	8007390 <__hexnan>
 8005752:	2805      	cmp	r0, #5
 8005754:	d125      	bne.n	80057a2 <_strtod_l+0x372>
 8005756:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005758:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800575c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005760:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005764:	e6a5      	b.n	80054b2 <_strtod_l+0x82>
 8005766:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800576a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800576e:	e7bc      	b.n	80056ea <_strtod_l+0x2ba>
 8005770:	2a6e      	cmp	r2, #110	; 0x6e
 8005772:	e7dc      	b.n	800572e <_strtod_l+0x2fe>
 8005774:	498e      	ldr	r1, [pc, #568]	; (80059b0 <_strtod_l+0x580>)
 8005776:	a819      	add	r0, sp, #100	; 0x64
 8005778:	f001 fdf6 	bl	8007368 <__match>
 800577c:	2800      	cmp	r0, #0
 800577e:	f43f aeb4 	beq.w	80054ea <_strtod_l+0xba>
 8005782:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005784:	498b      	ldr	r1, [pc, #556]	; (80059b4 <_strtod_l+0x584>)
 8005786:	3b01      	subs	r3, #1
 8005788:	a819      	add	r0, sp, #100	; 0x64
 800578a:	9319      	str	r3, [sp, #100]	; 0x64
 800578c:	f001 fdec 	bl	8007368 <__match>
 8005790:	b910      	cbnz	r0, 8005798 <_strtod_l+0x368>
 8005792:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005794:	3301      	adds	r3, #1
 8005796:	9319      	str	r3, [sp, #100]	; 0x64
 8005798:	f04f 0800 	mov.w	r8, #0
 800579c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80059b8 <_strtod_l+0x588>
 80057a0:	e687      	b.n	80054b2 <_strtod_l+0x82>
 80057a2:	4886      	ldr	r0, [pc, #536]	; (80059bc <_strtod_l+0x58c>)
 80057a4:	f002 fdce 	bl	8008344 <nan>
 80057a8:	4680      	mov	r8, r0
 80057aa:	4689      	mov	r9, r1
 80057ac:	e681      	b.n	80054b2 <_strtod_l+0x82>
 80057ae:	9b04      	ldr	r3, [sp, #16]
 80057b0:	f1bb 0f00 	cmp.w	fp, #0
 80057b4:	bf08      	it	eq
 80057b6:	46a3      	moveq	fp, r4
 80057b8:	1aeb      	subs	r3, r5, r3
 80057ba:	2c10      	cmp	r4, #16
 80057bc:	9806      	ldr	r0, [sp, #24]
 80057be:	4626      	mov	r6, r4
 80057c0:	9307      	str	r3, [sp, #28]
 80057c2:	bfa8      	it	ge
 80057c4:	2610      	movge	r6, #16
 80057c6:	f7fa fe0d 	bl	80003e4 <__aeabi_ui2d>
 80057ca:	2c09      	cmp	r4, #9
 80057cc:	4680      	mov	r8, r0
 80057ce:	4689      	mov	r9, r1
 80057d0:	dd13      	ble.n	80057fa <_strtod_l+0x3ca>
 80057d2:	4b7b      	ldr	r3, [pc, #492]	; (80059c0 <_strtod_l+0x590>)
 80057d4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80057d8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80057dc:	f7fa fe7c 	bl	80004d8 <__aeabi_dmul>
 80057e0:	4680      	mov	r8, r0
 80057e2:	9805      	ldr	r0, [sp, #20]
 80057e4:	4689      	mov	r9, r1
 80057e6:	f7fa fdfd 	bl	80003e4 <__aeabi_ui2d>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	4640      	mov	r0, r8
 80057f0:	4649      	mov	r1, r9
 80057f2:	f7fa fcbb 	bl	800016c <__adddf3>
 80057f6:	4680      	mov	r8, r0
 80057f8:	4689      	mov	r9, r1
 80057fa:	2c0f      	cmp	r4, #15
 80057fc:	dc36      	bgt.n	800586c <_strtod_l+0x43c>
 80057fe:	9b07      	ldr	r3, [sp, #28]
 8005800:	2b00      	cmp	r3, #0
 8005802:	f43f ae56 	beq.w	80054b2 <_strtod_l+0x82>
 8005806:	dd22      	ble.n	800584e <_strtod_l+0x41e>
 8005808:	2b16      	cmp	r3, #22
 800580a:	dc09      	bgt.n	8005820 <_strtod_l+0x3f0>
 800580c:	496c      	ldr	r1, [pc, #432]	; (80059c0 <_strtod_l+0x590>)
 800580e:	4642      	mov	r2, r8
 8005810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005814:	464b      	mov	r3, r9
 8005816:	e9d1 0100 	ldrd	r0, r1, [r1]
 800581a:	f7fa fe5d 	bl	80004d8 <__aeabi_dmul>
 800581e:	e7c3      	b.n	80057a8 <_strtod_l+0x378>
 8005820:	9a07      	ldr	r2, [sp, #28]
 8005822:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005826:	4293      	cmp	r3, r2
 8005828:	db20      	blt.n	800586c <_strtod_l+0x43c>
 800582a:	4d65      	ldr	r5, [pc, #404]	; (80059c0 <_strtod_l+0x590>)
 800582c:	f1c4 040f 	rsb	r4, r4, #15
 8005830:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005834:	4642      	mov	r2, r8
 8005836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800583a:	464b      	mov	r3, r9
 800583c:	f7fa fe4c 	bl	80004d8 <__aeabi_dmul>
 8005840:	9b07      	ldr	r3, [sp, #28]
 8005842:	1b1c      	subs	r4, r3, r4
 8005844:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005848:	e9d5 2300 	ldrd	r2, r3, [r5]
 800584c:	e7e5      	b.n	800581a <_strtod_l+0x3ea>
 800584e:	9b07      	ldr	r3, [sp, #28]
 8005850:	3316      	adds	r3, #22
 8005852:	db0b      	blt.n	800586c <_strtod_l+0x43c>
 8005854:	9b04      	ldr	r3, [sp, #16]
 8005856:	4640      	mov	r0, r8
 8005858:	1b5d      	subs	r5, r3, r5
 800585a:	4b59      	ldr	r3, [pc, #356]	; (80059c0 <_strtod_l+0x590>)
 800585c:	4649      	mov	r1, r9
 800585e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005862:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005866:	f7fa ff61 	bl	800072c <__aeabi_ddiv>
 800586a:	e79d      	b.n	80057a8 <_strtod_l+0x378>
 800586c:	9b07      	ldr	r3, [sp, #28]
 800586e:	1ba6      	subs	r6, r4, r6
 8005870:	441e      	add	r6, r3
 8005872:	2e00      	cmp	r6, #0
 8005874:	dd74      	ble.n	8005960 <_strtod_l+0x530>
 8005876:	f016 030f 	ands.w	r3, r6, #15
 800587a:	d00a      	beq.n	8005892 <_strtod_l+0x462>
 800587c:	4950      	ldr	r1, [pc, #320]	; (80059c0 <_strtod_l+0x590>)
 800587e:	4642      	mov	r2, r8
 8005880:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005888:	464b      	mov	r3, r9
 800588a:	f7fa fe25 	bl	80004d8 <__aeabi_dmul>
 800588e:	4680      	mov	r8, r0
 8005890:	4689      	mov	r9, r1
 8005892:	f036 060f 	bics.w	r6, r6, #15
 8005896:	d052      	beq.n	800593e <_strtod_l+0x50e>
 8005898:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800589c:	dd27      	ble.n	80058ee <_strtod_l+0x4be>
 800589e:	f04f 0b00 	mov.w	fp, #0
 80058a2:	f8cd b010 	str.w	fp, [sp, #16]
 80058a6:	f8cd b020 	str.w	fp, [sp, #32]
 80058aa:	f8cd b018 	str.w	fp, [sp, #24]
 80058ae:	2322      	movs	r3, #34	; 0x22
 80058b0:	f04f 0800 	mov.w	r8, #0
 80058b4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80059b8 <_strtod_l+0x588>
 80058b8:	f8ca 3000 	str.w	r3, [sl]
 80058bc:	9b08      	ldr	r3, [sp, #32]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f43f adf7 	beq.w	80054b2 <_strtod_l+0x82>
 80058c4:	4650      	mov	r0, sl
 80058c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80058c8:	f001 fe78 	bl	80075bc <_Bfree>
 80058cc:	4650      	mov	r0, sl
 80058ce:	9906      	ldr	r1, [sp, #24]
 80058d0:	f001 fe74 	bl	80075bc <_Bfree>
 80058d4:	4650      	mov	r0, sl
 80058d6:	9904      	ldr	r1, [sp, #16]
 80058d8:	f001 fe70 	bl	80075bc <_Bfree>
 80058dc:	4650      	mov	r0, sl
 80058de:	9908      	ldr	r1, [sp, #32]
 80058e0:	f001 fe6c 	bl	80075bc <_Bfree>
 80058e4:	4659      	mov	r1, fp
 80058e6:	4650      	mov	r0, sl
 80058e8:	f001 fe68 	bl	80075bc <_Bfree>
 80058ec:	e5e1      	b.n	80054b2 <_strtod_l+0x82>
 80058ee:	4b35      	ldr	r3, [pc, #212]	; (80059c4 <_strtod_l+0x594>)
 80058f0:	4640      	mov	r0, r8
 80058f2:	9305      	str	r3, [sp, #20]
 80058f4:	2300      	movs	r3, #0
 80058f6:	4649      	mov	r1, r9
 80058f8:	461f      	mov	r7, r3
 80058fa:	1136      	asrs	r6, r6, #4
 80058fc:	2e01      	cmp	r6, #1
 80058fe:	dc21      	bgt.n	8005944 <_strtod_l+0x514>
 8005900:	b10b      	cbz	r3, 8005906 <_strtod_l+0x4d6>
 8005902:	4680      	mov	r8, r0
 8005904:	4689      	mov	r9, r1
 8005906:	4b2f      	ldr	r3, [pc, #188]	; (80059c4 <_strtod_l+0x594>)
 8005908:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800590c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005910:	4642      	mov	r2, r8
 8005912:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005916:	464b      	mov	r3, r9
 8005918:	f7fa fdde 	bl	80004d8 <__aeabi_dmul>
 800591c:	4b26      	ldr	r3, [pc, #152]	; (80059b8 <_strtod_l+0x588>)
 800591e:	460a      	mov	r2, r1
 8005920:	400b      	ands	r3, r1
 8005922:	4929      	ldr	r1, [pc, #164]	; (80059c8 <_strtod_l+0x598>)
 8005924:	4680      	mov	r8, r0
 8005926:	428b      	cmp	r3, r1
 8005928:	d8b9      	bhi.n	800589e <_strtod_l+0x46e>
 800592a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800592e:	428b      	cmp	r3, r1
 8005930:	bf86      	itte	hi
 8005932:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8005936:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80059cc <_strtod_l+0x59c>
 800593a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800593e:	2300      	movs	r3, #0
 8005940:	9305      	str	r3, [sp, #20]
 8005942:	e07f      	b.n	8005a44 <_strtod_l+0x614>
 8005944:	07f2      	lsls	r2, r6, #31
 8005946:	d505      	bpl.n	8005954 <_strtod_l+0x524>
 8005948:	9b05      	ldr	r3, [sp, #20]
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	f7fa fdc3 	bl	80004d8 <__aeabi_dmul>
 8005952:	2301      	movs	r3, #1
 8005954:	9a05      	ldr	r2, [sp, #20]
 8005956:	3701      	adds	r7, #1
 8005958:	3208      	adds	r2, #8
 800595a:	1076      	asrs	r6, r6, #1
 800595c:	9205      	str	r2, [sp, #20]
 800595e:	e7cd      	b.n	80058fc <_strtod_l+0x4cc>
 8005960:	d0ed      	beq.n	800593e <_strtod_l+0x50e>
 8005962:	4276      	negs	r6, r6
 8005964:	f016 020f 	ands.w	r2, r6, #15
 8005968:	d00a      	beq.n	8005980 <_strtod_l+0x550>
 800596a:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <_strtod_l+0x590>)
 800596c:	4640      	mov	r0, r8
 800596e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005972:	4649      	mov	r1, r9
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	f7fa fed8 	bl	800072c <__aeabi_ddiv>
 800597c:	4680      	mov	r8, r0
 800597e:	4689      	mov	r9, r1
 8005980:	1136      	asrs	r6, r6, #4
 8005982:	d0dc      	beq.n	800593e <_strtod_l+0x50e>
 8005984:	2e1f      	cmp	r6, #31
 8005986:	dd23      	ble.n	80059d0 <_strtod_l+0x5a0>
 8005988:	f04f 0b00 	mov.w	fp, #0
 800598c:	f8cd b010 	str.w	fp, [sp, #16]
 8005990:	f8cd b020 	str.w	fp, [sp, #32]
 8005994:	f8cd b018 	str.w	fp, [sp, #24]
 8005998:	2322      	movs	r3, #34	; 0x22
 800599a:	f04f 0800 	mov.w	r8, #0
 800599e:	f04f 0900 	mov.w	r9, #0
 80059a2:	f8ca 3000 	str.w	r3, [sl]
 80059a6:	e789      	b.n	80058bc <_strtod_l+0x48c>
 80059a8:	08009709 	.word	0x08009709
 80059ac:	0800974c 	.word	0x0800974c
 80059b0:	08009701 	.word	0x08009701
 80059b4:	0800988c 	.word	0x0800988c
 80059b8:	7ff00000 	.word	0x7ff00000
 80059bc:	08009b38 	.word	0x08009b38
 80059c0:	08009a18 	.word	0x08009a18
 80059c4:	080099f0 	.word	0x080099f0
 80059c8:	7ca00000 	.word	0x7ca00000
 80059cc:	7fefffff 	.word	0x7fefffff
 80059d0:	f016 0310 	ands.w	r3, r6, #16
 80059d4:	bf18      	it	ne
 80059d6:	236a      	movne	r3, #106	; 0x6a
 80059d8:	4640      	mov	r0, r8
 80059da:	9305      	str	r3, [sp, #20]
 80059dc:	4649      	mov	r1, r9
 80059de:	2300      	movs	r3, #0
 80059e0:	4fb0      	ldr	r7, [pc, #704]	; (8005ca4 <_strtod_l+0x874>)
 80059e2:	07f2      	lsls	r2, r6, #31
 80059e4:	d504      	bpl.n	80059f0 <_strtod_l+0x5c0>
 80059e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ea:	f7fa fd75 	bl	80004d8 <__aeabi_dmul>
 80059ee:	2301      	movs	r3, #1
 80059f0:	1076      	asrs	r6, r6, #1
 80059f2:	f107 0708 	add.w	r7, r7, #8
 80059f6:	d1f4      	bne.n	80059e2 <_strtod_l+0x5b2>
 80059f8:	b10b      	cbz	r3, 80059fe <_strtod_l+0x5ce>
 80059fa:	4680      	mov	r8, r0
 80059fc:	4689      	mov	r9, r1
 80059fe:	9b05      	ldr	r3, [sp, #20]
 8005a00:	b1c3      	cbz	r3, 8005a34 <_strtod_l+0x604>
 8005a02:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005a06:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	4649      	mov	r1, r9
 8005a0e:	dd11      	ble.n	8005a34 <_strtod_l+0x604>
 8005a10:	2b1f      	cmp	r3, #31
 8005a12:	f340 8127 	ble.w	8005c64 <_strtod_l+0x834>
 8005a16:	2b34      	cmp	r3, #52	; 0x34
 8005a18:	bfd8      	it	le
 8005a1a:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005a1e:	f04f 0800 	mov.w	r8, #0
 8005a22:	bfcf      	iteee	gt
 8005a24:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005a28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005a2c:	fa03 f202 	lslle.w	r2, r3, r2
 8005a30:	ea02 0901 	andle.w	r9, r2, r1
 8005a34:	2200      	movs	r2, #0
 8005a36:	2300      	movs	r3, #0
 8005a38:	4640      	mov	r0, r8
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	f7fa ffb4 	bl	80009a8 <__aeabi_dcmpeq>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d1a1      	bne.n	8005988 <_strtod_l+0x558>
 8005a44:	9b06      	ldr	r3, [sp, #24]
 8005a46:	465a      	mov	r2, fp
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	4650      	mov	r0, sl
 8005a4c:	4623      	mov	r3, r4
 8005a4e:	9908      	ldr	r1, [sp, #32]
 8005a50:	f001 fe1c 	bl	800768c <__s2b>
 8005a54:	9008      	str	r0, [sp, #32]
 8005a56:	2800      	cmp	r0, #0
 8005a58:	f43f af21 	beq.w	800589e <_strtod_l+0x46e>
 8005a5c:	9b04      	ldr	r3, [sp, #16]
 8005a5e:	f04f 0b00 	mov.w	fp, #0
 8005a62:	1b5d      	subs	r5, r3, r5
 8005a64:	9b07      	ldr	r3, [sp, #28]
 8005a66:	f8cd b010 	str.w	fp, [sp, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	bfb4      	ite	lt
 8005a6e:	462b      	movlt	r3, r5
 8005a70:	2300      	movge	r3, #0
 8005a72:	930e      	str	r3, [sp, #56]	; 0x38
 8005a74:	9b07      	ldr	r3, [sp, #28]
 8005a76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005a7a:	9314      	str	r3, [sp, #80]	; 0x50
 8005a7c:	9b08      	ldr	r3, [sp, #32]
 8005a7e:	4650      	mov	r0, sl
 8005a80:	6859      	ldr	r1, [r3, #4]
 8005a82:	f001 fd5b 	bl	800753c <_Balloc>
 8005a86:	9006      	str	r0, [sp, #24]
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	f43f af10 	beq.w	80058ae <_strtod_l+0x47e>
 8005a8e:	9b08      	ldr	r3, [sp, #32]
 8005a90:	300c      	adds	r0, #12
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	f103 010c 	add.w	r1, r3, #12
 8005a98:	3202      	adds	r2, #2
 8005a9a:	0092      	lsls	r2, r2, #2
 8005a9c:	f001 fd40 	bl	8007520 <memcpy>
 8005aa0:	ab1c      	add	r3, sp, #112	; 0x70
 8005aa2:	9301      	str	r3, [sp, #4]
 8005aa4:	ab1b      	add	r3, sp, #108	; 0x6c
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	4642      	mov	r2, r8
 8005aaa:	464b      	mov	r3, r9
 8005aac:	4650      	mov	r0, sl
 8005aae:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005ab2:	f002 f92d 	bl	8007d10 <__d2b>
 8005ab6:	901a      	str	r0, [sp, #104]	; 0x68
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	f43f aef8 	beq.w	80058ae <_strtod_l+0x47e>
 8005abe:	2101      	movs	r1, #1
 8005ac0:	4650      	mov	r0, sl
 8005ac2:	f001 fe7b 	bl	80077bc <__i2b>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	9004      	str	r0, [sp, #16]
 8005aca:	2800      	cmp	r0, #0
 8005acc:	f43f aeef 	beq.w	80058ae <_strtod_l+0x47e>
 8005ad0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005ad2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005ad4:	2d00      	cmp	r5, #0
 8005ad6:	bfab      	itete	ge
 8005ad8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005ada:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8005adc:	18ee      	addge	r6, r5, r3
 8005ade:	1b5c      	sublt	r4, r3, r5
 8005ae0:	9b05      	ldr	r3, [sp, #20]
 8005ae2:	bfa8      	it	ge
 8005ae4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005ae6:	eba5 0503 	sub.w	r5, r5, r3
 8005aea:	4415      	add	r5, r2
 8005aec:	4b6e      	ldr	r3, [pc, #440]	; (8005ca8 <_strtod_l+0x878>)
 8005aee:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8005af2:	bfb8      	it	lt
 8005af4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005af6:	429d      	cmp	r5, r3
 8005af8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005afc:	f280 80c4 	bge.w	8005c88 <_strtod_l+0x858>
 8005b00:	1b5b      	subs	r3, r3, r5
 8005b02:	2b1f      	cmp	r3, #31
 8005b04:	f04f 0701 	mov.w	r7, #1
 8005b08:	eba2 0203 	sub.w	r2, r2, r3
 8005b0c:	f300 80b1 	bgt.w	8005c72 <_strtod_l+0x842>
 8005b10:	2500      	movs	r5, #0
 8005b12:	fa07 f303 	lsl.w	r3, r7, r3
 8005b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b18:	18b7      	adds	r7, r6, r2
 8005b1a:	9b05      	ldr	r3, [sp, #20]
 8005b1c:	42be      	cmp	r6, r7
 8005b1e:	4414      	add	r4, r2
 8005b20:	441c      	add	r4, r3
 8005b22:	4633      	mov	r3, r6
 8005b24:	bfa8      	it	ge
 8005b26:	463b      	movge	r3, r7
 8005b28:	42a3      	cmp	r3, r4
 8005b2a:	bfa8      	it	ge
 8005b2c:	4623      	movge	r3, r4
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	bfc2      	ittt	gt
 8005b32:	1aff      	subgt	r7, r7, r3
 8005b34:	1ae4      	subgt	r4, r4, r3
 8005b36:	1af6      	subgt	r6, r6, r3
 8005b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	dd17      	ble.n	8005b6e <_strtod_l+0x73e>
 8005b3e:	461a      	mov	r2, r3
 8005b40:	4650      	mov	r0, sl
 8005b42:	9904      	ldr	r1, [sp, #16]
 8005b44:	f001 fef8 	bl	8007938 <__pow5mult>
 8005b48:	9004      	str	r0, [sp, #16]
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	f43f aeaf 	beq.w	80058ae <_strtod_l+0x47e>
 8005b50:	4601      	mov	r1, r0
 8005b52:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005b54:	4650      	mov	r0, sl
 8005b56:	f001 fe47 	bl	80077e8 <__multiply>
 8005b5a:	9009      	str	r0, [sp, #36]	; 0x24
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	f43f aea6 	beq.w	80058ae <_strtod_l+0x47e>
 8005b62:	4650      	mov	r0, sl
 8005b64:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005b66:	f001 fd29 	bl	80075bc <_Bfree>
 8005b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b6c:	931a      	str	r3, [sp, #104]	; 0x68
 8005b6e:	2f00      	cmp	r7, #0
 8005b70:	f300 808e 	bgt.w	8005c90 <_strtod_l+0x860>
 8005b74:	9b07      	ldr	r3, [sp, #28]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	dd08      	ble.n	8005b8c <_strtod_l+0x75c>
 8005b7a:	4650      	mov	r0, sl
 8005b7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b7e:	9906      	ldr	r1, [sp, #24]
 8005b80:	f001 feda 	bl	8007938 <__pow5mult>
 8005b84:	9006      	str	r0, [sp, #24]
 8005b86:	2800      	cmp	r0, #0
 8005b88:	f43f ae91 	beq.w	80058ae <_strtod_l+0x47e>
 8005b8c:	2c00      	cmp	r4, #0
 8005b8e:	dd08      	ble.n	8005ba2 <_strtod_l+0x772>
 8005b90:	4622      	mov	r2, r4
 8005b92:	4650      	mov	r0, sl
 8005b94:	9906      	ldr	r1, [sp, #24]
 8005b96:	f001 ff29 	bl	80079ec <__lshift>
 8005b9a:	9006      	str	r0, [sp, #24]
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	f43f ae86 	beq.w	80058ae <_strtod_l+0x47e>
 8005ba2:	2e00      	cmp	r6, #0
 8005ba4:	dd08      	ble.n	8005bb8 <_strtod_l+0x788>
 8005ba6:	4632      	mov	r2, r6
 8005ba8:	4650      	mov	r0, sl
 8005baa:	9904      	ldr	r1, [sp, #16]
 8005bac:	f001 ff1e 	bl	80079ec <__lshift>
 8005bb0:	9004      	str	r0, [sp, #16]
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	f43f ae7b 	beq.w	80058ae <_strtod_l+0x47e>
 8005bb8:	4650      	mov	r0, sl
 8005bba:	9a06      	ldr	r2, [sp, #24]
 8005bbc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005bbe:	f001 ffa1 	bl	8007b04 <__mdiff>
 8005bc2:	4683      	mov	fp, r0
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	f43f ae72 	beq.w	80058ae <_strtod_l+0x47e>
 8005bca:	2400      	movs	r4, #0
 8005bcc:	68c3      	ldr	r3, [r0, #12]
 8005bce:	9904      	ldr	r1, [sp, #16]
 8005bd0:	60c4      	str	r4, [r0, #12]
 8005bd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bd4:	f001 ff7a 	bl	8007acc <__mcmp>
 8005bd8:	42a0      	cmp	r0, r4
 8005bda:	da6b      	bge.n	8005cb4 <_strtod_l+0x884>
 8005bdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bde:	ea53 0308 	orrs.w	r3, r3, r8
 8005be2:	f040 8091 	bne.w	8005d08 <_strtod_l+0x8d8>
 8005be6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f040 808c 	bne.w	8005d08 <_strtod_l+0x8d8>
 8005bf0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005bf4:	0d1b      	lsrs	r3, r3, #20
 8005bf6:	051b      	lsls	r3, r3, #20
 8005bf8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005bfc:	f240 8084 	bls.w	8005d08 <_strtod_l+0x8d8>
 8005c00:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005c04:	b91b      	cbnz	r3, 8005c0e <_strtod_l+0x7de>
 8005c06:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	dd7c      	ble.n	8005d08 <_strtod_l+0x8d8>
 8005c0e:	4659      	mov	r1, fp
 8005c10:	2201      	movs	r2, #1
 8005c12:	4650      	mov	r0, sl
 8005c14:	f001 feea 	bl	80079ec <__lshift>
 8005c18:	9904      	ldr	r1, [sp, #16]
 8005c1a:	4683      	mov	fp, r0
 8005c1c:	f001 ff56 	bl	8007acc <__mcmp>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	dd71      	ble.n	8005d08 <_strtod_l+0x8d8>
 8005c24:	9905      	ldr	r1, [sp, #20]
 8005c26:	464b      	mov	r3, r9
 8005c28:	4a20      	ldr	r2, [pc, #128]	; (8005cac <_strtod_l+0x87c>)
 8005c2a:	2900      	cmp	r1, #0
 8005c2c:	f000 808c 	beq.w	8005d48 <_strtod_l+0x918>
 8005c30:	ea02 0109 	and.w	r1, r2, r9
 8005c34:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005c38:	f300 8086 	bgt.w	8005d48 <_strtod_l+0x918>
 8005c3c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005c40:	f77f aeaa 	ble.w	8005998 <_strtod_l+0x568>
 8005c44:	4640      	mov	r0, r8
 8005c46:	4649      	mov	r1, r9
 8005c48:	4b19      	ldr	r3, [pc, #100]	; (8005cb0 <_strtod_l+0x880>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f7fa fc44 	bl	80004d8 <__aeabi_dmul>
 8005c50:	460b      	mov	r3, r1
 8005c52:	4303      	orrs	r3, r0
 8005c54:	bf08      	it	eq
 8005c56:	2322      	moveq	r3, #34	; 0x22
 8005c58:	4680      	mov	r8, r0
 8005c5a:	4689      	mov	r9, r1
 8005c5c:	bf08      	it	eq
 8005c5e:	f8ca 3000 	streq.w	r3, [sl]
 8005c62:	e62f      	b.n	80058c4 <_strtod_l+0x494>
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c68:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6c:	ea03 0808 	and.w	r8, r3, r8
 8005c70:	e6e0      	b.n	8005a34 <_strtod_l+0x604>
 8005c72:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005c76:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005c7a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005c7e:	35e2      	adds	r5, #226	; 0xe2
 8005c80:	fa07 f505 	lsl.w	r5, r7, r5
 8005c84:	970f      	str	r7, [sp, #60]	; 0x3c
 8005c86:	e747      	b.n	8005b18 <_strtod_l+0x6e8>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	2500      	movs	r5, #0
 8005c8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c8e:	e743      	b.n	8005b18 <_strtod_l+0x6e8>
 8005c90:	463a      	mov	r2, r7
 8005c92:	4650      	mov	r0, sl
 8005c94:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005c96:	f001 fea9 	bl	80079ec <__lshift>
 8005c9a:	901a      	str	r0, [sp, #104]	; 0x68
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	f47f af69 	bne.w	8005b74 <_strtod_l+0x744>
 8005ca2:	e604      	b.n	80058ae <_strtod_l+0x47e>
 8005ca4:	08009760 	.word	0x08009760
 8005ca8:	fffffc02 	.word	0xfffffc02
 8005cac:	7ff00000 	.word	0x7ff00000
 8005cb0:	39500000 	.word	0x39500000
 8005cb4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005cb8:	d165      	bne.n	8005d86 <_strtod_l+0x956>
 8005cba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005cc0:	b35a      	cbz	r2, 8005d1a <_strtod_l+0x8ea>
 8005cc2:	4a99      	ldr	r2, [pc, #612]	; (8005f28 <_strtod_l+0xaf8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d12b      	bne.n	8005d20 <_strtod_l+0x8f0>
 8005cc8:	9b05      	ldr	r3, [sp, #20]
 8005cca:	4641      	mov	r1, r8
 8005ccc:	b303      	cbz	r3, 8005d10 <_strtod_l+0x8e0>
 8005cce:	464a      	mov	r2, r9
 8005cd0:	4b96      	ldr	r3, [pc, #600]	; (8005f2c <_strtod_l+0xafc>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cdc:	d81b      	bhi.n	8005d16 <_strtod_l+0x8e6>
 8005cde:	0d1b      	lsrs	r3, r3, #20
 8005ce0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce8:	4299      	cmp	r1, r3
 8005cea:	d119      	bne.n	8005d20 <_strtod_l+0x8f0>
 8005cec:	4b90      	ldr	r3, [pc, #576]	; (8005f30 <_strtod_l+0xb00>)
 8005cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d102      	bne.n	8005cfa <_strtod_l+0x8ca>
 8005cf4:	3101      	adds	r1, #1
 8005cf6:	f43f adda 	beq.w	80058ae <_strtod_l+0x47e>
 8005cfa:	f04f 0800 	mov.w	r8, #0
 8005cfe:	4b8b      	ldr	r3, [pc, #556]	; (8005f2c <_strtod_l+0xafc>)
 8005d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d02:	401a      	ands	r2, r3
 8005d04:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005d08:	9b05      	ldr	r3, [sp, #20]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d19a      	bne.n	8005c44 <_strtod_l+0x814>
 8005d0e:	e5d9      	b.n	80058c4 <_strtod_l+0x494>
 8005d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d14:	e7e8      	b.n	8005ce8 <_strtod_l+0x8b8>
 8005d16:	4613      	mov	r3, r2
 8005d18:	e7e6      	b.n	8005ce8 <_strtod_l+0x8b8>
 8005d1a:	ea53 0308 	orrs.w	r3, r3, r8
 8005d1e:	d081      	beq.n	8005c24 <_strtod_l+0x7f4>
 8005d20:	b1e5      	cbz	r5, 8005d5c <_strtod_l+0x92c>
 8005d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d24:	421d      	tst	r5, r3
 8005d26:	d0ef      	beq.n	8005d08 <_strtod_l+0x8d8>
 8005d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d2a:	4640      	mov	r0, r8
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	9a05      	ldr	r2, [sp, #20]
 8005d30:	b1c3      	cbz	r3, 8005d64 <_strtod_l+0x934>
 8005d32:	f7ff fb59 	bl	80053e8 <sulp>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d3e:	f7fa fa15 	bl	800016c <__adddf3>
 8005d42:	4680      	mov	r8, r0
 8005d44:	4689      	mov	r9, r1
 8005d46:	e7df      	b.n	8005d08 <_strtod_l+0x8d8>
 8005d48:	4013      	ands	r3, r2
 8005d4a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005d4e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005d52:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005d56:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005d5a:	e7d5      	b.n	8005d08 <_strtod_l+0x8d8>
 8005d5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d5e:	ea13 0f08 	tst.w	r3, r8
 8005d62:	e7e0      	b.n	8005d26 <_strtod_l+0x8f6>
 8005d64:	f7ff fb40 	bl	80053e8 <sulp>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d70:	f7fa f9fa 	bl	8000168 <__aeabi_dsub>
 8005d74:	2200      	movs	r2, #0
 8005d76:	2300      	movs	r3, #0
 8005d78:	4680      	mov	r8, r0
 8005d7a:	4689      	mov	r9, r1
 8005d7c:	f7fa fe14 	bl	80009a8 <__aeabi_dcmpeq>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d0c1      	beq.n	8005d08 <_strtod_l+0x8d8>
 8005d84:	e608      	b.n	8005998 <_strtod_l+0x568>
 8005d86:	4658      	mov	r0, fp
 8005d88:	9904      	ldr	r1, [sp, #16]
 8005d8a:	f002 f81d 	bl	8007dc8 <__ratio>
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d94:	4606      	mov	r6, r0
 8005d96:	460f      	mov	r7, r1
 8005d98:	f7fa fe1a 	bl	80009d0 <__aeabi_dcmple>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	d070      	beq.n	8005e82 <_strtod_l+0xa52>
 8005da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d042      	beq.n	8005e2c <_strtod_l+0x9fc>
 8005da6:	2600      	movs	r6, #0
 8005da8:	4f62      	ldr	r7, [pc, #392]	; (8005f34 <_strtod_l+0xb04>)
 8005daa:	4d62      	ldr	r5, [pc, #392]	; (8005f34 <_strtod_l+0xb04>)
 8005dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005db2:	0d1b      	lsrs	r3, r3, #20
 8005db4:	051b      	lsls	r3, r3, #20
 8005db6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005db8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dba:	4b5f      	ldr	r3, [pc, #380]	; (8005f38 <_strtod_l+0xb08>)
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	f040 80c3 	bne.w	8005f48 <_strtod_l+0xb18>
 8005dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc4:	4640      	mov	r0, r8
 8005dc6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005dca:	4649      	mov	r1, r9
 8005dcc:	f001 ff26 	bl	8007c1c <__ulp>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	4639      	mov	r1, r7
 8005dd8:	f7fa fb7e 	bl	80004d8 <__aeabi_dmul>
 8005ddc:	4642      	mov	r2, r8
 8005dde:	464b      	mov	r3, r9
 8005de0:	f7fa f9c4 	bl	800016c <__adddf3>
 8005de4:	460b      	mov	r3, r1
 8005de6:	4951      	ldr	r1, [pc, #324]	; (8005f2c <_strtod_l+0xafc>)
 8005de8:	4a54      	ldr	r2, [pc, #336]	; (8005f3c <_strtod_l+0xb0c>)
 8005dea:	4019      	ands	r1, r3
 8005dec:	4291      	cmp	r1, r2
 8005dee:	4680      	mov	r8, r0
 8005df0:	d95d      	bls.n	8005eae <_strtod_l+0xa7e>
 8005df2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005df4:	4b4e      	ldr	r3, [pc, #312]	; (8005f30 <_strtod_l+0xb00>)
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d103      	bne.n	8005e02 <_strtod_l+0x9d2>
 8005dfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	f43f ad56 	beq.w	80058ae <_strtod_l+0x47e>
 8005e02:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005e06:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005f30 <_strtod_l+0xb00>
 8005e0a:	4650      	mov	r0, sl
 8005e0c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005e0e:	f001 fbd5 	bl	80075bc <_Bfree>
 8005e12:	4650      	mov	r0, sl
 8005e14:	9906      	ldr	r1, [sp, #24]
 8005e16:	f001 fbd1 	bl	80075bc <_Bfree>
 8005e1a:	4650      	mov	r0, sl
 8005e1c:	9904      	ldr	r1, [sp, #16]
 8005e1e:	f001 fbcd 	bl	80075bc <_Bfree>
 8005e22:	4659      	mov	r1, fp
 8005e24:	4650      	mov	r0, sl
 8005e26:	f001 fbc9 	bl	80075bc <_Bfree>
 8005e2a:	e627      	b.n	8005a7c <_strtod_l+0x64c>
 8005e2c:	f1b8 0f00 	cmp.w	r8, #0
 8005e30:	d119      	bne.n	8005e66 <_strtod_l+0xa36>
 8005e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e38:	b9e3      	cbnz	r3, 8005e74 <_strtod_l+0xa44>
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	4639      	mov	r1, r7
 8005e40:	4b3c      	ldr	r3, [pc, #240]	; (8005f34 <_strtod_l+0xb04>)
 8005e42:	f7fa fdbb 	bl	80009bc <__aeabi_dcmplt>
 8005e46:	b9c8      	cbnz	r0, 8005e7c <_strtod_l+0xa4c>
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	4b3c      	ldr	r3, [pc, #240]	; (8005f40 <_strtod_l+0xb10>)
 8005e50:	f7fa fb42 	bl	80004d8 <__aeabi_dmul>
 8005e54:	4604      	mov	r4, r0
 8005e56:	460d      	mov	r5, r1
 8005e58:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005e5c:	9416      	str	r4, [sp, #88]	; 0x58
 8005e5e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e60:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005e64:	e7a2      	b.n	8005dac <_strtod_l+0x97c>
 8005e66:	f1b8 0f01 	cmp.w	r8, #1
 8005e6a:	d103      	bne.n	8005e74 <_strtod_l+0xa44>
 8005e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f43f ad92 	beq.w	8005998 <_strtod_l+0x568>
 8005e74:	2600      	movs	r6, #0
 8005e76:	2400      	movs	r4, #0
 8005e78:	4f32      	ldr	r7, [pc, #200]	; (8005f44 <_strtod_l+0xb14>)
 8005e7a:	e796      	b.n	8005daa <_strtod_l+0x97a>
 8005e7c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005e7e:	4d30      	ldr	r5, [pc, #192]	; (8005f40 <_strtod_l+0xb10>)
 8005e80:	e7ea      	b.n	8005e58 <_strtod_l+0xa28>
 8005e82:	4b2f      	ldr	r3, [pc, #188]	; (8005f40 <_strtod_l+0xb10>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	4630      	mov	r0, r6
 8005e88:	4639      	mov	r1, r7
 8005e8a:	f7fa fb25 	bl	80004d8 <__aeabi_dmul>
 8005e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e90:	4604      	mov	r4, r0
 8005e92:	460d      	mov	r5, r1
 8005e94:	b933      	cbnz	r3, 8005ea4 <_strtod_l+0xa74>
 8005e96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e9a:	9010      	str	r0, [sp, #64]	; 0x40
 8005e9c:	9311      	str	r3, [sp, #68]	; 0x44
 8005e9e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005ea2:	e783      	b.n	8005dac <_strtod_l+0x97c>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005eac:	e7f7      	b.n	8005e9e <_strtod_l+0xa6e>
 8005eae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005eb2:	9b05      	ldr	r3, [sp, #20]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1a8      	bne.n	8005e0a <_strtod_l+0x9da>
 8005eb8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ebc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ebe:	0d1b      	lsrs	r3, r3, #20
 8005ec0:	051b      	lsls	r3, r3, #20
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d1a1      	bne.n	8005e0a <_strtod_l+0x9da>
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	4629      	mov	r1, r5
 8005eca:	f7fa fe4d 	bl	8000b68 <__aeabi_d2lz>
 8005ece:	f7fa fad5 	bl	800047c <__aeabi_l2d>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	4629      	mov	r1, r5
 8005eda:	f7fa f945 	bl	8000168 <__aeabi_dsub>
 8005ede:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ee0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ee4:	ea43 0308 	orr.w	r3, r3, r8
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	4604      	mov	r4, r0
 8005eec:	460d      	mov	r5, r1
 8005eee:	d066      	beq.n	8005fbe <_strtod_l+0xb8e>
 8005ef0:	a309      	add	r3, pc, #36	; (adr r3, 8005f18 <_strtod_l+0xae8>)
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	f7fa fd61 	bl	80009bc <__aeabi_dcmplt>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	f47f ace2 	bne.w	80058c4 <_strtod_l+0x494>
 8005f00:	a307      	add	r3, pc, #28	; (adr r3, 8005f20 <_strtod_l+0xaf0>)
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	4620      	mov	r0, r4
 8005f08:	4629      	mov	r1, r5
 8005f0a:	f7fa fd75 	bl	80009f8 <__aeabi_dcmpgt>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	f43f af7b 	beq.w	8005e0a <_strtod_l+0x9da>
 8005f14:	e4d6      	b.n	80058c4 <_strtod_l+0x494>
 8005f16:	bf00      	nop
 8005f18:	94a03595 	.word	0x94a03595
 8005f1c:	3fdfffff 	.word	0x3fdfffff
 8005f20:	35afe535 	.word	0x35afe535
 8005f24:	3fe00000 	.word	0x3fe00000
 8005f28:	000fffff 	.word	0x000fffff
 8005f2c:	7ff00000 	.word	0x7ff00000
 8005f30:	7fefffff 	.word	0x7fefffff
 8005f34:	3ff00000 	.word	0x3ff00000
 8005f38:	7fe00000 	.word	0x7fe00000
 8005f3c:	7c9fffff 	.word	0x7c9fffff
 8005f40:	3fe00000 	.word	0x3fe00000
 8005f44:	bff00000 	.word	0xbff00000
 8005f48:	9b05      	ldr	r3, [sp, #20]
 8005f4a:	b313      	cbz	r3, 8005f92 <_strtod_l+0xb62>
 8005f4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005f52:	d81e      	bhi.n	8005f92 <_strtod_l+0xb62>
 8005f54:	a326      	add	r3, pc, #152	; (adr r3, 8005ff0 <_strtod_l+0xbc0>)
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	f7fa fd37 	bl	80009d0 <__aeabi_dcmple>
 8005f62:	b190      	cbz	r0, 8005f8a <_strtod_l+0xb5a>
 8005f64:	4629      	mov	r1, r5
 8005f66:	4620      	mov	r0, r4
 8005f68:	f7fa fd8e 	bl	8000a88 <__aeabi_d2uiz>
 8005f6c:	2801      	cmp	r0, #1
 8005f6e:	bf38      	it	cc
 8005f70:	2001      	movcc	r0, #1
 8005f72:	f7fa fa37 	bl	80003e4 <__aeabi_ui2d>
 8005f76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f78:	4604      	mov	r4, r0
 8005f7a:	460d      	mov	r5, r1
 8005f7c:	b9d3      	cbnz	r3, 8005fb4 <_strtod_l+0xb84>
 8005f7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f82:	9012      	str	r0, [sp, #72]	; 0x48
 8005f84:	9313      	str	r3, [sp, #76]	; 0x4c
 8005f86:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005f8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f8c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005f90:	1a9f      	subs	r7, r3, r2
 8005f92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f96:	f001 fe41 	bl	8007c1c <__ulp>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	4639      	mov	r1, r7
 8005fa2:	f7fa fa99 	bl	80004d8 <__aeabi_dmul>
 8005fa6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005faa:	f7fa f8df 	bl	800016c <__adddf3>
 8005fae:	4680      	mov	r8, r0
 8005fb0:	4689      	mov	r9, r1
 8005fb2:	e77e      	b.n	8005eb2 <_strtod_l+0xa82>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005fbc:	e7e3      	b.n	8005f86 <_strtod_l+0xb56>
 8005fbe:	a30e      	add	r3, pc, #56	; (adr r3, 8005ff8 <_strtod_l+0xbc8>)
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	f7fa fcfa 	bl	80009bc <__aeabi_dcmplt>
 8005fc8:	e7a1      	b.n	8005f0e <_strtod_l+0xade>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	930a      	str	r3, [sp, #40]	; 0x28
 8005fce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	f7ff ba71 	b.w	80054ba <_strtod_l+0x8a>
 8005fd8:	2a65      	cmp	r2, #101	; 0x65
 8005fda:	f43f ab63 	beq.w	80056a4 <_strtod_l+0x274>
 8005fde:	2a45      	cmp	r2, #69	; 0x45
 8005fe0:	f43f ab60 	beq.w	80056a4 <_strtod_l+0x274>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	f7ff bb95 	b.w	8005714 <_strtod_l+0x2e4>
 8005fea:	bf00      	nop
 8005fec:	f3af 8000 	nop.w
 8005ff0:	ffc00000 	.word	0xffc00000
 8005ff4:	41dfffff 	.word	0x41dfffff
 8005ff8:	94a03595 	.word	0x94a03595
 8005ffc:	3fcfffff 	.word	0x3fcfffff

08006000 <_strtod_r>:
 8006000:	4b01      	ldr	r3, [pc, #4]	; (8006008 <_strtod_r+0x8>)
 8006002:	f7ff ba15 	b.w	8005430 <_strtod_l>
 8006006:	bf00      	nop
 8006008:	2000007c 	.word	0x2000007c

0800600c <_strtol_l.constprop.0>:
 800600c:	2b01      	cmp	r3, #1
 800600e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006012:	4680      	mov	r8, r0
 8006014:	d001      	beq.n	800601a <_strtol_l.constprop.0+0xe>
 8006016:	2b24      	cmp	r3, #36	; 0x24
 8006018:	d906      	bls.n	8006028 <_strtol_l.constprop.0+0x1c>
 800601a:	f7fe fb21 	bl	8004660 <__errno>
 800601e:	2316      	movs	r3, #22
 8006020:	6003      	str	r3, [r0, #0]
 8006022:	2000      	movs	r0, #0
 8006024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006028:	460d      	mov	r5, r1
 800602a:	4f35      	ldr	r7, [pc, #212]	; (8006100 <_strtol_l.constprop.0+0xf4>)
 800602c:	4628      	mov	r0, r5
 800602e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006032:	5de6      	ldrb	r6, [r4, r7]
 8006034:	f016 0608 	ands.w	r6, r6, #8
 8006038:	d1f8      	bne.n	800602c <_strtol_l.constprop.0+0x20>
 800603a:	2c2d      	cmp	r4, #45	; 0x2d
 800603c:	d12f      	bne.n	800609e <_strtol_l.constprop.0+0x92>
 800603e:	2601      	movs	r6, #1
 8006040:	782c      	ldrb	r4, [r5, #0]
 8006042:	1c85      	adds	r5, r0, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d057      	beq.n	80060f8 <_strtol_l.constprop.0+0xec>
 8006048:	2b10      	cmp	r3, #16
 800604a:	d109      	bne.n	8006060 <_strtol_l.constprop.0+0x54>
 800604c:	2c30      	cmp	r4, #48	; 0x30
 800604e:	d107      	bne.n	8006060 <_strtol_l.constprop.0+0x54>
 8006050:	7828      	ldrb	r0, [r5, #0]
 8006052:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006056:	2858      	cmp	r0, #88	; 0x58
 8006058:	d149      	bne.n	80060ee <_strtol_l.constprop.0+0xe2>
 800605a:	2310      	movs	r3, #16
 800605c:	786c      	ldrb	r4, [r5, #1]
 800605e:	3502      	adds	r5, #2
 8006060:	2700      	movs	r7, #0
 8006062:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006066:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800606a:	fbbe f9f3 	udiv	r9, lr, r3
 800606e:	4638      	mov	r0, r7
 8006070:	fb03 ea19 	mls	sl, r3, r9, lr
 8006074:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006078:	f1bc 0f09 	cmp.w	ip, #9
 800607c:	d814      	bhi.n	80060a8 <_strtol_l.constprop.0+0x9c>
 800607e:	4664      	mov	r4, ip
 8006080:	42a3      	cmp	r3, r4
 8006082:	dd22      	ble.n	80060ca <_strtol_l.constprop.0+0xbe>
 8006084:	2f00      	cmp	r7, #0
 8006086:	db1d      	blt.n	80060c4 <_strtol_l.constprop.0+0xb8>
 8006088:	4581      	cmp	r9, r0
 800608a:	d31b      	bcc.n	80060c4 <_strtol_l.constprop.0+0xb8>
 800608c:	d101      	bne.n	8006092 <_strtol_l.constprop.0+0x86>
 800608e:	45a2      	cmp	sl, r4
 8006090:	db18      	blt.n	80060c4 <_strtol_l.constprop.0+0xb8>
 8006092:	2701      	movs	r7, #1
 8006094:	fb00 4003 	mla	r0, r0, r3, r4
 8006098:	f815 4b01 	ldrb.w	r4, [r5], #1
 800609c:	e7ea      	b.n	8006074 <_strtol_l.constprop.0+0x68>
 800609e:	2c2b      	cmp	r4, #43	; 0x2b
 80060a0:	bf04      	itt	eq
 80060a2:	782c      	ldrbeq	r4, [r5, #0]
 80060a4:	1c85      	addeq	r5, r0, #2
 80060a6:	e7cd      	b.n	8006044 <_strtol_l.constprop.0+0x38>
 80060a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80060ac:	f1bc 0f19 	cmp.w	ip, #25
 80060b0:	d801      	bhi.n	80060b6 <_strtol_l.constprop.0+0xaa>
 80060b2:	3c37      	subs	r4, #55	; 0x37
 80060b4:	e7e4      	b.n	8006080 <_strtol_l.constprop.0+0x74>
 80060b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80060ba:	f1bc 0f19 	cmp.w	ip, #25
 80060be:	d804      	bhi.n	80060ca <_strtol_l.constprop.0+0xbe>
 80060c0:	3c57      	subs	r4, #87	; 0x57
 80060c2:	e7dd      	b.n	8006080 <_strtol_l.constprop.0+0x74>
 80060c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80060c8:	e7e6      	b.n	8006098 <_strtol_l.constprop.0+0x8c>
 80060ca:	2f00      	cmp	r7, #0
 80060cc:	da07      	bge.n	80060de <_strtol_l.constprop.0+0xd2>
 80060ce:	2322      	movs	r3, #34	; 0x22
 80060d0:	4670      	mov	r0, lr
 80060d2:	f8c8 3000 	str.w	r3, [r8]
 80060d6:	2a00      	cmp	r2, #0
 80060d8:	d0a4      	beq.n	8006024 <_strtol_l.constprop.0+0x18>
 80060da:	1e69      	subs	r1, r5, #1
 80060dc:	e005      	b.n	80060ea <_strtol_l.constprop.0+0xde>
 80060de:	b106      	cbz	r6, 80060e2 <_strtol_l.constprop.0+0xd6>
 80060e0:	4240      	negs	r0, r0
 80060e2:	2a00      	cmp	r2, #0
 80060e4:	d09e      	beq.n	8006024 <_strtol_l.constprop.0+0x18>
 80060e6:	2f00      	cmp	r7, #0
 80060e8:	d1f7      	bne.n	80060da <_strtol_l.constprop.0+0xce>
 80060ea:	6011      	str	r1, [r2, #0]
 80060ec:	e79a      	b.n	8006024 <_strtol_l.constprop.0+0x18>
 80060ee:	2430      	movs	r4, #48	; 0x30
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1b5      	bne.n	8006060 <_strtol_l.constprop.0+0x54>
 80060f4:	2308      	movs	r3, #8
 80060f6:	e7b3      	b.n	8006060 <_strtol_l.constprop.0+0x54>
 80060f8:	2c30      	cmp	r4, #48	; 0x30
 80060fa:	d0a9      	beq.n	8006050 <_strtol_l.constprop.0+0x44>
 80060fc:	230a      	movs	r3, #10
 80060fe:	e7af      	b.n	8006060 <_strtol_l.constprop.0+0x54>
 8006100:	08009789 	.word	0x08009789

08006104 <_strtol_r>:
 8006104:	f7ff bf82 	b.w	800600c <_strtol_l.constprop.0>

08006108 <quorem>:
 8006108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610c:	6903      	ldr	r3, [r0, #16]
 800610e:	690c      	ldr	r4, [r1, #16]
 8006110:	4607      	mov	r7, r0
 8006112:	42a3      	cmp	r3, r4
 8006114:	f2c0 8082 	blt.w	800621c <quorem+0x114>
 8006118:	3c01      	subs	r4, #1
 800611a:	f100 0514 	add.w	r5, r0, #20
 800611e:	f101 0814 	add.w	r8, r1, #20
 8006122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800612c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006130:	3301      	adds	r3, #1
 8006132:	429a      	cmp	r2, r3
 8006134:	fbb2 f6f3 	udiv	r6, r2, r3
 8006138:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800613c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006140:	d331      	bcc.n	80061a6 <quorem+0x9e>
 8006142:	f04f 0e00 	mov.w	lr, #0
 8006146:	4640      	mov	r0, r8
 8006148:	46ac      	mov	ip, r5
 800614a:	46f2      	mov	sl, lr
 800614c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006150:	b293      	uxth	r3, r2
 8006152:	fb06 e303 	mla	r3, r6, r3, lr
 8006156:	0c12      	lsrs	r2, r2, #16
 8006158:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800615c:	b29b      	uxth	r3, r3
 800615e:	fb06 e202 	mla	r2, r6, r2, lr
 8006162:	ebaa 0303 	sub.w	r3, sl, r3
 8006166:	f8dc a000 	ldr.w	sl, [ip]
 800616a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800616e:	fa1f fa8a 	uxth.w	sl, sl
 8006172:	4453      	add	r3, sl
 8006174:	f8dc a000 	ldr.w	sl, [ip]
 8006178:	b292      	uxth	r2, r2
 800617a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800617e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006182:	b29b      	uxth	r3, r3
 8006184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006188:	4581      	cmp	r9, r0
 800618a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800618e:	f84c 3b04 	str.w	r3, [ip], #4
 8006192:	d2db      	bcs.n	800614c <quorem+0x44>
 8006194:	f855 300b 	ldr.w	r3, [r5, fp]
 8006198:	b92b      	cbnz	r3, 80061a6 <quorem+0x9e>
 800619a:	9b01      	ldr	r3, [sp, #4]
 800619c:	3b04      	subs	r3, #4
 800619e:	429d      	cmp	r5, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	d32f      	bcc.n	8006204 <quorem+0xfc>
 80061a4:	613c      	str	r4, [r7, #16]
 80061a6:	4638      	mov	r0, r7
 80061a8:	f001 fc90 	bl	8007acc <__mcmp>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	db25      	blt.n	80061fc <quorem+0xf4>
 80061b0:	4628      	mov	r0, r5
 80061b2:	f04f 0c00 	mov.w	ip, #0
 80061b6:	3601      	adds	r6, #1
 80061b8:	f858 1b04 	ldr.w	r1, [r8], #4
 80061bc:	f8d0 e000 	ldr.w	lr, [r0]
 80061c0:	b28b      	uxth	r3, r1
 80061c2:	ebac 0303 	sub.w	r3, ip, r3
 80061c6:	fa1f f28e 	uxth.w	r2, lr
 80061ca:	4413      	add	r3, r2
 80061cc:	0c0a      	lsrs	r2, r1, #16
 80061ce:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80061d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061dc:	45c1      	cmp	r9, r8
 80061de:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80061e2:	f840 3b04 	str.w	r3, [r0], #4
 80061e6:	d2e7      	bcs.n	80061b8 <quorem+0xb0>
 80061e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061f0:	b922      	cbnz	r2, 80061fc <quorem+0xf4>
 80061f2:	3b04      	subs	r3, #4
 80061f4:	429d      	cmp	r5, r3
 80061f6:	461a      	mov	r2, r3
 80061f8:	d30a      	bcc.n	8006210 <quorem+0x108>
 80061fa:	613c      	str	r4, [r7, #16]
 80061fc:	4630      	mov	r0, r6
 80061fe:	b003      	add	sp, #12
 8006200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006204:	6812      	ldr	r2, [r2, #0]
 8006206:	3b04      	subs	r3, #4
 8006208:	2a00      	cmp	r2, #0
 800620a:	d1cb      	bne.n	80061a4 <quorem+0x9c>
 800620c:	3c01      	subs	r4, #1
 800620e:	e7c6      	b.n	800619e <quorem+0x96>
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	3b04      	subs	r3, #4
 8006214:	2a00      	cmp	r2, #0
 8006216:	d1f0      	bne.n	80061fa <quorem+0xf2>
 8006218:	3c01      	subs	r4, #1
 800621a:	e7eb      	b.n	80061f4 <quorem+0xec>
 800621c:	2000      	movs	r0, #0
 800621e:	e7ee      	b.n	80061fe <quorem+0xf6>

08006220 <_dtoa_r>:
 8006220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	4616      	mov	r6, r2
 8006226:	461f      	mov	r7, r3
 8006228:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800622a:	b099      	sub	sp, #100	; 0x64
 800622c:	4605      	mov	r5, r0
 800622e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006232:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006236:	b974      	cbnz	r4, 8006256 <_dtoa_r+0x36>
 8006238:	2010      	movs	r0, #16
 800623a:	f001 f949 	bl	80074d0 <malloc>
 800623e:	4602      	mov	r2, r0
 8006240:	6268      	str	r0, [r5, #36]	; 0x24
 8006242:	b920      	cbnz	r0, 800624e <_dtoa_r+0x2e>
 8006244:	21ea      	movs	r1, #234	; 0xea
 8006246:	4ba8      	ldr	r3, [pc, #672]	; (80064e8 <_dtoa_r+0x2c8>)
 8006248:	48a8      	ldr	r0, [pc, #672]	; (80064ec <_dtoa_r+0x2cc>)
 800624a:	f002 f8b3 	bl	80083b4 <__assert_func>
 800624e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006252:	6004      	str	r4, [r0, #0]
 8006254:	60c4      	str	r4, [r0, #12]
 8006256:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006258:	6819      	ldr	r1, [r3, #0]
 800625a:	b151      	cbz	r1, 8006272 <_dtoa_r+0x52>
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	2301      	movs	r3, #1
 8006260:	4093      	lsls	r3, r2
 8006262:	604a      	str	r2, [r1, #4]
 8006264:	608b      	str	r3, [r1, #8]
 8006266:	4628      	mov	r0, r5
 8006268:	f001 f9a8 	bl	80075bc <_Bfree>
 800626c:	2200      	movs	r2, #0
 800626e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	1e3b      	subs	r3, r7, #0
 8006274:	bfaf      	iteee	ge
 8006276:	2300      	movge	r3, #0
 8006278:	2201      	movlt	r2, #1
 800627a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800627e:	9305      	strlt	r3, [sp, #20]
 8006280:	bfa8      	it	ge
 8006282:	f8c8 3000 	strge.w	r3, [r8]
 8006286:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800628a:	4b99      	ldr	r3, [pc, #612]	; (80064f0 <_dtoa_r+0x2d0>)
 800628c:	bfb8      	it	lt
 800628e:	f8c8 2000 	strlt.w	r2, [r8]
 8006292:	ea33 0309 	bics.w	r3, r3, r9
 8006296:	d119      	bne.n	80062cc <_dtoa_r+0xac>
 8006298:	f242 730f 	movw	r3, #9999	; 0x270f
 800629c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062a4:	4333      	orrs	r3, r6
 80062a6:	f000 857f 	beq.w	8006da8 <_dtoa_r+0xb88>
 80062aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062ac:	b953      	cbnz	r3, 80062c4 <_dtoa_r+0xa4>
 80062ae:	4b91      	ldr	r3, [pc, #580]	; (80064f4 <_dtoa_r+0x2d4>)
 80062b0:	e022      	b.n	80062f8 <_dtoa_r+0xd8>
 80062b2:	4b91      	ldr	r3, [pc, #580]	; (80064f8 <_dtoa_r+0x2d8>)
 80062b4:	9303      	str	r3, [sp, #12]
 80062b6:	3308      	adds	r3, #8
 80062b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	9803      	ldr	r0, [sp, #12]
 80062be:	b019      	add	sp, #100	; 0x64
 80062c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c4:	4b8b      	ldr	r3, [pc, #556]	; (80064f4 <_dtoa_r+0x2d4>)
 80062c6:	9303      	str	r3, [sp, #12]
 80062c8:	3303      	adds	r3, #3
 80062ca:	e7f5      	b.n	80062b8 <_dtoa_r+0x98>
 80062cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80062d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80062d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062d8:	2200      	movs	r2, #0
 80062da:	2300      	movs	r3, #0
 80062dc:	f7fa fb64 	bl	80009a8 <__aeabi_dcmpeq>
 80062e0:	4680      	mov	r8, r0
 80062e2:	b158      	cbz	r0, 80062fc <_dtoa_r+0xdc>
 80062e4:	2301      	movs	r3, #1
 80062e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 8558 	beq.w	8006da2 <_dtoa_r+0xb82>
 80062f2:	4882      	ldr	r0, [pc, #520]	; (80064fc <_dtoa_r+0x2dc>)
 80062f4:	6018      	str	r0, [r3, #0]
 80062f6:	1e43      	subs	r3, r0, #1
 80062f8:	9303      	str	r3, [sp, #12]
 80062fa:	e7df      	b.n	80062bc <_dtoa_r+0x9c>
 80062fc:	ab16      	add	r3, sp, #88	; 0x58
 80062fe:	9301      	str	r3, [sp, #4]
 8006300:	ab17      	add	r3, sp, #92	; 0x5c
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	4628      	mov	r0, r5
 8006306:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800630a:	f001 fd01 	bl	8007d10 <__d2b>
 800630e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006312:	4683      	mov	fp, r0
 8006314:	2c00      	cmp	r4, #0
 8006316:	d07f      	beq.n	8006418 <_dtoa_r+0x1f8>
 8006318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800631c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800631e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006322:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006326:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800632a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800632e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006332:	2200      	movs	r2, #0
 8006334:	4b72      	ldr	r3, [pc, #456]	; (8006500 <_dtoa_r+0x2e0>)
 8006336:	f7f9 ff17 	bl	8000168 <__aeabi_dsub>
 800633a:	a365      	add	r3, pc, #404	; (adr r3, 80064d0 <_dtoa_r+0x2b0>)
 800633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006340:	f7fa f8ca 	bl	80004d8 <__aeabi_dmul>
 8006344:	a364      	add	r3, pc, #400	; (adr r3, 80064d8 <_dtoa_r+0x2b8>)
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	f7f9 ff0f 	bl	800016c <__adddf3>
 800634e:	4606      	mov	r6, r0
 8006350:	4620      	mov	r0, r4
 8006352:	460f      	mov	r7, r1
 8006354:	f7fa f856 	bl	8000404 <__aeabi_i2d>
 8006358:	a361      	add	r3, pc, #388	; (adr r3, 80064e0 <_dtoa_r+0x2c0>)
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	f7fa f8bb 	bl	80004d8 <__aeabi_dmul>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	4630      	mov	r0, r6
 8006368:	4639      	mov	r1, r7
 800636a:	f7f9 feff 	bl	800016c <__adddf3>
 800636e:	4606      	mov	r6, r0
 8006370:	460f      	mov	r7, r1
 8006372:	f7fa fb61 	bl	8000a38 <__aeabi_d2iz>
 8006376:	2200      	movs	r2, #0
 8006378:	4682      	mov	sl, r0
 800637a:	2300      	movs	r3, #0
 800637c:	4630      	mov	r0, r6
 800637e:	4639      	mov	r1, r7
 8006380:	f7fa fb1c 	bl	80009bc <__aeabi_dcmplt>
 8006384:	b148      	cbz	r0, 800639a <_dtoa_r+0x17a>
 8006386:	4650      	mov	r0, sl
 8006388:	f7fa f83c 	bl	8000404 <__aeabi_i2d>
 800638c:	4632      	mov	r2, r6
 800638e:	463b      	mov	r3, r7
 8006390:	f7fa fb0a 	bl	80009a8 <__aeabi_dcmpeq>
 8006394:	b908      	cbnz	r0, 800639a <_dtoa_r+0x17a>
 8006396:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800639a:	f1ba 0f16 	cmp.w	sl, #22
 800639e:	d858      	bhi.n	8006452 <_dtoa_r+0x232>
 80063a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063a4:	4b57      	ldr	r3, [pc, #348]	; (8006504 <_dtoa_r+0x2e4>)
 80063a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ae:	f7fa fb05 	bl	80009bc <__aeabi_dcmplt>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d04f      	beq.n	8006456 <_dtoa_r+0x236>
 80063b6:	2300      	movs	r3, #0
 80063b8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80063bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80063be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80063c0:	1b1c      	subs	r4, r3, r4
 80063c2:	1e63      	subs	r3, r4, #1
 80063c4:	9309      	str	r3, [sp, #36]	; 0x24
 80063c6:	bf49      	itett	mi
 80063c8:	f1c4 0301 	rsbmi	r3, r4, #1
 80063cc:	2300      	movpl	r3, #0
 80063ce:	9306      	strmi	r3, [sp, #24]
 80063d0:	2300      	movmi	r3, #0
 80063d2:	bf54      	ite	pl
 80063d4:	9306      	strpl	r3, [sp, #24]
 80063d6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80063d8:	f1ba 0f00 	cmp.w	sl, #0
 80063dc:	db3d      	blt.n	800645a <_dtoa_r+0x23a>
 80063de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80063e4:	4453      	add	r3, sl
 80063e6:	9309      	str	r3, [sp, #36]	; 0x24
 80063e8:	2300      	movs	r3, #0
 80063ea:	930a      	str	r3, [sp, #40]	; 0x28
 80063ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063ee:	2b09      	cmp	r3, #9
 80063f0:	f200 808c 	bhi.w	800650c <_dtoa_r+0x2ec>
 80063f4:	2b05      	cmp	r3, #5
 80063f6:	bfc4      	itt	gt
 80063f8:	3b04      	subgt	r3, #4
 80063fa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80063fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063fe:	bfc8      	it	gt
 8006400:	2400      	movgt	r4, #0
 8006402:	f1a3 0302 	sub.w	r3, r3, #2
 8006406:	bfd8      	it	le
 8006408:	2401      	movle	r4, #1
 800640a:	2b03      	cmp	r3, #3
 800640c:	f200 808a 	bhi.w	8006524 <_dtoa_r+0x304>
 8006410:	e8df f003 	tbb	[pc, r3]
 8006414:	5b4d4f2d 	.word	0x5b4d4f2d
 8006418:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800641c:	441c      	add	r4, r3
 800641e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006422:	2b20      	cmp	r3, #32
 8006424:	bfc3      	ittte	gt
 8006426:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800642a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800642e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006432:	f1c3 0320 	rsble	r3, r3, #32
 8006436:	bfc6      	itte	gt
 8006438:	fa26 f000 	lsrgt.w	r0, r6, r0
 800643c:	4318      	orrgt	r0, r3
 800643e:	fa06 f003 	lslle.w	r0, r6, r3
 8006442:	f7f9 ffcf 	bl	80003e4 <__aeabi_ui2d>
 8006446:	2301      	movs	r3, #1
 8006448:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800644c:	3c01      	subs	r4, #1
 800644e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006450:	e76f      	b.n	8006332 <_dtoa_r+0x112>
 8006452:	2301      	movs	r3, #1
 8006454:	e7b2      	b.n	80063bc <_dtoa_r+0x19c>
 8006456:	900f      	str	r0, [sp, #60]	; 0x3c
 8006458:	e7b1      	b.n	80063be <_dtoa_r+0x19e>
 800645a:	9b06      	ldr	r3, [sp, #24]
 800645c:	eba3 030a 	sub.w	r3, r3, sl
 8006460:	9306      	str	r3, [sp, #24]
 8006462:	f1ca 0300 	rsb	r3, sl, #0
 8006466:	930a      	str	r3, [sp, #40]	; 0x28
 8006468:	2300      	movs	r3, #0
 800646a:	930e      	str	r3, [sp, #56]	; 0x38
 800646c:	e7be      	b.n	80063ec <_dtoa_r+0x1cc>
 800646e:	2300      	movs	r3, #0
 8006470:	930b      	str	r3, [sp, #44]	; 0x2c
 8006472:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006474:	2b00      	cmp	r3, #0
 8006476:	dc58      	bgt.n	800652a <_dtoa_r+0x30a>
 8006478:	f04f 0901 	mov.w	r9, #1
 800647c:	464b      	mov	r3, r9
 800647e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006482:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006486:	2200      	movs	r2, #0
 8006488:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800648a:	6042      	str	r2, [r0, #4]
 800648c:	2204      	movs	r2, #4
 800648e:	f102 0614 	add.w	r6, r2, #20
 8006492:	429e      	cmp	r6, r3
 8006494:	6841      	ldr	r1, [r0, #4]
 8006496:	d94e      	bls.n	8006536 <_dtoa_r+0x316>
 8006498:	4628      	mov	r0, r5
 800649a:	f001 f84f 	bl	800753c <_Balloc>
 800649e:	9003      	str	r0, [sp, #12]
 80064a0:	2800      	cmp	r0, #0
 80064a2:	d14c      	bne.n	800653e <_dtoa_r+0x31e>
 80064a4:	4602      	mov	r2, r0
 80064a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80064aa:	4b17      	ldr	r3, [pc, #92]	; (8006508 <_dtoa_r+0x2e8>)
 80064ac:	e6cc      	b.n	8006248 <_dtoa_r+0x28>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e7de      	b.n	8006470 <_dtoa_r+0x250>
 80064b2:	2300      	movs	r3, #0
 80064b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80064b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064b8:	eb0a 0903 	add.w	r9, sl, r3
 80064bc:	f109 0301 	add.w	r3, r9, #1
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	9308      	str	r3, [sp, #32]
 80064c4:	bfb8      	it	lt
 80064c6:	2301      	movlt	r3, #1
 80064c8:	e7dd      	b.n	8006486 <_dtoa_r+0x266>
 80064ca:	2301      	movs	r3, #1
 80064cc:	e7f2      	b.n	80064b4 <_dtoa_r+0x294>
 80064ce:	bf00      	nop
 80064d0:	636f4361 	.word	0x636f4361
 80064d4:	3fd287a7 	.word	0x3fd287a7
 80064d8:	8b60c8b3 	.word	0x8b60c8b3
 80064dc:	3fc68a28 	.word	0x3fc68a28
 80064e0:	509f79fb 	.word	0x509f79fb
 80064e4:	3fd34413 	.word	0x3fd34413
 80064e8:	08009896 	.word	0x08009896
 80064ec:	080098ad 	.word	0x080098ad
 80064f0:	7ff00000 	.word	0x7ff00000
 80064f4:	08009892 	.word	0x08009892
 80064f8:	08009889 	.word	0x08009889
 80064fc:	0800970d 	.word	0x0800970d
 8006500:	3ff80000 	.word	0x3ff80000
 8006504:	08009a18 	.word	0x08009a18
 8006508:	08009908 	.word	0x08009908
 800650c:	2401      	movs	r4, #1
 800650e:	2300      	movs	r3, #0
 8006510:	940b      	str	r4, [sp, #44]	; 0x2c
 8006512:	9322      	str	r3, [sp, #136]	; 0x88
 8006514:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006518:	2200      	movs	r2, #0
 800651a:	2312      	movs	r3, #18
 800651c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006520:	9223      	str	r2, [sp, #140]	; 0x8c
 8006522:	e7b0      	b.n	8006486 <_dtoa_r+0x266>
 8006524:	2301      	movs	r3, #1
 8006526:	930b      	str	r3, [sp, #44]	; 0x2c
 8006528:	e7f4      	b.n	8006514 <_dtoa_r+0x2f4>
 800652a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800652e:	464b      	mov	r3, r9
 8006530:	f8cd 9020 	str.w	r9, [sp, #32]
 8006534:	e7a7      	b.n	8006486 <_dtoa_r+0x266>
 8006536:	3101      	adds	r1, #1
 8006538:	6041      	str	r1, [r0, #4]
 800653a:	0052      	lsls	r2, r2, #1
 800653c:	e7a7      	b.n	800648e <_dtoa_r+0x26e>
 800653e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006540:	9a03      	ldr	r2, [sp, #12]
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	9b08      	ldr	r3, [sp, #32]
 8006546:	2b0e      	cmp	r3, #14
 8006548:	f200 80a8 	bhi.w	800669c <_dtoa_r+0x47c>
 800654c:	2c00      	cmp	r4, #0
 800654e:	f000 80a5 	beq.w	800669c <_dtoa_r+0x47c>
 8006552:	f1ba 0f00 	cmp.w	sl, #0
 8006556:	dd34      	ble.n	80065c2 <_dtoa_r+0x3a2>
 8006558:	4a9a      	ldr	r2, [pc, #616]	; (80067c4 <_dtoa_r+0x5a4>)
 800655a:	f00a 030f 	and.w	r3, sl, #15
 800655e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006562:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006566:	e9d3 3400 	ldrd	r3, r4, [r3]
 800656a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800656e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006572:	d016      	beq.n	80065a2 <_dtoa_r+0x382>
 8006574:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006578:	4b93      	ldr	r3, [pc, #588]	; (80067c8 <_dtoa_r+0x5a8>)
 800657a:	2703      	movs	r7, #3
 800657c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006580:	f7fa f8d4 	bl	800072c <__aeabi_ddiv>
 8006584:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006588:	f004 040f 	and.w	r4, r4, #15
 800658c:	4e8e      	ldr	r6, [pc, #568]	; (80067c8 <_dtoa_r+0x5a8>)
 800658e:	b954      	cbnz	r4, 80065a6 <_dtoa_r+0x386>
 8006590:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006598:	f7fa f8c8 	bl	800072c <__aeabi_ddiv>
 800659c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065a0:	e029      	b.n	80065f6 <_dtoa_r+0x3d6>
 80065a2:	2702      	movs	r7, #2
 80065a4:	e7f2      	b.n	800658c <_dtoa_r+0x36c>
 80065a6:	07e1      	lsls	r1, r4, #31
 80065a8:	d508      	bpl.n	80065bc <_dtoa_r+0x39c>
 80065aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065b2:	f7f9 ff91 	bl	80004d8 <__aeabi_dmul>
 80065b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065ba:	3701      	adds	r7, #1
 80065bc:	1064      	asrs	r4, r4, #1
 80065be:	3608      	adds	r6, #8
 80065c0:	e7e5      	b.n	800658e <_dtoa_r+0x36e>
 80065c2:	f000 80a5 	beq.w	8006710 <_dtoa_r+0x4f0>
 80065c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065ca:	f1ca 0400 	rsb	r4, sl, #0
 80065ce:	4b7d      	ldr	r3, [pc, #500]	; (80067c4 <_dtoa_r+0x5a4>)
 80065d0:	f004 020f 	and.w	r2, r4, #15
 80065d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065dc:	f7f9 ff7c 	bl	80004d8 <__aeabi_dmul>
 80065e0:	2702      	movs	r7, #2
 80065e2:	2300      	movs	r3, #0
 80065e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065e8:	4e77      	ldr	r6, [pc, #476]	; (80067c8 <_dtoa_r+0x5a8>)
 80065ea:	1124      	asrs	r4, r4, #4
 80065ec:	2c00      	cmp	r4, #0
 80065ee:	f040 8084 	bne.w	80066fa <_dtoa_r+0x4da>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1d2      	bne.n	800659c <_dtoa_r+0x37c>
 80065f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 808b 	beq.w	8006714 <_dtoa_r+0x4f4>
 80065fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006602:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006606:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800660a:	2200      	movs	r2, #0
 800660c:	4b6f      	ldr	r3, [pc, #444]	; (80067cc <_dtoa_r+0x5ac>)
 800660e:	f7fa f9d5 	bl	80009bc <__aeabi_dcmplt>
 8006612:	2800      	cmp	r0, #0
 8006614:	d07e      	beq.n	8006714 <_dtoa_r+0x4f4>
 8006616:	9b08      	ldr	r3, [sp, #32]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d07b      	beq.n	8006714 <_dtoa_r+0x4f4>
 800661c:	f1b9 0f00 	cmp.w	r9, #0
 8006620:	dd38      	ble.n	8006694 <_dtoa_r+0x474>
 8006622:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006626:	2200      	movs	r2, #0
 8006628:	4b69      	ldr	r3, [pc, #420]	; (80067d0 <_dtoa_r+0x5b0>)
 800662a:	f7f9 ff55 	bl	80004d8 <__aeabi_dmul>
 800662e:	464c      	mov	r4, r9
 8006630:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006634:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8006638:	3701      	adds	r7, #1
 800663a:	4638      	mov	r0, r7
 800663c:	f7f9 fee2 	bl	8000404 <__aeabi_i2d>
 8006640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006644:	f7f9 ff48 	bl	80004d8 <__aeabi_dmul>
 8006648:	2200      	movs	r2, #0
 800664a:	4b62      	ldr	r3, [pc, #392]	; (80067d4 <_dtoa_r+0x5b4>)
 800664c:	f7f9 fd8e 	bl	800016c <__adddf3>
 8006650:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006654:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006658:	9611      	str	r6, [sp, #68]	; 0x44
 800665a:	2c00      	cmp	r4, #0
 800665c:	d15d      	bne.n	800671a <_dtoa_r+0x4fa>
 800665e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006662:	2200      	movs	r2, #0
 8006664:	4b5c      	ldr	r3, [pc, #368]	; (80067d8 <_dtoa_r+0x5b8>)
 8006666:	f7f9 fd7f 	bl	8000168 <__aeabi_dsub>
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006672:	4633      	mov	r3, r6
 8006674:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006676:	f7fa f9bf 	bl	80009f8 <__aeabi_dcmpgt>
 800667a:	2800      	cmp	r0, #0
 800667c:	f040 829c 	bne.w	8006bb8 <_dtoa_r+0x998>
 8006680:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006684:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006686:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800668a:	f7fa f997 	bl	80009bc <__aeabi_dcmplt>
 800668e:	2800      	cmp	r0, #0
 8006690:	f040 8290 	bne.w	8006bb4 <_dtoa_r+0x994>
 8006694:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006698:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800669c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f2c0 8152 	blt.w	8006948 <_dtoa_r+0x728>
 80066a4:	f1ba 0f0e 	cmp.w	sl, #14
 80066a8:	f300 814e 	bgt.w	8006948 <_dtoa_r+0x728>
 80066ac:	4b45      	ldr	r3, [pc, #276]	; (80067c4 <_dtoa_r+0x5a4>)
 80066ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80066b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80066ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f280 80db 	bge.w	8006878 <_dtoa_r+0x658>
 80066c2:	9b08      	ldr	r3, [sp, #32]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f300 80d7 	bgt.w	8006878 <_dtoa_r+0x658>
 80066ca:	f040 8272 	bne.w	8006bb2 <_dtoa_r+0x992>
 80066ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066d2:	2200      	movs	r2, #0
 80066d4:	4b40      	ldr	r3, [pc, #256]	; (80067d8 <_dtoa_r+0x5b8>)
 80066d6:	f7f9 feff 	bl	80004d8 <__aeabi_dmul>
 80066da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066de:	f7fa f981 	bl	80009e4 <__aeabi_dcmpge>
 80066e2:	9c08      	ldr	r4, [sp, #32]
 80066e4:	4626      	mov	r6, r4
 80066e6:	2800      	cmp	r0, #0
 80066e8:	f040 8248 	bne.w	8006b7c <_dtoa_r+0x95c>
 80066ec:	2331      	movs	r3, #49	; 0x31
 80066ee:	9f03      	ldr	r7, [sp, #12]
 80066f0:	f10a 0a01 	add.w	sl, sl, #1
 80066f4:	f807 3b01 	strb.w	r3, [r7], #1
 80066f8:	e244      	b.n	8006b84 <_dtoa_r+0x964>
 80066fa:	07e2      	lsls	r2, r4, #31
 80066fc:	d505      	bpl.n	800670a <_dtoa_r+0x4ea>
 80066fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006702:	f7f9 fee9 	bl	80004d8 <__aeabi_dmul>
 8006706:	2301      	movs	r3, #1
 8006708:	3701      	adds	r7, #1
 800670a:	1064      	asrs	r4, r4, #1
 800670c:	3608      	adds	r6, #8
 800670e:	e76d      	b.n	80065ec <_dtoa_r+0x3cc>
 8006710:	2702      	movs	r7, #2
 8006712:	e770      	b.n	80065f6 <_dtoa_r+0x3d6>
 8006714:	46d0      	mov	r8, sl
 8006716:	9c08      	ldr	r4, [sp, #32]
 8006718:	e78f      	b.n	800663a <_dtoa_r+0x41a>
 800671a:	9903      	ldr	r1, [sp, #12]
 800671c:	4b29      	ldr	r3, [pc, #164]	; (80067c4 <_dtoa_r+0x5a4>)
 800671e:	4421      	add	r1, r4
 8006720:	9112      	str	r1, [sp, #72]	; 0x48
 8006722:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006724:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006728:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800672c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006730:	2900      	cmp	r1, #0
 8006732:	d055      	beq.n	80067e0 <_dtoa_r+0x5c0>
 8006734:	2000      	movs	r0, #0
 8006736:	4929      	ldr	r1, [pc, #164]	; (80067dc <_dtoa_r+0x5bc>)
 8006738:	f7f9 fff8 	bl	800072c <__aeabi_ddiv>
 800673c:	463b      	mov	r3, r7
 800673e:	4632      	mov	r2, r6
 8006740:	f7f9 fd12 	bl	8000168 <__aeabi_dsub>
 8006744:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006748:	9f03      	ldr	r7, [sp, #12]
 800674a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800674e:	f7fa f973 	bl	8000a38 <__aeabi_d2iz>
 8006752:	4604      	mov	r4, r0
 8006754:	f7f9 fe56 	bl	8000404 <__aeabi_i2d>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006760:	f7f9 fd02 	bl	8000168 <__aeabi_dsub>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	3430      	adds	r4, #48	; 0x30
 800676a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800676e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006772:	f807 4b01 	strb.w	r4, [r7], #1
 8006776:	f7fa f921 	bl	80009bc <__aeabi_dcmplt>
 800677a:	2800      	cmp	r0, #0
 800677c:	d174      	bne.n	8006868 <_dtoa_r+0x648>
 800677e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006782:	2000      	movs	r0, #0
 8006784:	4911      	ldr	r1, [pc, #68]	; (80067cc <_dtoa_r+0x5ac>)
 8006786:	f7f9 fcef 	bl	8000168 <__aeabi_dsub>
 800678a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800678e:	f7fa f915 	bl	80009bc <__aeabi_dcmplt>
 8006792:	2800      	cmp	r0, #0
 8006794:	f040 80b7 	bne.w	8006906 <_dtoa_r+0x6e6>
 8006798:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800679a:	429f      	cmp	r7, r3
 800679c:	f43f af7a 	beq.w	8006694 <_dtoa_r+0x474>
 80067a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067a4:	2200      	movs	r2, #0
 80067a6:	4b0a      	ldr	r3, [pc, #40]	; (80067d0 <_dtoa_r+0x5b0>)
 80067a8:	f7f9 fe96 	bl	80004d8 <__aeabi_dmul>
 80067ac:	2200      	movs	r2, #0
 80067ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067b6:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <_dtoa_r+0x5b0>)
 80067b8:	f7f9 fe8e 	bl	80004d8 <__aeabi_dmul>
 80067bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067c0:	e7c3      	b.n	800674a <_dtoa_r+0x52a>
 80067c2:	bf00      	nop
 80067c4:	08009a18 	.word	0x08009a18
 80067c8:	080099f0 	.word	0x080099f0
 80067cc:	3ff00000 	.word	0x3ff00000
 80067d0:	40240000 	.word	0x40240000
 80067d4:	401c0000 	.word	0x401c0000
 80067d8:	40140000 	.word	0x40140000
 80067dc:	3fe00000 	.word	0x3fe00000
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	f7f9 fe78 	bl	80004d8 <__aeabi_dmul>
 80067e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067ee:	9c03      	ldr	r4, [sp, #12]
 80067f0:	9314      	str	r3, [sp, #80]	; 0x50
 80067f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067f6:	f7fa f91f 	bl	8000a38 <__aeabi_d2iz>
 80067fa:	9015      	str	r0, [sp, #84]	; 0x54
 80067fc:	f7f9 fe02 	bl	8000404 <__aeabi_i2d>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006808:	f7f9 fcae 	bl	8000168 <__aeabi_dsub>
 800680c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800680e:	4606      	mov	r6, r0
 8006810:	3330      	adds	r3, #48	; 0x30
 8006812:	f804 3b01 	strb.w	r3, [r4], #1
 8006816:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006818:	460f      	mov	r7, r1
 800681a:	429c      	cmp	r4, r3
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	d124      	bne.n	800686c <_dtoa_r+0x64c>
 8006822:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006826:	4bb0      	ldr	r3, [pc, #704]	; (8006ae8 <_dtoa_r+0x8c8>)
 8006828:	f7f9 fca0 	bl	800016c <__adddf3>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4630      	mov	r0, r6
 8006832:	4639      	mov	r1, r7
 8006834:	f7fa f8e0 	bl	80009f8 <__aeabi_dcmpgt>
 8006838:	2800      	cmp	r0, #0
 800683a:	d163      	bne.n	8006904 <_dtoa_r+0x6e4>
 800683c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006840:	2000      	movs	r0, #0
 8006842:	49a9      	ldr	r1, [pc, #676]	; (8006ae8 <_dtoa_r+0x8c8>)
 8006844:	f7f9 fc90 	bl	8000168 <__aeabi_dsub>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4630      	mov	r0, r6
 800684e:	4639      	mov	r1, r7
 8006850:	f7fa f8b4 	bl	80009bc <__aeabi_dcmplt>
 8006854:	2800      	cmp	r0, #0
 8006856:	f43f af1d 	beq.w	8006694 <_dtoa_r+0x474>
 800685a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800685c:	1e7b      	subs	r3, r7, #1
 800685e:	9314      	str	r3, [sp, #80]	; 0x50
 8006860:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006864:	2b30      	cmp	r3, #48	; 0x30
 8006866:	d0f8      	beq.n	800685a <_dtoa_r+0x63a>
 8006868:	46c2      	mov	sl, r8
 800686a:	e03b      	b.n	80068e4 <_dtoa_r+0x6c4>
 800686c:	4b9f      	ldr	r3, [pc, #636]	; (8006aec <_dtoa_r+0x8cc>)
 800686e:	f7f9 fe33 	bl	80004d8 <__aeabi_dmul>
 8006872:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006876:	e7bc      	b.n	80067f2 <_dtoa_r+0x5d2>
 8006878:	9f03      	ldr	r7, [sp, #12]
 800687a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800687e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006882:	4640      	mov	r0, r8
 8006884:	4649      	mov	r1, r9
 8006886:	f7f9 ff51 	bl	800072c <__aeabi_ddiv>
 800688a:	f7fa f8d5 	bl	8000a38 <__aeabi_d2iz>
 800688e:	4604      	mov	r4, r0
 8006890:	f7f9 fdb8 	bl	8000404 <__aeabi_i2d>
 8006894:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006898:	f7f9 fe1e 	bl	80004d8 <__aeabi_dmul>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	4640      	mov	r0, r8
 80068a2:	4649      	mov	r1, r9
 80068a4:	f7f9 fc60 	bl	8000168 <__aeabi_dsub>
 80068a8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80068ac:	f807 6b01 	strb.w	r6, [r7], #1
 80068b0:	9e03      	ldr	r6, [sp, #12]
 80068b2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80068b6:	1bbe      	subs	r6, r7, r6
 80068b8:	45b4      	cmp	ip, r6
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	d136      	bne.n	800692e <_dtoa_r+0x70e>
 80068c0:	f7f9 fc54 	bl	800016c <__adddf3>
 80068c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068c8:	4680      	mov	r8, r0
 80068ca:	4689      	mov	r9, r1
 80068cc:	f7fa f894 	bl	80009f8 <__aeabi_dcmpgt>
 80068d0:	bb58      	cbnz	r0, 800692a <_dtoa_r+0x70a>
 80068d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068d6:	4640      	mov	r0, r8
 80068d8:	4649      	mov	r1, r9
 80068da:	f7fa f865 	bl	80009a8 <__aeabi_dcmpeq>
 80068de:	b108      	cbz	r0, 80068e4 <_dtoa_r+0x6c4>
 80068e0:	07e1      	lsls	r1, r4, #31
 80068e2:	d422      	bmi.n	800692a <_dtoa_r+0x70a>
 80068e4:	4628      	mov	r0, r5
 80068e6:	4659      	mov	r1, fp
 80068e8:	f000 fe68 	bl	80075bc <_Bfree>
 80068ec:	2300      	movs	r3, #0
 80068ee:	703b      	strb	r3, [r7, #0]
 80068f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80068f2:	f10a 0001 	add.w	r0, sl, #1
 80068f6:	6018      	str	r0, [r3, #0]
 80068f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f43f acde 	beq.w	80062bc <_dtoa_r+0x9c>
 8006900:	601f      	str	r7, [r3, #0]
 8006902:	e4db      	b.n	80062bc <_dtoa_r+0x9c>
 8006904:	4627      	mov	r7, r4
 8006906:	463b      	mov	r3, r7
 8006908:	461f      	mov	r7, r3
 800690a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800690e:	2a39      	cmp	r2, #57	; 0x39
 8006910:	d107      	bne.n	8006922 <_dtoa_r+0x702>
 8006912:	9a03      	ldr	r2, [sp, #12]
 8006914:	429a      	cmp	r2, r3
 8006916:	d1f7      	bne.n	8006908 <_dtoa_r+0x6e8>
 8006918:	2230      	movs	r2, #48	; 0x30
 800691a:	9903      	ldr	r1, [sp, #12]
 800691c:	f108 0801 	add.w	r8, r8, #1
 8006920:	700a      	strb	r2, [r1, #0]
 8006922:	781a      	ldrb	r2, [r3, #0]
 8006924:	3201      	adds	r2, #1
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	e79e      	b.n	8006868 <_dtoa_r+0x648>
 800692a:	46d0      	mov	r8, sl
 800692c:	e7eb      	b.n	8006906 <_dtoa_r+0x6e6>
 800692e:	2200      	movs	r2, #0
 8006930:	4b6e      	ldr	r3, [pc, #440]	; (8006aec <_dtoa_r+0x8cc>)
 8006932:	f7f9 fdd1 	bl	80004d8 <__aeabi_dmul>
 8006936:	2200      	movs	r2, #0
 8006938:	2300      	movs	r3, #0
 800693a:	4680      	mov	r8, r0
 800693c:	4689      	mov	r9, r1
 800693e:	f7fa f833 	bl	80009a8 <__aeabi_dcmpeq>
 8006942:	2800      	cmp	r0, #0
 8006944:	d09b      	beq.n	800687e <_dtoa_r+0x65e>
 8006946:	e7cd      	b.n	80068e4 <_dtoa_r+0x6c4>
 8006948:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800694a:	2a00      	cmp	r2, #0
 800694c:	f000 80d0 	beq.w	8006af0 <_dtoa_r+0x8d0>
 8006950:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006952:	2a01      	cmp	r2, #1
 8006954:	f300 80ae 	bgt.w	8006ab4 <_dtoa_r+0x894>
 8006958:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800695a:	2a00      	cmp	r2, #0
 800695c:	f000 80a6 	beq.w	8006aac <_dtoa_r+0x88c>
 8006960:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006964:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006966:	9f06      	ldr	r7, [sp, #24]
 8006968:	9a06      	ldr	r2, [sp, #24]
 800696a:	2101      	movs	r1, #1
 800696c:	441a      	add	r2, r3
 800696e:	9206      	str	r2, [sp, #24]
 8006970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006972:	4628      	mov	r0, r5
 8006974:	441a      	add	r2, r3
 8006976:	9209      	str	r2, [sp, #36]	; 0x24
 8006978:	f000 ff20 	bl	80077bc <__i2b>
 800697c:	4606      	mov	r6, r0
 800697e:	2f00      	cmp	r7, #0
 8006980:	dd0c      	ble.n	800699c <_dtoa_r+0x77c>
 8006982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006984:	2b00      	cmp	r3, #0
 8006986:	dd09      	ble.n	800699c <_dtoa_r+0x77c>
 8006988:	42bb      	cmp	r3, r7
 800698a:	bfa8      	it	ge
 800698c:	463b      	movge	r3, r7
 800698e:	9a06      	ldr	r2, [sp, #24]
 8006990:	1aff      	subs	r7, r7, r3
 8006992:	1ad2      	subs	r2, r2, r3
 8006994:	9206      	str	r2, [sp, #24]
 8006996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	9309      	str	r3, [sp, #36]	; 0x24
 800699c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800699e:	b1f3      	cbz	r3, 80069de <_dtoa_r+0x7be>
 80069a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 80a8 	beq.w	8006af8 <_dtoa_r+0x8d8>
 80069a8:	2c00      	cmp	r4, #0
 80069aa:	dd10      	ble.n	80069ce <_dtoa_r+0x7ae>
 80069ac:	4631      	mov	r1, r6
 80069ae:	4622      	mov	r2, r4
 80069b0:	4628      	mov	r0, r5
 80069b2:	f000 ffc1 	bl	8007938 <__pow5mult>
 80069b6:	465a      	mov	r2, fp
 80069b8:	4601      	mov	r1, r0
 80069ba:	4606      	mov	r6, r0
 80069bc:	4628      	mov	r0, r5
 80069be:	f000 ff13 	bl	80077e8 <__multiply>
 80069c2:	4680      	mov	r8, r0
 80069c4:	4659      	mov	r1, fp
 80069c6:	4628      	mov	r0, r5
 80069c8:	f000 fdf8 	bl	80075bc <_Bfree>
 80069cc:	46c3      	mov	fp, r8
 80069ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d0:	1b1a      	subs	r2, r3, r4
 80069d2:	d004      	beq.n	80069de <_dtoa_r+0x7be>
 80069d4:	4659      	mov	r1, fp
 80069d6:	4628      	mov	r0, r5
 80069d8:	f000 ffae 	bl	8007938 <__pow5mult>
 80069dc:	4683      	mov	fp, r0
 80069de:	2101      	movs	r1, #1
 80069e0:	4628      	mov	r0, r5
 80069e2:	f000 feeb 	bl	80077bc <__i2b>
 80069e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069e8:	4604      	mov	r4, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f340 8086 	ble.w	8006afc <_dtoa_r+0x8dc>
 80069f0:	461a      	mov	r2, r3
 80069f2:	4601      	mov	r1, r0
 80069f4:	4628      	mov	r0, r5
 80069f6:	f000 ff9f 	bl	8007938 <__pow5mult>
 80069fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069fc:	4604      	mov	r4, r0
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	dd7f      	ble.n	8006b02 <_dtoa_r+0x8e2>
 8006a02:	f04f 0800 	mov.w	r8, #0
 8006a06:	6923      	ldr	r3, [r4, #16]
 8006a08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a0c:	6918      	ldr	r0, [r3, #16]
 8006a0e:	f000 fe87 	bl	8007720 <__hi0bits>
 8006a12:	f1c0 0020 	rsb	r0, r0, #32
 8006a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a18:	4418      	add	r0, r3
 8006a1a:	f010 001f 	ands.w	r0, r0, #31
 8006a1e:	f000 8092 	beq.w	8006b46 <_dtoa_r+0x926>
 8006a22:	f1c0 0320 	rsb	r3, r0, #32
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	f340 808a 	ble.w	8006b40 <_dtoa_r+0x920>
 8006a2c:	f1c0 001c 	rsb	r0, r0, #28
 8006a30:	9b06      	ldr	r3, [sp, #24]
 8006a32:	4407      	add	r7, r0
 8006a34:	4403      	add	r3, r0
 8006a36:	9306      	str	r3, [sp, #24]
 8006a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a3a:	4403      	add	r3, r0
 8006a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a3e:	9b06      	ldr	r3, [sp, #24]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	dd05      	ble.n	8006a50 <_dtoa_r+0x830>
 8006a44:	4659      	mov	r1, fp
 8006a46:	461a      	mov	r2, r3
 8006a48:	4628      	mov	r0, r5
 8006a4a:	f000 ffcf 	bl	80079ec <__lshift>
 8006a4e:	4683      	mov	fp, r0
 8006a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	dd05      	ble.n	8006a62 <_dtoa_r+0x842>
 8006a56:	4621      	mov	r1, r4
 8006a58:	461a      	mov	r2, r3
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	f000 ffc6 	bl	80079ec <__lshift>
 8006a60:	4604      	mov	r4, r0
 8006a62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d070      	beq.n	8006b4a <_dtoa_r+0x92a>
 8006a68:	4621      	mov	r1, r4
 8006a6a:	4658      	mov	r0, fp
 8006a6c:	f001 f82e 	bl	8007acc <__mcmp>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	da6a      	bge.n	8006b4a <_dtoa_r+0x92a>
 8006a74:	2300      	movs	r3, #0
 8006a76:	4659      	mov	r1, fp
 8006a78:	220a      	movs	r2, #10
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f000 fdc0 	bl	8007600 <__multadd>
 8006a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a82:	4683      	mov	fp, r0
 8006a84:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8194 	beq.w	8006db6 <_dtoa_r+0xb96>
 8006a8e:	4631      	mov	r1, r6
 8006a90:	2300      	movs	r3, #0
 8006a92:	220a      	movs	r2, #10
 8006a94:	4628      	mov	r0, r5
 8006a96:	f000 fdb3 	bl	8007600 <__multadd>
 8006a9a:	f1b9 0f00 	cmp.w	r9, #0
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	f300 8093 	bgt.w	8006bca <_dtoa_r+0x9aa>
 8006aa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	dc57      	bgt.n	8006b5a <_dtoa_r+0x93a>
 8006aaa:	e08e      	b.n	8006bca <_dtoa_r+0x9aa>
 8006aac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006aae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ab2:	e757      	b.n	8006964 <_dtoa_r+0x744>
 8006ab4:	9b08      	ldr	r3, [sp, #32]
 8006ab6:	1e5c      	subs	r4, r3, #1
 8006ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aba:	42a3      	cmp	r3, r4
 8006abc:	bfb7      	itett	lt
 8006abe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ac0:	1b1c      	subge	r4, r3, r4
 8006ac2:	1ae2      	sublt	r2, r4, r3
 8006ac4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006ac6:	bfbe      	ittt	lt
 8006ac8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006aca:	189b      	addlt	r3, r3, r2
 8006acc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006ace:	9b08      	ldr	r3, [sp, #32]
 8006ad0:	bfb8      	it	lt
 8006ad2:	2400      	movlt	r4, #0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	bfbb      	ittet	lt
 8006ad8:	9b06      	ldrlt	r3, [sp, #24]
 8006ada:	9a08      	ldrlt	r2, [sp, #32]
 8006adc:	9f06      	ldrge	r7, [sp, #24]
 8006ade:	1a9f      	sublt	r7, r3, r2
 8006ae0:	bfac      	ite	ge
 8006ae2:	9b08      	ldrge	r3, [sp, #32]
 8006ae4:	2300      	movlt	r3, #0
 8006ae6:	e73f      	b.n	8006968 <_dtoa_r+0x748>
 8006ae8:	3fe00000 	.word	0x3fe00000
 8006aec:	40240000 	.word	0x40240000
 8006af0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006af2:	9f06      	ldr	r7, [sp, #24]
 8006af4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006af6:	e742      	b.n	800697e <_dtoa_r+0x75e>
 8006af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006afa:	e76b      	b.n	80069d4 <_dtoa_r+0x7b4>
 8006afc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	dc19      	bgt.n	8006b36 <_dtoa_r+0x916>
 8006b02:	9b04      	ldr	r3, [sp, #16]
 8006b04:	b9bb      	cbnz	r3, 8006b36 <_dtoa_r+0x916>
 8006b06:	9b05      	ldr	r3, [sp, #20]
 8006b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b0c:	b99b      	cbnz	r3, 8006b36 <_dtoa_r+0x916>
 8006b0e:	9b05      	ldr	r3, [sp, #20]
 8006b10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b14:	0d1b      	lsrs	r3, r3, #20
 8006b16:	051b      	lsls	r3, r3, #20
 8006b18:	b183      	cbz	r3, 8006b3c <_dtoa_r+0x91c>
 8006b1a:	f04f 0801 	mov.w	r8, #1
 8006b1e:	9b06      	ldr	r3, [sp, #24]
 8006b20:	3301      	adds	r3, #1
 8006b22:	9306      	str	r3, [sp, #24]
 8006b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b26:	3301      	adds	r3, #1
 8006b28:	9309      	str	r3, [sp, #36]	; 0x24
 8006b2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f47f af6a 	bne.w	8006a06 <_dtoa_r+0x7e6>
 8006b32:	2001      	movs	r0, #1
 8006b34:	e76f      	b.n	8006a16 <_dtoa_r+0x7f6>
 8006b36:	f04f 0800 	mov.w	r8, #0
 8006b3a:	e7f6      	b.n	8006b2a <_dtoa_r+0x90a>
 8006b3c:	4698      	mov	r8, r3
 8006b3e:	e7f4      	b.n	8006b2a <_dtoa_r+0x90a>
 8006b40:	f43f af7d 	beq.w	8006a3e <_dtoa_r+0x81e>
 8006b44:	4618      	mov	r0, r3
 8006b46:	301c      	adds	r0, #28
 8006b48:	e772      	b.n	8006a30 <_dtoa_r+0x810>
 8006b4a:	9b08      	ldr	r3, [sp, #32]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	dc36      	bgt.n	8006bbe <_dtoa_r+0x99e>
 8006b50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	dd33      	ble.n	8006bbe <_dtoa_r+0x99e>
 8006b56:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b5a:	f1b9 0f00 	cmp.w	r9, #0
 8006b5e:	d10d      	bne.n	8006b7c <_dtoa_r+0x95c>
 8006b60:	4621      	mov	r1, r4
 8006b62:	464b      	mov	r3, r9
 8006b64:	2205      	movs	r2, #5
 8006b66:	4628      	mov	r0, r5
 8006b68:	f000 fd4a 	bl	8007600 <__multadd>
 8006b6c:	4601      	mov	r1, r0
 8006b6e:	4604      	mov	r4, r0
 8006b70:	4658      	mov	r0, fp
 8006b72:	f000 ffab 	bl	8007acc <__mcmp>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	f73f adb8 	bgt.w	80066ec <_dtoa_r+0x4cc>
 8006b7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b7e:	9f03      	ldr	r7, [sp, #12]
 8006b80:	ea6f 0a03 	mvn.w	sl, r3
 8006b84:	f04f 0800 	mov.w	r8, #0
 8006b88:	4621      	mov	r1, r4
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	f000 fd16 	bl	80075bc <_Bfree>
 8006b90:	2e00      	cmp	r6, #0
 8006b92:	f43f aea7 	beq.w	80068e4 <_dtoa_r+0x6c4>
 8006b96:	f1b8 0f00 	cmp.w	r8, #0
 8006b9a:	d005      	beq.n	8006ba8 <_dtoa_r+0x988>
 8006b9c:	45b0      	cmp	r8, r6
 8006b9e:	d003      	beq.n	8006ba8 <_dtoa_r+0x988>
 8006ba0:	4641      	mov	r1, r8
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f000 fd0a 	bl	80075bc <_Bfree>
 8006ba8:	4631      	mov	r1, r6
 8006baa:	4628      	mov	r0, r5
 8006bac:	f000 fd06 	bl	80075bc <_Bfree>
 8006bb0:	e698      	b.n	80068e4 <_dtoa_r+0x6c4>
 8006bb2:	2400      	movs	r4, #0
 8006bb4:	4626      	mov	r6, r4
 8006bb6:	e7e1      	b.n	8006b7c <_dtoa_r+0x95c>
 8006bb8:	46c2      	mov	sl, r8
 8006bba:	4626      	mov	r6, r4
 8006bbc:	e596      	b.n	80066ec <_dtoa_r+0x4cc>
 8006bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 80fd 	beq.w	8006dc4 <_dtoa_r+0xba4>
 8006bca:	2f00      	cmp	r7, #0
 8006bcc:	dd05      	ble.n	8006bda <_dtoa_r+0x9ba>
 8006bce:	4631      	mov	r1, r6
 8006bd0:	463a      	mov	r2, r7
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f000 ff0a 	bl	80079ec <__lshift>
 8006bd8:	4606      	mov	r6, r0
 8006bda:	f1b8 0f00 	cmp.w	r8, #0
 8006bde:	d05c      	beq.n	8006c9a <_dtoa_r+0xa7a>
 8006be0:	4628      	mov	r0, r5
 8006be2:	6871      	ldr	r1, [r6, #4]
 8006be4:	f000 fcaa 	bl	800753c <_Balloc>
 8006be8:	4607      	mov	r7, r0
 8006bea:	b928      	cbnz	r0, 8006bf8 <_dtoa_r+0x9d8>
 8006bec:	4602      	mov	r2, r0
 8006bee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006bf2:	4b7f      	ldr	r3, [pc, #508]	; (8006df0 <_dtoa_r+0xbd0>)
 8006bf4:	f7ff bb28 	b.w	8006248 <_dtoa_r+0x28>
 8006bf8:	6932      	ldr	r2, [r6, #16]
 8006bfa:	f106 010c 	add.w	r1, r6, #12
 8006bfe:	3202      	adds	r2, #2
 8006c00:	0092      	lsls	r2, r2, #2
 8006c02:	300c      	adds	r0, #12
 8006c04:	f000 fc8c 	bl	8007520 <memcpy>
 8006c08:	2201      	movs	r2, #1
 8006c0a:	4639      	mov	r1, r7
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	f000 feed 	bl	80079ec <__lshift>
 8006c12:	46b0      	mov	r8, r6
 8006c14:	4606      	mov	r6, r0
 8006c16:	9b03      	ldr	r3, [sp, #12]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	9308      	str	r3, [sp, #32]
 8006c1c:	9b03      	ldr	r3, [sp, #12]
 8006c1e:	444b      	add	r3, r9
 8006c20:	930a      	str	r3, [sp, #40]	; 0x28
 8006c22:	9b04      	ldr	r3, [sp, #16]
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	9309      	str	r3, [sp, #36]	; 0x24
 8006c2a:	9b08      	ldr	r3, [sp, #32]
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	4658      	mov	r0, fp
 8006c32:	9304      	str	r3, [sp, #16]
 8006c34:	f7ff fa68 	bl	8006108 <quorem>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	4641      	mov	r1, r8
 8006c3c:	3330      	adds	r3, #48	; 0x30
 8006c3e:	9006      	str	r0, [sp, #24]
 8006c40:	4658      	mov	r0, fp
 8006c42:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c44:	f000 ff42 	bl	8007acc <__mcmp>
 8006c48:	4632      	mov	r2, r6
 8006c4a:	4681      	mov	r9, r0
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f000 ff58 	bl	8007b04 <__mdiff>
 8006c54:	68c2      	ldr	r2, [r0, #12]
 8006c56:	4607      	mov	r7, r0
 8006c58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c5a:	bb02      	cbnz	r2, 8006c9e <_dtoa_r+0xa7e>
 8006c5c:	4601      	mov	r1, r0
 8006c5e:	4658      	mov	r0, fp
 8006c60:	f000 ff34 	bl	8007acc <__mcmp>
 8006c64:	4602      	mov	r2, r0
 8006c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c68:	4639      	mov	r1, r7
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006c70:	f000 fca4 	bl	80075bc <_Bfree>
 8006c74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c78:	9f08      	ldr	r7, [sp, #32]
 8006c7a:	ea43 0102 	orr.w	r1, r3, r2
 8006c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c80:	430b      	orrs	r3, r1
 8006c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c84:	d10d      	bne.n	8006ca2 <_dtoa_r+0xa82>
 8006c86:	2b39      	cmp	r3, #57	; 0x39
 8006c88:	d029      	beq.n	8006cde <_dtoa_r+0xabe>
 8006c8a:	f1b9 0f00 	cmp.w	r9, #0
 8006c8e:	dd01      	ble.n	8006c94 <_dtoa_r+0xa74>
 8006c90:	9b06      	ldr	r3, [sp, #24]
 8006c92:	3331      	adds	r3, #49	; 0x31
 8006c94:	9a04      	ldr	r2, [sp, #16]
 8006c96:	7013      	strb	r3, [r2, #0]
 8006c98:	e776      	b.n	8006b88 <_dtoa_r+0x968>
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	e7b9      	b.n	8006c12 <_dtoa_r+0x9f2>
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	e7e2      	b.n	8006c68 <_dtoa_r+0xa48>
 8006ca2:	f1b9 0f00 	cmp.w	r9, #0
 8006ca6:	db06      	blt.n	8006cb6 <_dtoa_r+0xa96>
 8006ca8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006caa:	ea41 0909 	orr.w	r9, r1, r9
 8006cae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cb0:	ea59 0101 	orrs.w	r1, r9, r1
 8006cb4:	d120      	bne.n	8006cf8 <_dtoa_r+0xad8>
 8006cb6:	2a00      	cmp	r2, #0
 8006cb8:	ddec      	ble.n	8006c94 <_dtoa_r+0xa74>
 8006cba:	4659      	mov	r1, fp
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	9308      	str	r3, [sp, #32]
 8006cc2:	f000 fe93 	bl	80079ec <__lshift>
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	4683      	mov	fp, r0
 8006cca:	f000 feff 	bl	8007acc <__mcmp>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	9b08      	ldr	r3, [sp, #32]
 8006cd2:	dc02      	bgt.n	8006cda <_dtoa_r+0xaba>
 8006cd4:	d1de      	bne.n	8006c94 <_dtoa_r+0xa74>
 8006cd6:	07da      	lsls	r2, r3, #31
 8006cd8:	d5dc      	bpl.n	8006c94 <_dtoa_r+0xa74>
 8006cda:	2b39      	cmp	r3, #57	; 0x39
 8006cdc:	d1d8      	bne.n	8006c90 <_dtoa_r+0xa70>
 8006cde:	2339      	movs	r3, #57	; 0x39
 8006ce0:	9a04      	ldr	r2, [sp, #16]
 8006ce2:	7013      	strb	r3, [r2, #0]
 8006ce4:	463b      	mov	r3, r7
 8006ce6:	461f      	mov	r7, r3
 8006ce8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006cec:	3b01      	subs	r3, #1
 8006cee:	2a39      	cmp	r2, #57	; 0x39
 8006cf0:	d050      	beq.n	8006d94 <_dtoa_r+0xb74>
 8006cf2:	3201      	adds	r2, #1
 8006cf4:	701a      	strb	r2, [r3, #0]
 8006cf6:	e747      	b.n	8006b88 <_dtoa_r+0x968>
 8006cf8:	2a00      	cmp	r2, #0
 8006cfa:	dd03      	ble.n	8006d04 <_dtoa_r+0xae4>
 8006cfc:	2b39      	cmp	r3, #57	; 0x39
 8006cfe:	d0ee      	beq.n	8006cde <_dtoa_r+0xabe>
 8006d00:	3301      	adds	r3, #1
 8006d02:	e7c7      	b.n	8006c94 <_dtoa_r+0xa74>
 8006d04:	9a08      	ldr	r2, [sp, #32]
 8006d06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d08:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006d0c:	428a      	cmp	r2, r1
 8006d0e:	d02a      	beq.n	8006d66 <_dtoa_r+0xb46>
 8006d10:	4659      	mov	r1, fp
 8006d12:	2300      	movs	r3, #0
 8006d14:	220a      	movs	r2, #10
 8006d16:	4628      	mov	r0, r5
 8006d18:	f000 fc72 	bl	8007600 <__multadd>
 8006d1c:	45b0      	cmp	r8, r6
 8006d1e:	4683      	mov	fp, r0
 8006d20:	f04f 0300 	mov.w	r3, #0
 8006d24:	f04f 020a 	mov.w	r2, #10
 8006d28:	4641      	mov	r1, r8
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	d107      	bne.n	8006d3e <_dtoa_r+0xb1e>
 8006d2e:	f000 fc67 	bl	8007600 <__multadd>
 8006d32:	4680      	mov	r8, r0
 8006d34:	4606      	mov	r6, r0
 8006d36:	9b08      	ldr	r3, [sp, #32]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	9308      	str	r3, [sp, #32]
 8006d3c:	e775      	b.n	8006c2a <_dtoa_r+0xa0a>
 8006d3e:	f000 fc5f 	bl	8007600 <__multadd>
 8006d42:	4631      	mov	r1, r6
 8006d44:	4680      	mov	r8, r0
 8006d46:	2300      	movs	r3, #0
 8006d48:	220a      	movs	r2, #10
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	f000 fc58 	bl	8007600 <__multadd>
 8006d50:	4606      	mov	r6, r0
 8006d52:	e7f0      	b.n	8006d36 <_dtoa_r+0xb16>
 8006d54:	f1b9 0f00 	cmp.w	r9, #0
 8006d58:	bfcc      	ite	gt
 8006d5a:	464f      	movgt	r7, r9
 8006d5c:	2701      	movle	r7, #1
 8006d5e:	f04f 0800 	mov.w	r8, #0
 8006d62:	9a03      	ldr	r2, [sp, #12]
 8006d64:	4417      	add	r7, r2
 8006d66:	4659      	mov	r1, fp
 8006d68:	2201      	movs	r2, #1
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	9308      	str	r3, [sp, #32]
 8006d6e:	f000 fe3d 	bl	80079ec <__lshift>
 8006d72:	4621      	mov	r1, r4
 8006d74:	4683      	mov	fp, r0
 8006d76:	f000 fea9 	bl	8007acc <__mcmp>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	dcb2      	bgt.n	8006ce4 <_dtoa_r+0xac4>
 8006d7e:	d102      	bne.n	8006d86 <_dtoa_r+0xb66>
 8006d80:	9b08      	ldr	r3, [sp, #32]
 8006d82:	07db      	lsls	r3, r3, #31
 8006d84:	d4ae      	bmi.n	8006ce4 <_dtoa_r+0xac4>
 8006d86:	463b      	mov	r3, r7
 8006d88:	461f      	mov	r7, r3
 8006d8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d8e:	2a30      	cmp	r2, #48	; 0x30
 8006d90:	d0fa      	beq.n	8006d88 <_dtoa_r+0xb68>
 8006d92:	e6f9      	b.n	8006b88 <_dtoa_r+0x968>
 8006d94:	9a03      	ldr	r2, [sp, #12]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d1a5      	bne.n	8006ce6 <_dtoa_r+0xac6>
 8006d9a:	2331      	movs	r3, #49	; 0x31
 8006d9c:	f10a 0a01 	add.w	sl, sl, #1
 8006da0:	e779      	b.n	8006c96 <_dtoa_r+0xa76>
 8006da2:	4b14      	ldr	r3, [pc, #80]	; (8006df4 <_dtoa_r+0xbd4>)
 8006da4:	f7ff baa8 	b.w	80062f8 <_dtoa_r+0xd8>
 8006da8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f47f aa81 	bne.w	80062b2 <_dtoa_r+0x92>
 8006db0:	4b11      	ldr	r3, [pc, #68]	; (8006df8 <_dtoa_r+0xbd8>)
 8006db2:	f7ff baa1 	b.w	80062f8 <_dtoa_r+0xd8>
 8006db6:	f1b9 0f00 	cmp.w	r9, #0
 8006dba:	dc03      	bgt.n	8006dc4 <_dtoa_r+0xba4>
 8006dbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	f73f aecb 	bgt.w	8006b5a <_dtoa_r+0x93a>
 8006dc4:	9f03      	ldr	r7, [sp, #12]
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	4658      	mov	r0, fp
 8006dca:	f7ff f99d 	bl	8006108 <quorem>
 8006dce:	9a03      	ldr	r2, [sp, #12]
 8006dd0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006dd4:	f807 3b01 	strb.w	r3, [r7], #1
 8006dd8:	1aba      	subs	r2, r7, r2
 8006dda:	4591      	cmp	r9, r2
 8006ddc:	ddba      	ble.n	8006d54 <_dtoa_r+0xb34>
 8006dde:	4659      	mov	r1, fp
 8006de0:	2300      	movs	r3, #0
 8006de2:	220a      	movs	r2, #10
 8006de4:	4628      	mov	r0, r5
 8006de6:	f000 fc0b 	bl	8007600 <__multadd>
 8006dea:	4683      	mov	fp, r0
 8006dec:	e7eb      	b.n	8006dc6 <_dtoa_r+0xba6>
 8006dee:	bf00      	nop
 8006df0:	08009908 	.word	0x08009908
 8006df4:	0800970c 	.word	0x0800970c
 8006df8:	08009889 	.word	0x08009889

08006dfc <rshift>:
 8006dfc:	6903      	ldr	r3, [r0, #16]
 8006dfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e02:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006e06:	f100 0414 	add.w	r4, r0, #20
 8006e0a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006e0e:	dd46      	ble.n	8006e9e <rshift+0xa2>
 8006e10:	f011 011f 	ands.w	r1, r1, #31
 8006e14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006e18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006e1c:	d10c      	bne.n	8006e38 <rshift+0x3c>
 8006e1e:	4629      	mov	r1, r5
 8006e20:	f100 0710 	add.w	r7, r0, #16
 8006e24:	42b1      	cmp	r1, r6
 8006e26:	d335      	bcc.n	8006e94 <rshift+0x98>
 8006e28:	1a9b      	subs	r3, r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	1eea      	subs	r2, r5, #3
 8006e2e:	4296      	cmp	r6, r2
 8006e30:	bf38      	it	cc
 8006e32:	2300      	movcc	r3, #0
 8006e34:	4423      	add	r3, r4
 8006e36:	e015      	b.n	8006e64 <rshift+0x68>
 8006e38:	46a1      	mov	r9, r4
 8006e3a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006e3e:	f1c1 0820 	rsb	r8, r1, #32
 8006e42:	40cf      	lsrs	r7, r1
 8006e44:	f105 0e04 	add.w	lr, r5, #4
 8006e48:	4576      	cmp	r6, lr
 8006e4a:	46f4      	mov	ip, lr
 8006e4c:	d816      	bhi.n	8006e7c <rshift+0x80>
 8006e4e:	1a9a      	subs	r2, r3, r2
 8006e50:	0092      	lsls	r2, r2, #2
 8006e52:	3a04      	subs	r2, #4
 8006e54:	3501      	adds	r5, #1
 8006e56:	42ae      	cmp	r6, r5
 8006e58:	bf38      	it	cc
 8006e5a:	2200      	movcc	r2, #0
 8006e5c:	18a3      	adds	r3, r4, r2
 8006e5e:	50a7      	str	r7, [r4, r2]
 8006e60:	b107      	cbz	r7, 8006e64 <rshift+0x68>
 8006e62:	3304      	adds	r3, #4
 8006e64:	42a3      	cmp	r3, r4
 8006e66:	eba3 0204 	sub.w	r2, r3, r4
 8006e6a:	bf08      	it	eq
 8006e6c:	2300      	moveq	r3, #0
 8006e6e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006e72:	6102      	str	r2, [r0, #16]
 8006e74:	bf08      	it	eq
 8006e76:	6143      	streq	r3, [r0, #20]
 8006e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e7c:	f8dc c000 	ldr.w	ip, [ip]
 8006e80:	fa0c fc08 	lsl.w	ip, ip, r8
 8006e84:	ea4c 0707 	orr.w	r7, ip, r7
 8006e88:	f849 7b04 	str.w	r7, [r9], #4
 8006e8c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e90:	40cf      	lsrs	r7, r1
 8006e92:	e7d9      	b.n	8006e48 <rshift+0x4c>
 8006e94:	f851 cb04 	ldr.w	ip, [r1], #4
 8006e98:	f847 cf04 	str.w	ip, [r7, #4]!
 8006e9c:	e7c2      	b.n	8006e24 <rshift+0x28>
 8006e9e:	4623      	mov	r3, r4
 8006ea0:	e7e0      	b.n	8006e64 <rshift+0x68>

08006ea2 <__hexdig_fun>:
 8006ea2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006ea6:	2b09      	cmp	r3, #9
 8006ea8:	d802      	bhi.n	8006eb0 <__hexdig_fun+0xe>
 8006eaa:	3820      	subs	r0, #32
 8006eac:	b2c0      	uxtb	r0, r0
 8006eae:	4770      	bx	lr
 8006eb0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006eb4:	2b05      	cmp	r3, #5
 8006eb6:	d801      	bhi.n	8006ebc <__hexdig_fun+0x1a>
 8006eb8:	3847      	subs	r0, #71	; 0x47
 8006eba:	e7f7      	b.n	8006eac <__hexdig_fun+0xa>
 8006ebc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006ec0:	2b05      	cmp	r3, #5
 8006ec2:	d801      	bhi.n	8006ec8 <__hexdig_fun+0x26>
 8006ec4:	3827      	subs	r0, #39	; 0x27
 8006ec6:	e7f1      	b.n	8006eac <__hexdig_fun+0xa>
 8006ec8:	2000      	movs	r0, #0
 8006eca:	4770      	bx	lr

08006ecc <__gethex>:
 8006ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed0:	b08b      	sub	sp, #44	; 0x2c
 8006ed2:	9305      	str	r3, [sp, #20]
 8006ed4:	4bb2      	ldr	r3, [pc, #712]	; (80071a0 <__gethex+0x2d4>)
 8006ed6:	9002      	str	r0, [sp, #8]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	468b      	mov	fp, r1
 8006edc:	4618      	mov	r0, r3
 8006ede:	4690      	mov	r8, r2
 8006ee0:	9303      	str	r3, [sp, #12]
 8006ee2:	f7f9 f935 	bl	8000150 <strlen>
 8006ee6:	4682      	mov	sl, r0
 8006ee8:	9b03      	ldr	r3, [sp, #12]
 8006eea:	f8db 2000 	ldr.w	r2, [fp]
 8006eee:	4403      	add	r3, r0
 8006ef0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006ef4:	9306      	str	r3, [sp, #24]
 8006ef6:	1c93      	adds	r3, r2, #2
 8006ef8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006efc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006f00:	32fe      	adds	r2, #254	; 0xfe
 8006f02:	18d1      	adds	r1, r2, r3
 8006f04:	461f      	mov	r7, r3
 8006f06:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006f0a:	9101      	str	r1, [sp, #4]
 8006f0c:	2830      	cmp	r0, #48	; 0x30
 8006f0e:	d0f8      	beq.n	8006f02 <__gethex+0x36>
 8006f10:	f7ff ffc7 	bl	8006ea2 <__hexdig_fun>
 8006f14:	4604      	mov	r4, r0
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d13a      	bne.n	8006f90 <__gethex+0xc4>
 8006f1a:	4652      	mov	r2, sl
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	9903      	ldr	r1, [sp, #12]
 8006f20:	f001 fa26 	bl	8008370 <strncmp>
 8006f24:	4605      	mov	r5, r0
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d166      	bne.n	8006ff8 <__gethex+0x12c>
 8006f2a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006f2e:	eb07 060a 	add.w	r6, r7, sl
 8006f32:	f7ff ffb6 	bl	8006ea2 <__hexdig_fun>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d060      	beq.n	8006ffc <__gethex+0x130>
 8006f3a:	4633      	mov	r3, r6
 8006f3c:	7818      	ldrb	r0, [r3, #0]
 8006f3e:	461f      	mov	r7, r3
 8006f40:	2830      	cmp	r0, #48	; 0x30
 8006f42:	f103 0301 	add.w	r3, r3, #1
 8006f46:	d0f9      	beq.n	8006f3c <__gethex+0x70>
 8006f48:	f7ff ffab 	bl	8006ea2 <__hexdig_fun>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	fab0 f480 	clz	r4, r0
 8006f52:	4635      	mov	r5, r6
 8006f54:	0964      	lsrs	r4, r4, #5
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	463a      	mov	r2, r7
 8006f5a:	4616      	mov	r6, r2
 8006f5c:	7830      	ldrb	r0, [r6, #0]
 8006f5e:	3201      	adds	r2, #1
 8006f60:	f7ff ff9f 	bl	8006ea2 <__hexdig_fun>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d1f8      	bne.n	8006f5a <__gethex+0x8e>
 8006f68:	4652      	mov	r2, sl
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	9903      	ldr	r1, [sp, #12]
 8006f6e:	f001 f9ff 	bl	8008370 <strncmp>
 8006f72:	b980      	cbnz	r0, 8006f96 <__gethex+0xca>
 8006f74:	b94d      	cbnz	r5, 8006f8a <__gethex+0xbe>
 8006f76:	eb06 050a 	add.w	r5, r6, sl
 8006f7a:	462a      	mov	r2, r5
 8006f7c:	4616      	mov	r6, r2
 8006f7e:	7830      	ldrb	r0, [r6, #0]
 8006f80:	3201      	adds	r2, #1
 8006f82:	f7ff ff8e 	bl	8006ea2 <__hexdig_fun>
 8006f86:	2800      	cmp	r0, #0
 8006f88:	d1f8      	bne.n	8006f7c <__gethex+0xb0>
 8006f8a:	1bad      	subs	r5, r5, r6
 8006f8c:	00ad      	lsls	r5, r5, #2
 8006f8e:	e004      	b.n	8006f9a <__gethex+0xce>
 8006f90:	2400      	movs	r4, #0
 8006f92:	4625      	mov	r5, r4
 8006f94:	e7e0      	b.n	8006f58 <__gethex+0x8c>
 8006f96:	2d00      	cmp	r5, #0
 8006f98:	d1f7      	bne.n	8006f8a <__gethex+0xbe>
 8006f9a:	7833      	ldrb	r3, [r6, #0]
 8006f9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006fa0:	2b50      	cmp	r3, #80	; 0x50
 8006fa2:	d139      	bne.n	8007018 <__gethex+0x14c>
 8006fa4:	7873      	ldrb	r3, [r6, #1]
 8006fa6:	2b2b      	cmp	r3, #43	; 0x2b
 8006fa8:	d02a      	beq.n	8007000 <__gethex+0x134>
 8006faa:	2b2d      	cmp	r3, #45	; 0x2d
 8006fac:	d02c      	beq.n	8007008 <__gethex+0x13c>
 8006fae:	f04f 0900 	mov.w	r9, #0
 8006fb2:	1c71      	adds	r1, r6, #1
 8006fb4:	7808      	ldrb	r0, [r1, #0]
 8006fb6:	f7ff ff74 	bl	8006ea2 <__hexdig_fun>
 8006fba:	1e43      	subs	r3, r0, #1
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b18      	cmp	r3, #24
 8006fc0:	d82a      	bhi.n	8007018 <__gethex+0x14c>
 8006fc2:	f1a0 0210 	sub.w	r2, r0, #16
 8006fc6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006fca:	f7ff ff6a 	bl	8006ea2 <__hexdig_fun>
 8006fce:	1e43      	subs	r3, r0, #1
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b18      	cmp	r3, #24
 8006fd4:	d91b      	bls.n	800700e <__gethex+0x142>
 8006fd6:	f1b9 0f00 	cmp.w	r9, #0
 8006fda:	d000      	beq.n	8006fde <__gethex+0x112>
 8006fdc:	4252      	negs	r2, r2
 8006fde:	4415      	add	r5, r2
 8006fe0:	f8cb 1000 	str.w	r1, [fp]
 8006fe4:	b1d4      	cbz	r4, 800701c <__gethex+0x150>
 8006fe6:	9b01      	ldr	r3, [sp, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	bf14      	ite	ne
 8006fec:	2700      	movne	r7, #0
 8006fee:	2706      	moveq	r7, #6
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	b00b      	add	sp, #44	; 0x2c
 8006ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff8:	463e      	mov	r6, r7
 8006ffa:	4625      	mov	r5, r4
 8006ffc:	2401      	movs	r4, #1
 8006ffe:	e7cc      	b.n	8006f9a <__gethex+0xce>
 8007000:	f04f 0900 	mov.w	r9, #0
 8007004:	1cb1      	adds	r1, r6, #2
 8007006:	e7d5      	b.n	8006fb4 <__gethex+0xe8>
 8007008:	f04f 0901 	mov.w	r9, #1
 800700c:	e7fa      	b.n	8007004 <__gethex+0x138>
 800700e:	230a      	movs	r3, #10
 8007010:	fb03 0202 	mla	r2, r3, r2, r0
 8007014:	3a10      	subs	r2, #16
 8007016:	e7d6      	b.n	8006fc6 <__gethex+0xfa>
 8007018:	4631      	mov	r1, r6
 800701a:	e7e1      	b.n	8006fe0 <__gethex+0x114>
 800701c:	4621      	mov	r1, r4
 800701e:	1bf3      	subs	r3, r6, r7
 8007020:	3b01      	subs	r3, #1
 8007022:	2b07      	cmp	r3, #7
 8007024:	dc0a      	bgt.n	800703c <__gethex+0x170>
 8007026:	9802      	ldr	r0, [sp, #8]
 8007028:	f000 fa88 	bl	800753c <_Balloc>
 800702c:	4604      	mov	r4, r0
 800702e:	b940      	cbnz	r0, 8007042 <__gethex+0x176>
 8007030:	4602      	mov	r2, r0
 8007032:	21de      	movs	r1, #222	; 0xde
 8007034:	4b5b      	ldr	r3, [pc, #364]	; (80071a4 <__gethex+0x2d8>)
 8007036:	485c      	ldr	r0, [pc, #368]	; (80071a8 <__gethex+0x2dc>)
 8007038:	f001 f9bc 	bl	80083b4 <__assert_func>
 800703c:	3101      	adds	r1, #1
 800703e:	105b      	asrs	r3, r3, #1
 8007040:	e7ef      	b.n	8007022 <__gethex+0x156>
 8007042:	f04f 0b00 	mov.w	fp, #0
 8007046:	f100 0914 	add.w	r9, r0, #20
 800704a:	f1ca 0301 	rsb	r3, sl, #1
 800704e:	f8cd 9010 	str.w	r9, [sp, #16]
 8007052:	f8cd b004 	str.w	fp, [sp, #4]
 8007056:	9308      	str	r3, [sp, #32]
 8007058:	42b7      	cmp	r7, r6
 800705a:	d33f      	bcc.n	80070dc <__gethex+0x210>
 800705c:	9f04      	ldr	r7, [sp, #16]
 800705e:	9b01      	ldr	r3, [sp, #4]
 8007060:	f847 3b04 	str.w	r3, [r7], #4
 8007064:	eba7 0709 	sub.w	r7, r7, r9
 8007068:	10bf      	asrs	r7, r7, #2
 800706a:	6127      	str	r7, [r4, #16]
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fb57 	bl	8007720 <__hi0bits>
 8007072:	017f      	lsls	r7, r7, #5
 8007074:	f8d8 6000 	ldr.w	r6, [r8]
 8007078:	1a3f      	subs	r7, r7, r0
 800707a:	42b7      	cmp	r7, r6
 800707c:	dd62      	ble.n	8007144 <__gethex+0x278>
 800707e:	1bbf      	subs	r7, r7, r6
 8007080:	4639      	mov	r1, r7
 8007082:	4620      	mov	r0, r4
 8007084:	f000 fef1 	bl	8007e6a <__any_on>
 8007088:	4682      	mov	sl, r0
 800708a:	b1a8      	cbz	r0, 80070b8 <__gethex+0x1ec>
 800708c:	f04f 0a01 	mov.w	sl, #1
 8007090:	1e7b      	subs	r3, r7, #1
 8007092:	1159      	asrs	r1, r3, #5
 8007094:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007098:	f003 021f 	and.w	r2, r3, #31
 800709c:	fa0a f202 	lsl.w	r2, sl, r2
 80070a0:	420a      	tst	r2, r1
 80070a2:	d009      	beq.n	80070b8 <__gethex+0x1ec>
 80070a4:	4553      	cmp	r3, sl
 80070a6:	dd05      	ble.n	80070b4 <__gethex+0x1e8>
 80070a8:	4620      	mov	r0, r4
 80070aa:	1eb9      	subs	r1, r7, #2
 80070ac:	f000 fedd 	bl	8007e6a <__any_on>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d144      	bne.n	800713e <__gethex+0x272>
 80070b4:	f04f 0a02 	mov.w	sl, #2
 80070b8:	4639      	mov	r1, r7
 80070ba:	4620      	mov	r0, r4
 80070bc:	f7ff fe9e 	bl	8006dfc <rshift>
 80070c0:	443d      	add	r5, r7
 80070c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80070c6:	42ab      	cmp	r3, r5
 80070c8:	da4a      	bge.n	8007160 <__gethex+0x294>
 80070ca:	4621      	mov	r1, r4
 80070cc:	9802      	ldr	r0, [sp, #8]
 80070ce:	f000 fa75 	bl	80075bc <_Bfree>
 80070d2:	2300      	movs	r3, #0
 80070d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80070d6:	27a3      	movs	r7, #163	; 0xa3
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	e789      	b.n	8006ff0 <__gethex+0x124>
 80070dc:	1e73      	subs	r3, r6, #1
 80070de:	9a06      	ldr	r2, [sp, #24]
 80070e0:	9307      	str	r3, [sp, #28]
 80070e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d019      	beq.n	800711e <__gethex+0x252>
 80070ea:	f1bb 0f20 	cmp.w	fp, #32
 80070ee:	d107      	bne.n	8007100 <__gethex+0x234>
 80070f0:	9b04      	ldr	r3, [sp, #16]
 80070f2:	9a01      	ldr	r2, [sp, #4]
 80070f4:	f843 2b04 	str.w	r2, [r3], #4
 80070f8:	9304      	str	r3, [sp, #16]
 80070fa:	2300      	movs	r3, #0
 80070fc:	469b      	mov	fp, r3
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007104:	f7ff fecd 	bl	8006ea2 <__hexdig_fun>
 8007108:	9b01      	ldr	r3, [sp, #4]
 800710a:	f000 000f 	and.w	r0, r0, #15
 800710e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007112:	4303      	orrs	r3, r0
 8007114:	9301      	str	r3, [sp, #4]
 8007116:	f10b 0b04 	add.w	fp, fp, #4
 800711a:	9b07      	ldr	r3, [sp, #28]
 800711c:	e00d      	b.n	800713a <__gethex+0x26e>
 800711e:	9a08      	ldr	r2, [sp, #32]
 8007120:	1e73      	subs	r3, r6, #1
 8007122:	4413      	add	r3, r2
 8007124:	42bb      	cmp	r3, r7
 8007126:	d3e0      	bcc.n	80070ea <__gethex+0x21e>
 8007128:	4618      	mov	r0, r3
 800712a:	4652      	mov	r2, sl
 800712c:	9903      	ldr	r1, [sp, #12]
 800712e:	9309      	str	r3, [sp, #36]	; 0x24
 8007130:	f001 f91e 	bl	8008370 <strncmp>
 8007134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007136:	2800      	cmp	r0, #0
 8007138:	d1d7      	bne.n	80070ea <__gethex+0x21e>
 800713a:	461e      	mov	r6, r3
 800713c:	e78c      	b.n	8007058 <__gethex+0x18c>
 800713e:	f04f 0a03 	mov.w	sl, #3
 8007142:	e7b9      	b.n	80070b8 <__gethex+0x1ec>
 8007144:	da09      	bge.n	800715a <__gethex+0x28e>
 8007146:	1bf7      	subs	r7, r6, r7
 8007148:	4621      	mov	r1, r4
 800714a:	463a      	mov	r2, r7
 800714c:	9802      	ldr	r0, [sp, #8]
 800714e:	f000 fc4d 	bl	80079ec <__lshift>
 8007152:	4604      	mov	r4, r0
 8007154:	1bed      	subs	r5, r5, r7
 8007156:	f100 0914 	add.w	r9, r0, #20
 800715a:	f04f 0a00 	mov.w	sl, #0
 800715e:	e7b0      	b.n	80070c2 <__gethex+0x1f6>
 8007160:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007164:	42a8      	cmp	r0, r5
 8007166:	dd72      	ble.n	800724e <__gethex+0x382>
 8007168:	1b45      	subs	r5, r0, r5
 800716a:	42ae      	cmp	r6, r5
 800716c:	dc35      	bgt.n	80071da <__gethex+0x30e>
 800716e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007172:	2b02      	cmp	r3, #2
 8007174:	d029      	beq.n	80071ca <__gethex+0x2fe>
 8007176:	2b03      	cmp	r3, #3
 8007178:	d02b      	beq.n	80071d2 <__gethex+0x306>
 800717a:	2b01      	cmp	r3, #1
 800717c:	d11c      	bne.n	80071b8 <__gethex+0x2ec>
 800717e:	42ae      	cmp	r6, r5
 8007180:	d11a      	bne.n	80071b8 <__gethex+0x2ec>
 8007182:	2e01      	cmp	r6, #1
 8007184:	d112      	bne.n	80071ac <__gethex+0x2e0>
 8007186:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800718a:	9a05      	ldr	r2, [sp, #20]
 800718c:	2762      	movs	r7, #98	; 0x62
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	2301      	movs	r3, #1
 8007192:	6123      	str	r3, [r4, #16]
 8007194:	f8c9 3000 	str.w	r3, [r9]
 8007198:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800719a:	601c      	str	r4, [r3, #0]
 800719c:	e728      	b.n	8006ff0 <__gethex+0x124>
 800719e:	bf00      	nop
 80071a0:	08009980 	.word	0x08009980
 80071a4:	08009908 	.word	0x08009908
 80071a8:	08009919 	.word	0x08009919
 80071ac:	4620      	mov	r0, r4
 80071ae:	1e71      	subs	r1, r6, #1
 80071b0:	f000 fe5b 	bl	8007e6a <__any_on>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d1e6      	bne.n	8007186 <__gethex+0x2ba>
 80071b8:	4621      	mov	r1, r4
 80071ba:	9802      	ldr	r0, [sp, #8]
 80071bc:	f000 f9fe 	bl	80075bc <_Bfree>
 80071c0:	2300      	movs	r3, #0
 80071c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80071c4:	2750      	movs	r7, #80	; 0x50
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	e712      	b.n	8006ff0 <__gethex+0x124>
 80071ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1f3      	bne.n	80071b8 <__gethex+0x2ec>
 80071d0:	e7d9      	b.n	8007186 <__gethex+0x2ba>
 80071d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1d6      	bne.n	8007186 <__gethex+0x2ba>
 80071d8:	e7ee      	b.n	80071b8 <__gethex+0x2ec>
 80071da:	1e6f      	subs	r7, r5, #1
 80071dc:	f1ba 0f00 	cmp.w	sl, #0
 80071e0:	d132      	bne.n	8007248 <__gethex+0x37c>
 80071e2:	b127      	cbz	r7, 80071ee <__gethex+0x322>
 80071e4:	4639      	mov	r1, r7
 80071e6:	4620      	mov	r0, r4
 80071e8:	f000 fe3f 	bl	8007e6a <__any_on>
 80071ec:	4682      	mov	sl, r0
 80071ee:	2101      	movs	r1, #1
 80071f0:	117b      	asrs	r3, r7, #5
 80071f2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80071f6:	f007 071f 	and.w	r7, r7, #31
 80071fa:	fa01 f707 	lsl.w	r7, r1, r7
 80071fe:	421f      	tst	r7, r3
 8007200:	f04f 0702 	mov.w	r7, #2
 8007204:	4629      	mov	r1, r5
 8007206:	4620      	mov	r0, r4
 8007208:	bf18      	it	ne
 800720a:	f04a 0a02 	orrne.w	sl, sl, #2
 800720e:	1b76      	subs	r6, r6, r5
 8007210:	f7ff fdf4 	bl	8006dfc <rshift>
 8007214:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007218:	f1ba 0f00 	cmp.w	sl, #0
 800721c:	d048      	beq.n	80072b0 <__gethex+0x3e4>
 800721e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007222:	2b02      	cmp	r3, #2
 8007224:	d015      	beq.n	8007252 <__gethex+0x386>
 8007226:	2b03      	cmp	r3, #3
 8007228:	d017      	beq.n	800725a <__gethex+0x38e>
 800722a:	2b01      	cmp	r3, #1
 800722c:	d109      	bne.n	8007242 <__gethex+0x376>
 800722e:	f01a 0f02 	tst.w	sl, #2
 8007232:	d006      	beq.n	8007242 <__gethex+0x376>
 8007234:	f8d9 0000 	ldr.w	r0, [r9]
 8007238:	ea4a 0a00 	orr.w	sl, sl, r0
 800723c:	f01a 0f01 	tst.w	sl, #1
 8007240:	d10e      	bne.n	8007260 <__gethex+0x394>
 8007242:	f047 0710 	orr.w	r7, r7, #16
 8007246:	e033      	b.n	80072b0 <__gethex+0x3e4>
 8007248:	f04f 0a01 	mov.w	sl, #1
 800724c:	e7cf      	b.n	80071ee <__gethex+0x322>
 800724e:	2701      	movs	r7, #1
 8007250:	e7e2      	b.n	8007218 <__gethex+0x34c>
 8007252:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007254:	f1c3 0301 	rsb	r3, r3, #1
 8007258:	9315      	str	r3, [sp, #84]	; 0x54
 800725a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0f0      	beq.n	8007242 <__gethex+0x376>
 8007260:	f04f 0c00 	mov.w	ip, #0
 8007264:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007268:	f104 0314 	add.w	r3, r4, #20
 800726c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007270:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007274:	4618      	mov	r0, r3
 8007276:	f853 2b04 	ldr.w	r2, [r3], #4
 800727a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800727e:	d01c      	beq.n	80072ba <__gethex+0x3ee>
 8007280:	3201      	adds	r2, #1
 8007282:	6002      	str	r2, [r0, #0]
 8007284:	2f02      	cmp	r7, #2
 8007286:	f104 0314 	add.w	r3, r4, #20
 800728a:	d13d      	bne.n	8007308 <__gethex+0x43c>
 800728c:	f8d8 2000 	ldr.w	r2, [r8]
 8007290:	3a01      	subs	r2, #1
 8007292:	42b2      	cmp	r2, r6
 8007294:	d10a      	bne.n	80072ac <__gethex+0x3e0>
 8007296:	2201      	movs	r2, #1
 8007298:	1171      	asrs	r1, r6, #5
 800729a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800729e:	f006 061f 	and.w	r6, r6, #31
 80072a2:	fa02 f606 	lsl.w	r6, r2, r6
 80072a6:	421e      	tst	r6, r3
 80072a8:	bf18      	it	ne
 80072aa:	4617      	movne	r7, r2
 80072ac:	f047 0720 	orr.w	r7, r7, #32
 80072b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072b2:	601c      	str	r4, [r3, #0]
 80072b4:	9b05      	ldr	r3, [sp, #20]
 80072b6:	601d      	str	r5, [r3, #0]
 80072b8:	e69a      	b.n	8006ff0 <__gethex+0x124>
 80072ba:	4299      	cmp	r1, r3
 80072bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80072c0:	d8d8      	bhi.n	8007274 <__gethex+0x3a8>
 80072c2:	68a3      	ldr	r3, [r4, #8]
 80072c4:	459b      	cmp	fp, r3
 80072c6:	db17      	blt.n	80072f8 <__gethex+0x42c>
 80072c8:	6861      	ldr	r1, [r4, #4]
 80072ca:	9802      	ldr	r0, [sp, #8]
 80072cc:	3101      	adds	r1, #1
 80072ce:	f000 f935 	bl	800753c <_Balloc>
 80072d2:	4681      	mov	r9, r0
 80072d4:	b918      	cbnz	r0, 80072de <__gethex+0x412>
 80072d6:	4602      	mov	r2, r0
 80072d8:	2184      	movs	r1, #132	; 0x84
 80072da:	4b19      	ldr	r3, [pc, #100]	; (8007340 <__gethex+0x474>)
 80072dc:	e6ab      	b.n	8007036 <__gethex+0x16a>
 80072de:	6922      	ldr	r2, [r4, #16]
 80072e0:	f104 010c 	add.w	r1, r4, #12
 80072e4:	3202      	adds	r2, #2
 80072e6:	0092      	lsls	r2, r2, #2
 80072e8:	300c      	adds	r0, #12
 80072ea:	f000 f919 	bl	8007520 <memcpy>
 80072ee:	4621      	mov	r1, r4
 80072f0:	9802      	ldr	r0, [sp, #8]
 80072f2:	f000 f963 	bl	80075bc <_Bfree>
 80072f6:	464c      	mov	r4, r9
 80072f8:	6923      	ldr	r3, [r4, #16]
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	6122      	str	r2, [r4, #16]
 80072fe:	2201      	movs	r2, #1
 8007300:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007304:	615a      	str	r2, [r3, #20]
 8007306:	e7bd      	b.n	8007284 <__gethex+0x3b8>
 8007308:	6922      	ldr	r2, [r4, #16]
 800730a:	455a      	cmp	r2, fp
 800730c:	dd0b      	ble.n	8007326 <__gethex+0x45a>
 800730e:	2101      	movs	r1, #1
 8007310:	4620      	mov	r0, r4
 8007312:	f7ff fd73 	bl	8006dfc <rshift>
 8007316:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800731a:	3501      	adds	r5, #1
 800731c:	42ab      	cmp	r3, r5
 800731e:	f6ff aed4 	blt.w	80070ca <__gethex+0x1fe>
 8007322:	2701      	movs	r7, #1
 8007324:	e7c2      	b.n	80072ac <__gethex+0x3e0>
 8007326:	f016 061f 	ands.w	r6, r6, #31
 800732a:	d0fa      	beq.n	8007322 <__gethex+0x456>
 800732c:	4453      	add	r3, sl
 800732e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007332:	f000 f9f5 	bl	8007720 <__hi0bits>
 8007336:	f1c6 0620 	rsb	r6, r6, #32
 800733a:	42b0      	cmp	r0, r6
 800733c:	dbe7      	blt.n	800730e <__gethex+0x442>
 800733e:	e7f0      	b.n	8007322 <__gethex+0x456>
 8007340:	08009908 	.word	0x08009908

08007344 <L_shift>:
 8007344:	f1c2 0208 	rsb	r2, r2, #8
 8007348:	0092      	lsls	r2, r2, #2
 800734a:	b570      	push	{r4, r5, r6, lr}
 800734c:	f1c2 0620 	rsb	r6, r2, #32
 8007350:	6843      	ldr	r3, [r0, #4]
 8007352:	6804      	ldr	r4, [r0, #0]
 8007354:	fa03 f506 	lsl.w	r5, r3, r6
 8007358:	432c      	orrs	r4, r5
 800735a:	40d3      	lsrs	r3, r2
 800735c:	6004      	str	r4, [r0, #0]
 800735e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007362:	4288      	cmp	r0, r1
 8007364:	d3f4      	bcc.n	8007350 <L_shift+0xc>
 8007366:	bd70      	pop	{r4, r5, r6, pc}

08007368 <__match>:
 8007368:	b530      	push	{r4, r5, lr}
 800736a:	6803      	ldr	r3, [r0, #0]
 800736c:	3301      	adds	r3, #1
 800736e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007372:	b914      	cbnz	r4, 800737a <__match+0x12>
 8007374:	6003      	str	r3, [r0, #0]
 8007376:	2001      	movs	r0, #1
 8007378:	bd30      	pop	{r4, r5, pc}
 800737a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800737e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007382:	2d19      	cmp	r5, #25
 8007384:	bf98      	it	ls
 8007386:	3220      	addls	r2, #32
 8007388:	42a2      	cmp	r2, r4
 800738a:	d0f0      	beq.n	800736e <__match+0x6>
 800738c:	2000      	movs	r0, #0
 800738e:	e7f3      	b.n	8007378 <__match+0x10>

08007390 <__hexnan>:
 8007390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007394:	2500      	movs	r5, #0
 8007396:	680b      	ldr	r3, [r1, #0]
 8007398:	4682      	mov	sl, r0
 800739a:	115e      	asrs	r6, r3, #5
 800739c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80073a0:	f013 031f 	ands.w	r3, r3, #31
 80073a4:	bf18      	it	ne
 80073a6:	3604      	addne	r6, #4
 80073a8:	1f37      	subs	r7, r6, #4
 80073aa:	46b9      	mov	r9, r7
 80073ac:	463c      	mov	r4, r7
 80073ae:	46ab      	mov	fp, r5
 80073b0:	b087      	sub	sp, #28
 80073b2:	4690      	mov	r8, r2
 80073b4:	6802      	ldr	r2, [r0, #0]
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	f846 5c04 	str.w	r5, [r6, #-4]
 80073bc:	9502      	str	r5, [sp, #8]
 80073be:	7851      	ldrb	r1, [r2, #1]
 80073c0:	1c53      	adds	r3, r2, #1
 80073c2:	9303      	str	r3, [sp, #12]
 80073c4:	b341      	cbz	r1, 8007418 <__hexnan+0x88>
 80073c6:	4608      	mov	r0, r1
 80073c8:	9205      	str	r2, [sp, #20]
 80073ca:	9104      	str	r1, [sp, #16]
 80073cc:	f7ff fd69 	bl	8006ea2 <__hexdig_fun>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	d14f      	bne.n	8007474 <__hexnan+0xe4>
 80073d4:	9904      	ldr	r1, [sp, #16]
 80073d6:	9a05      	ldr	r2, [sp, #20]
 80073d8:	2920      	cmp	r1, #32
 80073da:	d818      	bhi.n	800740e <__hexnan+0x7e>
 80073dc:	9b02      	ldr	r3, [sp, #8]
 80073de:	459b      	cmp	fp, r3
 80073e0:	dd13      	ble.n	800740a <__hexnan+0x7a>
 80073e2:	454c      	cmp	r4, r9
 80073e4:	d206      	bcs.n	80073f4 <__hexnan+0x64>
 80073e6:	2d07      	cmp	r5, #7
 80073e8:	dc04      	bgt.n	80073f4 <__hexnan+0x64>
 80073ea:	462a      	mov	r2, r5
 80073ec:	4649      	mov	r1, r9
 80073ee:	4620      	mov	r0, r4
 80073f0:	f7ff ffa8 	bl	8007344 <L_shift>
 80073f4:	4544      	cmp	r4, r8
 80073f6:	d950      	bls.n	800749a <__hexnan+0x10a>
 80073f8:	2300      	movs	r3, #0
 80073fa:	f1a4 0904 	sub.w	r9, r4, #4
 80073fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8007402:	461d      	mov	r5, r3
 8007404:	464c      	mov	r4, r9
 8007406:	f8cd b008 	str.w	fp, [sp, #8]
 800740a:	9a03      	ldr	r2, [sp, #12]
 800740c:	e7d7      	b.n	80073be <__hexnan+0x2e>
 800740e:	2929      	cmp	r1, #41	; 0x29
 8007410:	d156      	bne.n	80074c0 <__hexnan+0x130>
 8007412:	3202      	adds	r2, #2
 8007414:	f8ca 2000 	str.w	r2, [sl]
 8007418:	f1bb 0f00 	cmp.w	fp, #0
 800741c:	d050      	beq.n	80074c0 <__hexnan+0x130>
 800741e:	454c      	cmp	r4, r9
 8007420:	d206      	bcs.n	8007430 <__hexnan+0xa0>
 8007422:	2d07      	cmp	r5, #7
 8007424:	dc04      	bgt.n	8007430 <__hexnan+0xa0>
 8007426:	462a      	mov	r2, r5
 8007428:	4649      	mov	r1, r9
 800742a:	4620      	mov	r0, r4
 800742c:	f7ff ff8a 	bl	8007344 <L_shift>
 8007430:	4544      	cmp	r4, r8
 8007432:	d934      	bls.n	800749e <__hexnan+0x10e>
 8007434:	4623      	mov	r3, r4
 8007436:	f1a8 0204 	sub.w	r2, r8, #4
 800743a:	f853 1b04 	ldr.w	r1, [r3], #4
 800743e:	429f      	cmp	r7, r3
 8007440:	f842 1f04 	str.w	r1, [r2, #4]!
 8007444:	d2f9      	bcs.n	800743a <__hexnan+0xaa>
 8007446:	1b3b      	subs	r3, r7, r4
 8007448:	f023 0303 	bic.w	r3, r3, #3
 800744c:	3304      	adds	r3, #4
 800744e:	3401      	adds	r4, #1
 8007450:	3e03      	subs	r6, #3
 8007452:	42b4      	cmp	r4, r6
 8007454:	bf88      	it	hi
 8007456:	2304      	movhi	r3, #4
 8007458:	2200      	movs	r2, #0
 800745a:	4443      	add	r3, r8
 800745c:	f843 2b04 	str.w	r2, [r3], #4
 8007460:	429f      	cmp	r7, r3
 8007462:	d2fb      	bcs.n	800745c <__hexnan+0xcc>
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	b91b      	cbnz	r3, 8007470 <__hexnan+0xe0>
 8007468:	4547      	cmp	r7, r8
 800746a:	d127      	bne.n	80074bc <__hexnan+0x12c>
 800746c:	2301      	movs	r3, #1
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	2005      	movs	r0, #5
 8007472:	e026      	b.n	80074c2 <__hexnan+0x132>
 8007474:	3501      	adds	r5, #1
 8007476:	2d08      	cmp	r5, #8
 8007478:	f10b 0b01 	add.w	fp, fp, #1
 800747c:	dd06      	ble.n	800748c <__hexnan+0xfc>
 800747e:	4544      	cmp	r4, r8
 8007480:	d9c3      	bls.n	800740a <__hexnan+0x7a>
 8007482:	2300      	movs	r3, #0
 8007484:	2501      	movs	r5, #1
 8007486:	f844 3c04 	str.w	r3, [r4, #-4]
 800748a:	3c04      	subs	r4, #4
 800748c:	6822      	ldr	r2, [r4, #0]
 800748e:	f000 000f 	and.w	r0, r0, #15
 8007492:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007496:	6022      	str	r2, [r4, #0]
 8007498:	e7b7      	b.n	800740a <__hexnan+0x7a>
 800749a:	2508      	movs	r5, #8
 800749c:	e7b5      	b.n	800740a <__hexnan+0x7a>
 800749e:	9b01      	ldr	r3, [sp, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d0df      	beq.n	8007464 <__hexnan+0xd4>
 80074a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074a8:	f1c3 0320 	rsb	r3, r3, #32
 80074ac:	fa22 f303 	lsr.w	r3, r2, r3
 80074b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80074b4:	401a      	ands	r2, r3
 80074b6:	f846 2c04 	str.w	r2, [r6, #-4]
 80074ba:	e7d3      	b.n	8007464 <__hexnan+0xd4>
 80074bc:	3f04      	subs	r7, #4
 80074be:	e7d1      	b.n	8007464 <__hexnan+0xd4>
 80074c0:	2004      	movs	r0, #4
 80074c2:	b007      	add	sp, #28
 80074c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080074c8 <_localeconv_r>:
 80074c8:	4800      	ldr	r0, [pc, #0]	; (80074cc <_localeconv_r+0x4>)
 80074ca:	4770      	bx	lr
 80074cc:	2000016c 	.word	0x2000016c

080074d0 <malloc>:
 80074d0:	4b02      	ldr	r3, [pc, #8]	; (80074dc <malloc+0xc>)
 80074d2:	4601      	mov	r1, r0
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	f000 bd65 	b.w	8007fa4 <_malloc_r>
 80074da:	bf00      	nop
 80074dc:	20000014 	.word	0x20000014

080074e0 <__ascii_mbtowc>:
 80074e0:	b082      	sub	sp, #8
 80074e2:	b901      	cbnz	r1, 80074e6 <__ascii_mbtowc+0x6>
 80074e4:	a901      	add	r1, sp, #4
 80074e6:	b142      	cbz	r2, 80074fa <__ascii_mbtowc+0x1a>
 80074e8:	b14b      	cbz	r3, 80074fe <__ascii_mbtowc+0x1e>
 80074ea:	7813      	ldrb	r3, [r2, #0]
 80074ec:	600b      	str	r3, [r1, #0]
 80074ee:	7812      	ldrb	r2, [r2, #0]
 80074f0:	1e10      	subs	r0, r2, #0
 80074f2:	bf18      	it	ne
 80074f4:	2001      	movne	r0, #1
 80074f6:	b002      	add	sp, #8
 80074f8:	4770      	bx	lr
 80074fa:	4610      	mov	r0, r2
 80074fc:	e7fb      	b.n	80074f6 <__ascii_mbtowc+0x16>
 80074fe:	f06f 0001 	mvn.w	r0, #1
 8007502:	e7f8      	b.n	80074f6 <__ascii_mbtowc+0x16>

08007504 <memchr>:
 8007504:	4603      	mov	r3, r0
 8007506:	b510      	push	{r4, lr}
 8007508:	b2c9      	uxtb	r1, r1
 800750a:	4402      	add	r2, r0
 800750c:	4293      	cmp	r3, r2
 800750e:	4618      	mov	r0, r3
 8007510:	d101      	bne.n	8007516 <memchr+0x12>
 8007512:	2000      	movs	r0, #0
 8007514:	e003      	b.n	800751e <memchr+0x1a>
 8007516:	7804      	ldrb	r4, [r0, #0]
 8007518:	3301      	adds	r3, #1
 800751a:	428c      	cmp	r4, r1
 800751c:	d1f6      	bne.n	800750c <memchr+0x8>
 800751e:	bd10      	pop	{r4, pc}

08007520 <memcpy>:
 8007520:	440a      	add	r2, r1
 8007522:	4291      	cmp	r1, r2
 8007524:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007528:	d100      	bne.n	800752c <memcpy+0xc>
 800752a:	4770      	bx	lr
 800752c:	b510      	push	{r4, lr}
 800752e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007532:	4291      	cmp	r1, r2
 8007534:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007538:	d1f9      	bne.n	800752e <memcpy+0xe>
 800753a:	bd10      	pop	{r4, pc}

0800753c <_Balloc>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007540:	4604      	mov	r4, r0
 8007542:	460d      	mov	r5, r1
 8007544:	b976      	cbnz	r6, 8007564 <_Balloc+0x28>
 8007546:	2010      	movs	r0, #16
 8007548:	f7ff ffc2 	bl	80074d0 <malloc>
 800754c:	4602      	mov	r2, r0
 800754e:	6260      	str	r0, [r4, #36]	; 0x24
 8007550:	b920      	cbnz	r0, 800755c <_Balloc+0x20>
 8007552:	2166      	movs	r1, #102	; 0x66
 8007554:	4b17      	ldr	r3, [pc, #92]	; (80075b4 <_Balloc+0x78>)
 8007556:	4818      	ldr	r0, [pc, #96]	; (80075b8 <_Balloc+0x7c>)
 8007558:	f000 ff2c 	bl	80083b4 <__assert_func>
 800755c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007560:	6006      	str	r6, [r0, #0]
 8007562:	60c6      	str	r6, [r0, #12]
 8007564:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007566:	68f3      	ldr	r3, [r6, #12]
 8007568:	b183      	cbz	r3, 800758c <_Balloc+0x50>
 800756a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007572:	b9b8      	cbnz	r0, 80075a4 <_Balloc+0x68>
 8007574:	2101      	movs	r1, #1
 8007576:	fa01 f605 	lsl.w	r6, r1, r5
 800757a:	1d72      	adds	r2, r6, #5
 800757c:	4620      	mov	r0, r4
 800757e:	0092      	lsls	r2, r2, #2
 8007580:	f000 fc94 	bl	8007eac <_calloc_r>
 8007584:	b160      	cbz	r0, 80075a0 <_Balloc+0x64>
 8007586:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800758a:	e00e      	b.n	80075aa <_Balloc+0x6e>
 800758c:	2221      	movs	r2, #33	; 0x21
 800758e:	2104      	movs	r1, #4
 8007590:	4620      	mov	r0, r4
 8007592:	f000 fc8b 	bl	8007eac <_calloc_r>
 8007596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007598:	60f0      	str	r0, [r6, #12]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e4      	bne.n	800756a <_Balloc+0x2e>
 80075a0:	2000      	movs	r0, #0
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	6802      	ldr	r2, [r0, #0]
 80075a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075aa:	2300      	movs	r3, #0
 80075ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075b0:	e7f7      	b.n	80075a2 <_Balloc+0x66>
 80075b2:	bf00      	nop
 80075b4:	08009896 	.word	0x08009896
 80075b8:	08009994 	.word	0x08009994

080075bc <_Bfree>:
 80075bc:	b570      	push	{r4, r5, r6, lr}
 80075be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075c0:	4605      	mov	r5, r0
 80075c2:	460c      	mov	r4, r1
 80075c4:	b976      	cbnz	r6, 80075e4 <_Bfree+0x28>
 80075c6:	2010      	movs	r0, #16
 80075c8:	f7ff ff82 	bl	80074d0 <malloc>
 80075cc:	4602      	mov	r2, r0
 80075ce:	6268      	str	r0, [r5, #36]	; 0x24
 80075d0:	b920      	cbnz	r0, 80075dc <_Bfree+0x20>
 80075d2:	218a      	movs	r1, #138	; 0x8a
 80075d4:	4b08      	ldr	r3, [pc, #32]	; (80075f8 <_Bfree+0x3c>)
 80075d6:	4809      	ldr	r0, [pc, #36]	; (80075fc <_Bfree+0x40>)
 80075d8:	f000 feec 	bl	80083b4 <__assert_func>
 80075dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075e0:	6006      	str	r6, [r0, #0]
 80075e2:	60c6      	str	r6, [r0, #12]
 80075e4:	b13c      	cbz	r4, 80075f6 <_Bfree+0x3a>
 80075e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075e8:	6862      	ldr	r2, [r4, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075f0:	6021      	str	r1, [r4, #0]
 80075f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075f6:	bd70      	pop	{r4, r5, r6, pc}
 80075f8:	08009896 	.word	0x08009896
 80075fc:	08009994 	.word	0x08009994

08007600 <__multadd>:
 8007600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007604:	4607      	mov	r7, r0
 8007606:	460c      	mov	r4, r1
 8007608:	461e      	mov	r6, r3
 800760a:	2000      	movs	r0, #0
 800760c:	690d      	ldr	r5, [r1, #16]
 800760e:	f101 0c14 	add.w	ip, r1, #20
 8007612:	f8dc 3000 	ldr.w	r3, [ip]
 8007616:	3001      	adds	r0, #1
 8007618:	b299      	uxth	r1, r3
 800761a:	fb02 6101 	mla	r1, r2, r1, r6
 800761e:	0c1e      	lsrs	r6, r3, #16
 8007620:	0c0b      	lsrs	r3, r1, #16
 8007622:	fb02 3306 	mla	r3, r2, r6, r3
 8007626:	b289      	uxth	r1, r1
 8007628:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800762c:	4285      	cmp	r5, r0
 800762e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007632:	f84c 1b04 	str.w	r1, [ip], #4
 8007636:	dcec      	bgt.n	8007612 <__multadd+0x12>
 8007638:	b30e      	cbz	r6, 800767e <__multadd+0x7e>
 800763a:	68a3      	ldr	r3, [r4, #8]
 800763c:	42ab      	cmp	r3, r5
 800763e:	dc19      	bgt.n	8007674 <__multadd+0x74>
 8007640:	6861      	ldr	r1, [r4, #4]
 8007642:	4638      	mov	r0, r7
 8007644:	3101      	adds	r1, #1
 8007646:	f7ff ff79 	bl	800753c <_Balloc>
 800764a:	4680      	mov	r8, r0
 800764c:	b928      	cbnz	r0, 800765a <__multadd+0x5a>
 800764e:	4602      	mov	r2, r0
 8007650:	21b5      	movs	r1, #181	; 0xb5
 8007652:	4b0c      	ldr	r3, [pc, #48]	; (8007684 <__multadd+0x84>)
 8007654:	480c      	ldr	r0, [pc, #48]	; (8007688 <__multadd+0x88>)
 8007656:	f000 fead 	bl	80083b4 <__assert_func>
 800765a:	6922      	ldr	r2, [r4, #16]
 800765c:	f104 010c 	add.w	r1, r4, #12
 8007660:	3202      	adds	r2, #2
 8007662:	0092      	lsls	r2, r2, #2
 8007664:	300c      	adds	r0, #12
 8007666:	f7ff ff5b 	bl	8007520 <memcpy>
 800766a:	4621      	mov	r1, r4
 800766c:	4638      	mov	r0, r7
 800766e:	f7ff ffa5 	bl	80075bc <_Bfree>
 8007672:	4644      	mov	r4, r8
 8007674:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007678:	3501      	adds	r5, #1
 800767a:	615e      	str	r6, [r3, #20]
 800767c:	6125      	str	r5, [r4, #16]
 800767e:	4620      	mov	r0, r4
 8007680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007684:	08009908 	.word	0x08009908
 8007688:	08009994 	.word	0x08009994

0800768c <__s2b>:
 800768c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007690:	4615      	mov	r5, r2
 8007692:	2209      	movs	r2, #9
 8007694:	461f      	mov	r7, r3
 8007696:	3308      	adds	r3, #8
 8007698:	460c      	mov	r4, r1
 800769a:	fb93 f3f2 	sdiv	r3, r3, r2
 800769e:	4606      	mov	r6, r0
 80076a0:	2201      	movs	r2, #1
 80076a2:	2100      	movs	r1, #0
 80076a4:	429a      	cmp	r2, r3
 80076a6:	db09      	blt.n	80076bc <__s2b+0x30>
 80076a8:	4630      	mov	r0, r6
 80076aa:	f7ff ff47 	bl	800753c <_Balloc>
 80076ae:	b940      	cbnz	r0, 80076c2 <__s2b+0x36>
 80076b0:	4602      	mov	r2, r0
 80076b2:	21ce      	movs	r1, #206	; 0xce
 80076b4:	4b18      	ldr	r3, [pc, #96]	; (8007718 <__s2b+0x8c>)
 80076b6:	4819      	ldr	r0, [pc, #100]	; (800771c <__s2b+0x90>)
 80076b8:	f000 fe7c 	bl	80083b4 <__assert_func>
 80076bc:	0052      	lsls	r2, r2, #1
 80076be:	3101      	adds	r1, #1
 80076c0:	e7f0      	b.n	80076a4 <__s2b+0x18>
 80076c2:	9b08      	ldr	r3, [sp, #32]
 80076c4:	2d09      	cmp	r5, #9
 80076c6:	6143      	str	r3, [r0, #20]
 80076c8:	f04f 0301 	mov.w	r3, #1
 80076cc:	6103      	str	r3, [r0, #16]
 80076ce:	dd16      	ble.n	80076fe <__s2b+0x72>
 80076d0:	f104 0909 	add.w	r9, r4, #9
 80076d4:	46c8      	mov	r8, r9
 80076d6:	442c      	add	r4, r5
 80076d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80076dc:	4601      	mov	r1, r0
 80076de:	220a      	movs	r2, #10
 80076e0:	4630      	mov	r0, r6
 80076e2:	3b30      	subs	r3, #48	; 0x30
 80076e4:	f7ff ff8c 	bl	8007600 <__multadd>
 80076e8:	45a0      	cmp	r8, r4
 80076ea:	d1f5      	bne.n	80076d8 <__s2b+0x4c>
 80076ec:	f1a5 0408 	sub.w	r4, r5, #8
 80076f0:	444c      	add	r4, r9
 80076f2:	1b2d      	subs	r5, r5, r4
 80076f4:	1963      	adds	r3, r4, r5
 80076f6:	42bb      	cmp	r3, r7
 80076f8:	db04      	blt.n	8007704 <__s2b+0x78>
 80076fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076fe:	2509      	movs	r5, #9
 8007700:	340a      	adds	r4, #10
 8007702:	e7f6      	b.n	80076f2 <__s2b+0x66>
 8007704:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007708:	4601      	mov	r1, r0
 800770a:	220a      	movs	r2, #10
 800770c:	4630      	mov	r0, r6
 800770e:	3b30      	subs	r3, #48	; 0x30
 8007710:	f7ff ff76 	bl	8007600 <__multadd>
 8007714:	e7ee      	b.n	80076f4 <__s2b+0x68>
 8007716:	bf00      	nop
 8007718:	08009908 	.word	0x08009908
 800771c:	08009994 	.word	0x08009994

08007720 <__hi0bits>:
 8007720:	0c02      	lsrs	r2, r0, #16
 8007722:	0412      	lsls	r2, r2, #16
 8007724:	4603      	mov	r3, r0
 8007726:	b9ca      	cbnz	r2, 800775c <__hi0bits+0x3c>
 8007728:	0403      	lsls	r3, r0, #16
 800772a:	2010      	movs	r0, #16
 800772c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007730:	bf04      	itt	eq
 8007732:	021b      	lsleq	r3, r3, #8
 8007734:	3008      	addeq	r0, #8
 8007736:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800773a:	bf04      	itt	eq
 800773c:	011b      	lsleq	r3, r3, #4
 800773e:	3004      	addeq	r0, #4
 8007740:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007744:	bf04      	itt	eq
 8007746:	009b      	lsleq	r3, r3, #2
 8007748:	3002      	addeq	r0, #2
 800774a:	2b00      	cmp	r3, #0
 800774c:	db05      	blt.n	800775a <__hi0bits+0x3a>
 800774e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007752:	f100 0001 	add.w	r0, r0, #1
 8007756:	bf08      	it	eq
 8007758:	2020      	moveq	r0, #32
 800775a:	4770      	bx	lr
 800775c:	2000      	movs	r0, #0
 800775e:	e7e5      	b.n	800772c <__hi0bits+0xc>

08007760 <__lo0bits>:
 8007760:	6803      	ldr	r3, [r0, #0]
 8007762:	4602      	mov	r2, r0
 8007764:	f013 0007 	ands.w	r0, r3, #7
 8007768:	d00b      	beq.n	8007782 <__lo0bits+0x22>
 800776a:	07d9      	lsls	r1, r3, #31
 800776c:	d421      	bmi.n	80077b2 <__lo0bits+0x52>
 800776e:	0798      	lsls	r0, r3, #30
 8007770:	bf49      	itett	mi
 8007772:	085b      	lsrmi	r3, r3, #1
 8007774:	089b      	lsrpl	r3, r3, #2
 8007776:	2001      	movmi	r0, #1
 8007778:	6013      	strmi	r3, [r2, #0]
 800777a:	bf5c      	itt	pl
 800777c:	2002      	movpl	r0, #2
 800777e:	6013      	strpl	r3, [r2, #0]
 8007780:	4770      	bx	lr
 8007782:	b299      	uxth	r1, r3
 8007784:	b909      	cbnz	r1, 800778a <__lo0bits+0x2a>
 8007786:	2010      	movs	r0, #16
 8007788:	0c1b      	lsrs	r3, r3, #16
 800778a:	b2d9      	uxtb	r1, r3
 800778c:	b909      	cbnz	r1, 8007792 <__lo0bits+0x32>
 800778e:	3008      	adds	r0, #8
 8007790:	0a1b      	lsrs	r3, r3, #8
 8007792:	0719      	lsls	r1, r3, #28
 8007794:	bf04      	itt	eq
 8007796:	091b      	lsreq	r3, r3, #4
 8007798:	3004      	addeq	r0, #4
 800779a:	0799      	lsls	r1, r3, #30
 800779c:	bf04      	itt	eq
 800779e:	089b      	lsreq	r3, r3, #2
 80077a0:	3002      	addeq	r0, #2
 80077a2:	07d9      	lsls	r1, r3, #31
 80077a4:	d403      	bmi.n	80077ae <__lo0bits+0x4e>
 80077a6:	085b      	lsrs	r3, r3, #1
 80077a8:	f100 0001 	add.w	r0, r0, #1
 80077ac:	d003      	beq.n	80077b6 <__lo0bits+0x56>
 80077ae:	6013      	str	r3, [r2, #0]
 80077b0:	4770      	bx	lr
 80077b2:	2000      	movs	r0, #0
 80077b4:	4770      	bx	lr
 80077b6:	2020      	movs	r0, #32
 80077b8:	4770      	bx	lr
	...

080077bc <__i2b>:
 80077bc:	b510      	push	{r4, lr}
 80077be:	460c      	mov	r4, r1
 80077c0:	2101      	movs	r1, #1
 80077c2:	f7ff febb 	bl	800753c <_Balloc>
 80077c6:	4602      	mov	r2, r0
 80077c8:	b928      	cbnz	r0, 80077d6 <__i2b+0x1a>
 80077ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80077ce:	4b04      	ldr	r3, [pc, #16]	; (80077e0 <__i2b+0x24>)
 80077d0:	4804      	ldr	r0, [pc, #16]	; (80077e4 <__i2b+0x28>)
 80077d2:	f000 fdef 	bl	80083b4 <__assert_func>
 80077d6:	2301      	movs	r3, #1
 80077d8:	6144      	str	r4, [r0, #20]
 80077da:	6103      	str	r3, [r0, #16]
 80077dc:	bd10      	pop	{r4, pc}
 80077de:	bf00      	nop
 80077e0:	08009908 	.word	0x08009908
 80077e4:	08009994 	.word	0x08009994

080077e8 <__multiply>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	4691      	mov	r9, r2
 80077ee:	690a      	ldr	r2, [r1, #16]
 80077f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077f4:	460c      	mov	r4, r1
 80077f6:	429a      	cmp	r2, r3
 80077f8:	bfbe      	ittt	lt
 80077fa:	460b      	movlt	r3, r1
 80077fc:	464c      	movlt	r4, r9
 80077fe:	4699      	movlt	r9, r3
 8007800:	6927      	ldr	r7, [r4, #16]
 8007802:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007806:	68a3      	ldr	r3, [r4, #8]
 8007808:	6861      	ldr	r1, [r4, #4]
 800780a:	eb07 060a 	add.w	r6, r7, sl
 800780e:	42b3      	cmp	r3, r6
 8007810:	b085      	sub	sp, #20
 8007812:	bfb8      	it	lt
 8007814:	3101      	addlt	r1, #1
 8007816:	f7ff fe91 	bl	800753c <_Balloc>
 800781a:	b930      	cbnz	r0, 800782a <__multiply+0x42>
 800781c:	4602      	mov	r2, r0
 800781e:	f240 115d 	movw	r1, #349	; 0x15d
 8007822:	4b43      	ldr	r3, [pc, #268]	; (8007930 <__multiply+0x148>)
 8007824:	4843      	ldr	r0, [pc, #268]	; (8007934 <__multiply+0x14c>)
 8007826:	f000 fdc5 	bl	80083b4 <__assert_func>
 800782a:	f100 0514 	add.w	r5, r0, #20
 800782e:	462b      	mov	r3, r5
 8007830:	2200      	movs	r2, #0
 8007832:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007836:	4543      	cmp	r3, r8
 8007838:	d321      	bcc.n	800787e <__multiply+0x96>
 800783a:	f104 0314 	add.w	r3, r4, #20
 800783e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007842:	f109 0314 	add.w	r3, r9, #20
 8007846:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800784a:	9202      	str	r2, [sp, #8]
 800784c:	1b3a      	subs	r2, r7, r4
 800784e:	3a15      	subs	r2, #21
 8007850:	f022 0203 	bic.w	r2, r2, #3
 8007854:	3204      	adds	r2, #4
 8007856:	f104 0115 	add.w	r1, r4, #21
 800785a:	428f      	cmp	r7, r1
 800785c:	bf38      	it	cc
 800785e:	2204      	movcc	r2, #4
 8007860:	9201      	str	r2, [sp, #4]
 8007862:	9a02      	ldr	r2, [sp, #8]
 8007864:	9303      	str	r3, [sp, #12]
 8007866:	429a      	cmp	r2, r3
 8007868:	d80c      	bhi.n	8007884 <__multiply+0x9c>
 800786a:	2e00      	cmp	r6, #0
 800786c:	dd03      	ble.n	8007876 <__multiply+0x8e>
 800786e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007872:	2b00      	cmp	r3, #0
 8007874:	d059      	beq.n	800792a <__multiply+0x142>
 8007876:	6106      	str	r6, [r0, #16]
 8007878:	b005      	add	sp, #20
 800787a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800787e:	f843 2b04 	str.w	r2, [r3], #4
 8007882:	e7d8      	b.n	8007836 <__multiply+0x4e>
 8007884:	f8b3 a000 	ldrh.w	sl, [r3]
 8007888:	f1ba 0f00 	cmp.w	sl, #0
 800788c:	d023      	beq.n	80078d6 <__multiply+0xee>
 800788e:	46a9      	mov	r9, r5
 8007890:	f04f 0c00 	mov.w	ip, #0
 8007894:	f104 0e14 	add.w	lr, r4, #20
 8007898:	f85e 2b04 	ldr.w	r2, [lr], #4
 800789c:	f8d9 1000 	ldr.w	r1, [r9]
 80078a0:	fa1f fb82 	uxth.w	fp, r2
 80078a4:	b289      	uxth	r1, r1
 80078a6:	fb0a 110b 	mla	r1, sl, fp, r1
 80078aa:	4461      	add	r1, ip
 80078ac:	f8d9 c000 	ldr.w	ip, [r9]
 80078b0:	0c12      	lsrs	r2, r2, #16
 80078b2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80078b6:	fb0a c202 	mla	r2, sl, r2, ip
 80078ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80078be:	b289      	uxth	r1, r1
 80078c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078c4:	4577      	cmp	r7, lr
 80078c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078ca:	f849 1b04 	str.w	r1, [r9], #4
 80078ce:	d8e3      	bhi.n	8007898 <__multiply+0xb0>
 80078d0:	9a01      	ldr	r2, [sp, #4]
 80078d2:	f845 c002 	str.w	ip, [r5, r2]
 80078d6:	9a03      	ldr	r2, [sp, #12]
 80078d8:	3304      	adds	r3, #4
 80078da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80078de:	f1b9 0f00 	cmp.w	r9, #0
 80078e2:	d020      	beq.n	8007926 <__multiply+0x13e>
 80078e4:	46ae      	mov	lr, r5
 80078e6:	f04f 0a00 	mov.w	sl, #0
 80078ea:	6829      	ldr	r1, [r5, #0]
 80078ec:	f104 0c14 	add.w	ip, r4, #20
 80078f0:	f8bc b000 	ldrh.w	fp, [ip]
 80078f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80078f8:	b289      	uxth	r1, r1
 80078fa:	fb09 220b 	mla	r2, r9, fp, r2
 80078fe:	4492      	add	sl, r2
 8007900:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007904:	f84e 1b04 	str.w	r1, [lr], #4
 8007908:	f85c 2b04 	ldr.w	r2, [ip], #4
 800790c:	f8be 1000 	ldrh.w	r1, [lr]
 8007910:	0c12      	lsrs	r2, r2, #16
 8007912:	fb09 1102 	mla	r1, r9, r2, r1
 8007916:	4567      	cmp	r7, ip
 8007918:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800791c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007920:	d8e6      	bhi.n	80078f0 <__multiply+0x108>
 8007922:	9a01      	ldr	r2, [sp, #4]
 8007924:	50a9      	str	r1, [r5, r2]
 8007926:	3504      	adds	r5, #4
 8007928:	e79b      	b.n	8007862 <__multiply+0x7a>
 800792a:	3e01      	subs	r6, #1
 800792c:	e79d      	b.n	800786a <__multiply+0x82>
 800792e:	bf00      	nop
 8007930:	08009908 	.word	0x08009908
 8007934:	08009994 	.word	0x08009994

08007938 <__pow5mult>:
 8007938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800793c:	4615      	mov	r5, r2
 800793e:	f012 0203 	ands.w	r2, r2, #3
 8007942:	4606      	mov	r6, r0
 8007944:	460f      	mov	r7, r1
 8007946:	d007      	beq.n	8007958 <__pow5mult+0x20>
 8007948:	4c25      	ldr	r4, [pc, #148]	; (80079e0 <__pow5mult+0xa8>)
 800794a:	3a01      	subs	r2, #1
 800794c:	2300      	movs	r3, #0
 800794e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007952:	f7ff fe55 	bl	8007600 <__multadd>
 8007956:	4607      	mov	r7, r0
 8007958:	10ad      	asrs	r5, r5, #2
 800795a:	d03d      	beq.n	80079d8 <__pow5mult+0xa0>
 800795c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800795e:	b97c      	cbnz	r4, 8007980 <__pow5mult+0x48>
 8007960:	2010      	movs	r0, #16
 8007962:	f7ff fdb5 	bl	80074d0 <malloc>
 8007966:	4602      	mov	r2, r0
 8007968:	6270      	str	r0, [r6, #36]	; 0x24
 800796a:	b928      	cbnz	r0, 8007978 <__pow5mult+0x40>
 800796c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007970:	4b1c      	ldr	r3, [pc, #112]	; (80079e4 <__pow5mult+0xac>)
 8007972:	481d      	ldr	r0, [pc, #116]	; (80079e8 <__pow5mult+0xb0>)
 8007974:	f000 fd1e 	bl	80083b4 <__assert_func>
 8007978:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800797c:	6004      	str	r4, [r0, #0]
 800797e:	60c4      	str	r4, [r0, #12]
 8007980:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007984:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007988:	b94c      	cbnz	r4, 800799e <__pow5mult+0x66>
 800798a:	f240 2171 	movw	r1, #625	; 0x271
 800798e:	4630      	mov	r0, r6
 8007990:	f7ff ff14 	bl	80077bc <__i2b>
 8007994:	2300      	movs	r3, #0
 8007996:	4604      	mov	r4, r0
 8007998:	f8c8 0008 	str.w	r0, [r8, #8]
 800799c:	6003      	str	r3, [r0, #0]
 800799e:	f04f 0900 	mov.w	r9, #0
 80079a2:	07eb      	lsls	r3, r5, #31
 80079a4:	d50a      	bpl.n	80079bc <__pow5mult+0x84>
 80079a6:	4639      	mov	r1, r7
 80079a8:	4622      	mov	r2, r4
 80079aa:	4630      	mov	r0, r6
 80079ac:	f7ff ff1c 	bl	80077e8 <__multiply>
 80079b0:	4680      	mov	r8, r0
 80079b2:	4639      	mov	r1, r7
 80079b4:	4630      	mov	r0, r6
 80079b6:	f7ff fe01 	bl	80075bc <_Bfree>
 80079ba:	4647      	mov	r7, r8
 80079bc:	106d      	asrs	r5, r5, #1
 80079be:	d00b      	beq.n	80079d8 <__pow5mult+0xa0>
 80079c0:	6820      	ldr	r0, [r4, #0]
 80079c2:	b938      	cbnz	r0, 80079d4 <__pow5mult+0x9c>
 80079c4:	4622      	mov	r2, r4
 80079c6:	4621      	mov	r1, r4
 80079c8:	4630      	mov	r0, r6
 80079ca:	f7ff ff0d 	bl	80077e8 <__multiply>
 80079ce:	6020      	str	r0, [r4, #0]
 80079d0:	f8c0 9000 	str.w	r9, [r0]
 80079d4:	4604      	mov	r4, r0
 80079d6:	e7e4      	b.n	80079a2 <__pow5mult+0x6a>
 80079d8:	4638      	mov	r0, r7
 80079da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079de:	bf00      	nop
 80079e0:	08009ae0 	.word	0x08009ae0
 80079e4:	08009896 	.word	0x08009896
 80079e8:	08009994 	.word	0x08009994

080079ec <__lshift>:
 80079ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f0:	460c      	mov	r4, r1
 80079f2:	4607      	mov	r7, r0
 80079f4:	4691      	mov	r9, r2
 80079f6:	6923      	ldr	r3, [r4, #16]
 80079f8:	6849      	ldr	r1, [r1, #4]
 80079fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079fe:	68a3      	ldr	r3, [r4, #8]
 8007a00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a04:	f108 0601 	add.w	r6, r8, #1
 8007a08:	42b3      	cmp	r3, r6
 8007a0a:	db0b      	blt.n	8007a24 <__lshift+0x38>
 8007a0c:	4638      	mov	r0, r7
 8007a0e:	f7ff fd95 	bl	800753c <_Balloc>
 8007a12:	4605      	mov	r5, r0
 8007a14:	b948      	cbnz	r0, 8007a2a <__lshift+0x3e>
 8007a16:	4602      	mov	r2, r0
 8007a18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007a1c:	4b29      	ldr	r3, [pc, #164]	; (8007ac4 <__lshift+0xd8>)
 8007a1e:	482a      	ldr	r0, [pc, #168]	; (8007ac8 <__lshift+0xdc>)
 8007a20:	f000 fcc8 	bl	80083b4 <__assert_func>
 8007a24:	3101      	adds	r1, #1
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	e7ee      	b.n	8007a08 <__lshift+0x1c>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	f100 0114 	add.w	r1, r0, #20
 8007a30:	f100 0210 	add.w	r2, r0, #16
 8007a34:	4618      	mov	r0, r3
 8007a36:	4553      	cmp	r3, sl
 8007a38:	db37      	blt.n	8007aaa <__lshift+0xbe>
 8007a3a:	6920      	ldr	r0, [r4, #16]
 8007a3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a40:	f104 0314 	add.w	r3, r4, #20
 8007a44:	f019 091f 	ands.w	r9, r9, #31
 8007a48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007a50:	d02f      	beq.n	8007ab2 <__lshift+0xc6>
 8007a52:	468a      	mov	sl, r1
 8007a54:	f04f 0c00 	mov.w	ip, #0
 8007a58:	f1c9 0e20 	rsb	lr, r9, #32
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	fa02 f209 	lsl.w	r2, r2, r9
 8007a62:	ea42 020c 	orr.w	r2, r2, ip
 8007a66:	f84a 2b04 	str.w	r2, [sl], #4
 8007a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a6e:	4298      	cmp	r0, r3
 8007a70:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007a74:	d8f2      	bhi.n	8007a5c <__lshift+0x70>
 8007a76:	1b03      	subs	r3, r0, r4
 8007a78:	3b15      	subs	r3, #21
 8007a7a:	f023 0303 	bic.w	r3, r3, #3
 8007a7e:	3304      	adds	r3, #4
 8007a80:	f104 0215 	add.w	r2, r4, #21
 8007a84:	4290      	cmp	r0, r2
 8007a86:	bf38      	it	cc
 8007a88:	2304      	movcc	r3, #4
 8007a8a:	f841 c003 	str.w	ip, [r1, r3]
 8007a8e:	f1bc 0f00 	cmp.w	ip, #0
 8007a92:	d001      	beq.n	8007a98 <__lshift+0xac>
 8007a94:	f108 0602 	add.w	r6, r8, #2
 8007a98:	3e01      	subs	r6, #1
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	4621      	mov	r1, r4
 8007a9e:	612e      	str	r6, [r5, #16]
 8007aa0:	f7ff fd8c 	bl	80075bc <_Bfree>
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8007aae:	3301      	adds	r3, #1
 8007ab0:	e7c1      	b.n	8007a36 <__lshift+0x4a>
 8007ab2:	3904      	subs	r1, #4
 8007ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ab8:	4298      	cmp	r0, r3
 8007aba:	f841 2f04 	str.w	r2, [r1, #4]!
 8007abe:	d8f9      	bhi.n	8007ab4 <__lshift+0xc8>
 8007ac0:	e7ea      	b.n	8007a98 <__lshift+0xac>
 8007ac2:	bf00      	nop
 8007ac4:	08009908 	.word	0x08009908
 8007ac8:	08009994 	.word	0x08009994

08007acc <__mcmp>:
 8007acc:	4603      	mov	r3, r0
 8007ace:	690a      	ldr	r2, [r1, #16]
 8007ad0:	6900      	ldr	r0, [r0, #16]
 8007ad2:	b530      	push	{r4, r5, lr}
 8007ad4:	1a80      	subs	r0, r0, r2
 8007ad6:	d10d      	bne.n	8007af4 <__mcmp+0x28>
 8007ad8:	3314      	adds	r3, #20
 8007ada:	3114      	adds	r1, #20
 8007adc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ae0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ae4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ae8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007aec:	4295      	cmp	r5, r2
 8007aee:	d002      	beq.n	8007af6 <__mcmp+0x2a>
 8007af0:	d304      	bcc.n	8007afc <__mcmp+0x30>
 8007af2:	2001      	movs	r0, #1
 8007af4:	bd30      	pop	{r4, r5, pc}
 8007af6:	42a3      	cmp	r3, r4
 8007af8:	d3f4      	bcc.n	8007ae4 <__mcmp+0x18>
 8007afa:	e7fb      	b.n	8007af4 <__mcmp+0x28>
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b00:	e7f8      	b.n	8007af4 <__mcmp+0x28>
	...

08007b04 <__mdiff>:
 8007b04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b08:	460d      	mov	r5, r1
 8007b0a:	4607      	mov	r7, r0
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4628      	mov	r0, r5
 8007b10:	4614      	mov	r4, r2
 8007b12:	f7ff ffdb 	bl	8007acc <__mcmp>
 8007b16:	1e06      	subs	r6, r0, #0
 8007b18:	d111      	bne.n	8007b3e <__mdiff+0x3a>
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	f7ff fd0d 	bl	800753c <_Balloc>
 8007b22:	4602      	mov	r2, r0
 8007b24:	b928      	cbnz	r0, 8007b32 <__mdiff+0x2e>
 8007b26:	f240 2132 	movw	r1, #562	; 0x232
 8007b2a:	4b3a      	ldr	r3, [pc, #232]	; (8007c14 <__mdiff+0x110>)
 8007b2c:	483a      	ldr	r0, [pc, #232]	; (8007c18 <__mdiff+0x114>)
 8007b2e:	f000 fc41 	bl	80083b4 <__assert_func>
 8007b32:	2301      	movs	r3, #1
 8007b34:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007b38:	4610      	mov	r0, r2
 8007b3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3e:	bfa4      	itt	ge
 8007b40:	4623      	movge	r3, r4
 8007b42:	462c      	movge	r4, r5
 8007b44:	4638      	mov	r0, r7
 8007b46:	6861      	ldr	r1, [r4, #4]
 8007b48:	bfa6      	itte	ge
 8007b4a:	461d      	movge	r5, r3
 8007b4c:	2600      	movge	r6, #0
 8007b4e:	2601      	movlt	r6, #1
 8007b50:	f7ff fcf4 	bl	800753c <_Balloc>
 8007b54:	4602      	mov	r2, r0
 8007b56:	b918      	cbnz	r0, 8007b60 <__mdiff+0x5c>
 8007b58:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b5c:	4b2d      	ldr	r3, [pc, #180]	; (8007c14 <__mdiff+0x110>)
 8007b5e:	e7e5      	b.n	8007b2c <__mdiff+0x28>
 8007b60:	f102 0814 	add.w	r8, r2, #20
 8007b64:	46c2      	mov	sl, r8
 8007b66:	f04f 0c00 	mov.w	ip, #0
 8007b6a:	6927      	ldr	r7, [r4, #16]
 8007b6c:	60c6      	str	r6, [r0, #12]
 8007b6e:	692e      	ldr	r6, [r5, #16]
 8007b70:	f104 0014 	add.w	r0, r4, #20
 8007b74:	f105 0914 	add.w	r9, r5, #20
 8007b78:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007b7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b80:	3410      	adds	r4, #16
 8007b82:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007b86:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b8a:	fa1f f18b 	uxth.w	r1, fp
 8007b8e:	448c      	add	ip, r1
 8007b90:	b299      	uxth	r1, r3
 8007b92:	0c1b      	lsrs	r3, r3, #16
 8007b94:	ebac 0101 	sub.w	r1, ip, r1
 8007b98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b9c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007ba0:	b289      	uxth	r1, r1
 8007ba2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007ba6:	454e      	cmp	r6, r9
 8007ba8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007bac:	f84a 3b04 	str.w	r3, [sl], #4
 8007bb0:	d8e7      	bhi.n	8007b82 <__mdiff+0x7e>
 8007bb2:	1b73      	subs	r3, r6, r5
 8007bb4:	3b15      	subs	r3, #21
 8007bb6:	f023 0303 	bic.w	r3, r3, #3
 8007bba:	3515      	adds	r5, #21
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	42ae      	cmp	r6, r5
 8007bc0:	bf38      	it	cc
 8007bc2:	2304      	movcc	r3, #4
 8007bc4:	4418      	add	r0, r3
 8007bc6:	4443      	add	r3, r8
 8007bc8:	461e      	mov	r6, r3
 8007bca:	4605      	mov	r5, r0
 8007bcc:	4575      	cmp	r5, lr
 8007bce:	d30e      	bcc.n	8007bee <__mdiff+0xea>
 8007bd0:	f10e 0103 	add.w	r1, lr, #3
 8007bd4:	1a09      	subs	r1, r1, r0
 8007bd6:	f021 0103 	bic.w	r1, r1, #3
 8007bda:	3803      	subs	r0, #3
 8007bdc:	4586      	cmp	lr, r0
 8007bde:	bf38      	it	cc
 8007be0:	2100      	movcc	r1, #0
 8007be2:	4419      	add	r1, r3
 8007be4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007be8:	b18b      	cbz	r3, 8007c0e <__mdiff+0x10a>
 8007bea:	6117      	str	r7, [r2, #16]
 8007bec:	e7a4      	b.n	8007b38 <__mdiff+0x34>
 8007bee:	f855 8b04 	ldr.w	r8, [r5], #4
 8007bf2:	fa1f f188 	uxth.w	r1, r8
 8007bf6:	4461      	add	r1, ip
 8007bf8:	140c      	asrs	r4, r1, #16
 8007bfa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007bfe:	b289      	uxth	r1, r1
 8007c00:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007c04:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007c08:	f846 1b04 	str.w	r1, [r6], #4
 8007c0c:	e7de      	b.n	8007bcc <__mdiff+0xc8>
 8007c0e:	3f01      	subs	r7, #1
 8007c10:	e7e8      	b.n	8007be4 <__mdiff+0xe0>
 8007c12:	bf00      	nop
 8007c14:	08009908 	.word	0x08009908
 8007c18:	08009994 	.word	0x08009994

08007c1c <__ulp>:
 8007c1c:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <__ulp+0x48>)
 8007c1e:	400b      	ands	r3, r1
 8007c20:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	dd02      	ble.n	8007c2e <__ulp+0x12>
 8007c28:	2000      	movs	r0, #0
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4770      	bx	lr
 8007c2e:	425b      	negs	r3, r3
 8007c30:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007c34:	f04f 0000 	mov.w	r0, #0
 8007c38:	f04f 0100 	mov.w	r1, #0
 8007c3c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007c40:	da04      	bge.n	8007c4c <__ulp+0x30>
 8007c42:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c46:	fa43 f102 	asr.w	r1, r3, r2
 8007c4a:	4770      	bx	lr
 8007c4c:	f1a2 0314 	sub.w	r3, r2, #20
 8007c50:	2b1e      	cmp	r3, #30
 8007c52:	bfd6      	itet	le
 8007c54:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007c58:	2301      	movgt	r3, #1
 8007c5a:	fa22 f303 	lsrle.w	r3, r2, r3
 8007c5e:	4618      	mov	r0, r3
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	7ff00000 	.word	0x7ff00000

08007c68 <__b2d>:
 8007c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c6c:	6907      	ldr	r7, [r0, #16]
 8007c6e:	f100 0914 	add.w	r9, r0, #20
 8007c72:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007c76:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007c7a:	f1a7 0804 	sub.w	r8, r7, #4
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f7ff fd4e 	bl	8007720 <__hi0bits>
 8007c84:	f1c0 0320 	rsb	r3, r0, #32
 8007c88:	280a      	cmp	r0, #10
 8007c8a:	600b      	str	r3, [r1, #0]
 8007c8c:	491f      	ldr	r1, [pc, #124]	; (8007d0c <__b2d+0xa4>)
 8007c8e:	dc17      	bgt.n	8007cc0 <__b2d+0x58>
 8007c90:	45c1      	cmp	r9, r8
 8007c92:	bf28      	it	cs
 8007c94:	2200      	movcs	r2, #0
 8007c96:	f1c0 0c0b 	rsb	ip, r0, #11
 8007c9a:	fa26 f30c 	lsr.w	r3, r6, ip
 8007c9e:	bf38      	it	cc
 8007ca0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007ca4:	ea43 0501 	orr.w	r5, r3, r1
 8007ca8:	f100 0315 	add.w	r3, r0, #21
 8007cac:	fa06 f303 	lsl.w	r3, r6, r3
 8007cb0:	fa22 f20c 	lsr.w	r2, r2, ip
 8007cb4:	ea43 0402 	orr.w	r4, r3, r2
 8007cb8:	4620      	mov	r0, r4
 8007cba:	4629      	mov	r1, r5
 8007cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cc0:	45c1      	cmp	r9, r8
 8007cc2:	bf2e      	itee	cs
 8007cc4:	2200      	movcs	r2, #0
 8007cc6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007cca:	f1a7 0808 	subcc.w	r8, r7, #8
 8007cce:	f1b0 030b 	subs.w	r3, r0, #11
 8007cd2:	d016      	beq.n	8007d02 <__b2d+0x9a>
 8007cd4:	f1c3 0720 	rsb	r7, r3, #32
 8007cd8:	fa22 f107 	lsr.w	r1, r2, r7
 8007cdc:	45c8      	cmp	r8, r9
 8007cde:	fa06 f603 	lsl.w	r6, r6, r3
 8007ce2:	ea46 0601 	orr.w	r6, r6, r1
 8007ce6:	bf94      	ite	ls
 8007ce8:	2100      	movls	r1, #0
 8007cea:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007cee:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007cf2:	fa02 f003 	lsl.w	r0, r2, r3
 8007cf6:	40f9      	lsrs	r1, r7
 8007cf8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007cfc:	ea40 0401 	orr.w	r4, r0, r1
 8007d00:	e7da      	b.n	8007cb8 <__b2d+0x50>
 8007d02:	4614      	mov	r4, r2
 8007d04:	ea46 0501 	orr.w	r5, r6, r1
 8007d08:	e7d6      	b.n	8007cb8 <__b2d+0x50>
 8007d0a:	bf00      	nop
 8007d0c:	3ff00000 	.word	0x3ff00000

08007d10 <__d2b>:
 8007d10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007d14:	2101      	movs	r1, #1
 8007d16:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007d1a:	4690      	mov	r8, r2
 8007d1c:	461d      	mov	r5, r3
 8007d1e:	f7ff fc0d 	bl	800753c <_Balloc>
 8007d22:	4604      	mov	r4, r0
 8007d24:	b930      	cbnz	r0, 8007d34 <__d2b+0x24>
 8007d26:	4602      	mov	r2, r0
 8007d28:	f240 310a 	movw	r1, #778	; 0x30a
 8007d2c:	4b24      	ldr	r3, [pc, #144]	; (8007dc0 <__d2b+0xb0>)
 8007d2e:	4825      	ldr	r0, [pc, #148]	; (8007dc4 <__d2b+0xb4>)
 8007d30:	f000 fb40 	bl	80083b4 <__assert_func>
 8007d34:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007d38:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007d3c:	bb2d      	cbnz	r5, 8007d8a <__d2b+0x7a>
 8007d3e:	9301      	str	r3, [sp, #4]
 8007d40:	f1b8 0300 	subs.w	r3, r8, #0
 8007d44:	d026      	beq.n	8007d94 <__d2b+0x84>
 8007d46:	4668      	mov	r0, sp
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	f7ff fd09 	bl	8007760 <__lo0bits>
 8007d4e:	9900      	ldr	r1, [sp, #0]
 8007d50:	b1f0      	cbz	r0, 8007d90 <__d2b+0x80>
 8007d52:	9a01      	ldr	r2, [sp, #4]
 8007d54:	f1c0 0320 	rsb	r3, r0, #32
 8007d58:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5c:	430b      	orrs	r3, r1
 8007d5e:	40c2      	lsrs	r2, r0
 8007d60:	6163      	str	r3, [r4, #20]
 8007d62:	9201      	str	r2, [sp, #4]
 8007d64:	9b01      	ldr	r3, [sp, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	bf14      	ite	ne
 8007d6a:	2102      	movne	r1, #2
 8007d6c:	2101      	moveq	r1, #1
 8007d6e:	61a3      	str	r3, [r4, #24]
 8007d70:	6121      	str	r1, [r4, #16]
 8007d72:	b1c5      	cbz	r5, 8007da6 <__d2b+0x96>
 8007d74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d78:	4405      	add	r5, r0
 8007d7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d7e:	603d      	str	r5, [r7, #0]
 8007d80:	6030      	str	r0, [r6, #0]
 8007d82:	4620      	mov	r0, r4
 8007d84:	b002      	add	sp, #8
 8007d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d8e:	e7d6      	b.n	8007d3e <__d2b+0x2e>
 8007d90:	6161      	str	r1, [r4, #20]
 8007d92:	e7e7      	b.n	8007d64 <__d2b+0x54>
 8007d94:	a801      	add	r0, sp, #4
 8007d96:	f7ff fce3 	bl	8007760 <__lo0bits>
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	9b01      	ldr	r3, [sp, #4]
 8007d9e:	6121      	str	r1, [r4, #16]
 8007da0:	6163      	str	r3, [r4, #20]
 8007da2:	3020      	adds	r0, #32
 8007da4:	e7e5      	b.n	8007d72 <__d2b+0x62>
 8007da6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007daa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007dae:	6038      	str	r0, [r7, #0]
 8007db0:	6918      	ldr	r0, [r3, #16]
 8007db2:	f7ff fcb5 	bl	8007720 <__hi0bits>
 8007db6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007dba:	6031      	str	r1, [r6, #0]
 8007dbc:	e7e1      	b.n	8007d82 <__d2b+0x72>
 8007dbe:	bf00      	nop
 8007dc0:	08009908 	.word	0x08009908
 8007dc4:	08009994 	.word	0x08009994

08007dc8 <__ratio>:
 8007dc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	4688      	mov	r8, r1
 8007dce:	4669      	mov	r1, sp
 8007dd0:	4681      	mov	r9, r0
 8007dd2:	f7ff ff49 	bl	8007c68 <__b2d>
 8007dd6:	460f      	mov	r7, r1
 8007dd8:	4604      	mov	r4, r0
 8007dda:	460d      	mov	r5, r1
 8007ddc:	4640      	mov	r0, r8
 8007dde:	a901      	add	r1, sp, #4
 8007de0:	f7ff ff42 	bl	8007c68 <__b2d>
 8007de4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007de8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007dec:	468b      	mov	fp, r1
 8007dee:	eba3 0c02 	sub.w	ip, r3, r2
 8007df2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007df6:	1a9b      	subs	r3, r3, r2
 8007df8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bfd5      	itete	le
 8007e00:	460a      	movle	r2, r1
 8007e02:	462a      	movgt	r2, r5
 8007e04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007e08:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007e0c:	bfd8      	it	le
 8007e0e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007e12:	465b      	mov	r3, fp
 8007e14:	4602      	mov	r2, r0
 8007e16:	4639      	mov	r1, r7
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f7f8 fc87 	bl	800072c <__aeabi_ddiv>
 8007e1e:	b003      	add	sp, #12
 8007e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e24 <__copybits>:
 8007e24:	3901      	subs	r1, #1
 8007e26:	b570      	push	{r4, r5, r6, lr}
 8007e28:	1149      	asrs	r1, r1, #5
 8007e2a:	6914      	ldr	r4, [r2, #16]
 8007e2c:	3101      	adds	r1, #1
 8007e2e:	f102 0314 	add.w	r3, r2, #20
 8007e32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007e3a:	1f05      	subs	r5, r0, #4
 8007e3c:	42a3      	cmp	r3, r4
 8007e3e:	d30c      	bcc.n	8007e5a <__copybits+0x36>
 8007e40:	1aa3      	subs	r3, r4, r2
 8007e42:	3b11      	subs	r3, #17
 8007e44:	f023 0303 	bic.w	r3, r3, #3
 8007e48:	3211      	adds	r2, #17
 8007e4a:	42a2      	cmp	r2, r4
 8007e4c:	bf88      	it	hi
 8007e4e:	2300      	movhi	r3, #0
 8007e50:	4418      	add	r0, r3
 8007e52:	2300      	movs	r3, #0
 8007e54:	4288      	cmp	r0, r1
 8007e56:	d305      	bcc.n	8007e64 <__copybits+0x40>
 8007e58:	bd70      	pop	{r4, r5, r6, pc}
 8007e5a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e5e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007e62:	e7eb      	b.n	8007e3c <__copybits+0x18>
 8007e64:	f840 3b04 	str.w	r3, [r0], #4
 8007e68:	e7f4      	b.n	8007e54 <__copybits+0x30>

08007e6a <__any_on>:
 8007e6a:	f100 0214 	add.w	r2, r0, #20
 8007e6e:	6900      	ldr	r0, [r0, #16]
 8007e70:	114b      	asrs	r3, r1, #5
 8007e72:	4298      	cmp	r0, r3
 8007e74:	b510      	push	{r4, lr}
 8007e76:	db11      	blt.n	8007e9c <__any_on+0x32>
 8007e78:	dd0a      	ble.n	8007e90 <__any_on+0x26>
 8007e7a:	f011 011f 	ands.w	r1, r1, #31
 8007e7e:	d007      	beq.n	8007e90 <__any_on+0x26>
 8007e80:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e84:	fa24 f001 	lsr.w	r0, r4, r1
 8007e88:	fa00 f101 	lsl.w	r1, r0, r1
 8007e8c:	428c      	cmp	r4, r1
 8007e8e:	d10b      	bne.n	8007ea8 <__any_on+0x3e>
 8007e90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d803      	bhi.n	8007ea0 <__any_on+0x36>
 8007e98:	2000      	movs	r0, #0
 8007e9a:	bd10      	pop	{r4, pc}
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	e7f7      	b.n	8007e90 <__any_on+0x26>
 8007ea0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ea4:	2900      	cmp	r1, #0
 8007ea6:	d0f5      	beq.n	8007e94 <__any_on+0x2a>
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	e7f6      	b.n	8007e9a <__any_on+0x30>

08007eac <_calloc_r>:
 8007eac:	b570      	push	{r4, r5, r6, lr}
 8007eae:	fba1 5402 	umull	r5, r4, r1, r2
 8007eb2:	b934      	cbnz	r4, 8007ec2 <_calloc_r+0x16>
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	f000 f875 	bl	8007fa4 <_malloc_r>
 8007eba:	4606      	mov	r6, r0
 8007ebc:	b928      	cbnz	r0, 8007eca <_calloc_r+0x1e>
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	bd70      	pop	{r4, r5, r6, pc}
 8007ec2:	220c      	movs	r2, #12
 8007ec4:	2600      	movs	r6, #0
 8007ec6:	6002      	str	r2, [r0, #0]
 8007ec8:	e7f9      	b.n	8007ebe <_calloc_r+0x12>
 8007eca:	462a      	mov	r2, r5
 8007ecc:	4621      	mov	r1, r4
 8007ece:	f7fc fbf1 	bl	80046b4 <memset>
 8007ed2:	e7f4      	b.n	8007ebe <_calloc_r+0x12>

08007ed4 <_free_r>:
 8007ed4:	b538      	push	{r3, r4, r5, lr}
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	2900      	cmp	r1, #0
 8007eda:	d040      	beq.n	8007f5e <_free_r+0x8a>
 8007edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ee0:	1f0c      	subs	r4, r1, #4
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	bfb8      	it	lt
 8007ee6:	18e4      	addlt	r4, r4, r3
 8007ee8:	f000 faae 	bl	8008448 <__malloc_lock>
 8007eec:	4a1c      	ldr	r2, [pc, #112]	; (8007f60 <_free_r+0x8c>)
 8007eee:	6813      	ldr	r3, [r2, #0]
 8007ef0:	b933      	cbnz	r3, 8007f00 <_free_r+0x2c>
 8007ef2:	6063      	str	r3, [r4, #4]
 8007ef4:	6014      	str	r4, [r2, #0]
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007efc:	f000 baaa 	b.w	8008454 <__malloc_unlock>
 8007f00:	42a3      	cmp	r3, r4
 8007f02:	d908      	bls.n	8007f16 <_free_r+0x42>
 8007f04:	6820      	ldr	r0, [r4, #0]
 8007f06:	1821      	adds	r1, r4, r0
 8007f08:	428b      	cmp	r3, r1
 8007f0a:	bf01      	itttt	eq
 8007f0c:	6819      	ldreq	r1, [r3, #0]
 8007f0e:	685b      	ldreq	r3, [r3, #4]
 8007f10:	1809      	addeq	r1, r1, r0
 8007f12:	6021      	streq	r1, [r4, #0]
 8007f14:	e7ed      	b.n	8007ef2 <_free_r+0x1e>
 8007f16:	461a      	mov	r2, r3
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	b10b      	cbz	r3, 8007f20 <_free_r+0x4c>
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	d9fa      	bls.n	8007f16 <_free_r+0x42>
 8007f20:	6811      	ldr	r1, [r2, #0]
 8007f22:	1850      	adds	r0, r2, r1
 8007f24:	42a0      	cmp	r0, r4
 8007f26:	d10b      	bne.n	8007f40 <_free_r+0x6c>
 8007f28:	6820      	ldr	r0, [r4, #0]
 8007f2a:	4401      	add	r1, r0
 8007f2c:	1850      	adds	r0, r2, r1
 8007f2e:	4283      	cmp	r3, r0
 8007f30:	6011      	str	r1, [r2, #0]
 8007f32:	d1e0      	bne.n	8007ef6 <_free_r+0x22>
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	4401      	add	r1, r0
 8007f3a:	6011      	str	r1, [r2, #0]
 8007f3c:	6053      	str	r3, [r2, #4]
 8007f3e:	e7da      	b.n	8007ef6 <_free_r+0x22>
 8007f40:	d902      	bls.n	8007f48 <_free_r+0x74>
 8007f42:	230c      	movs	r3, #12
 8007f44:	602b      	str	r3, [r5, #0]
 8007f46:	e7d6      	b.n	8007ef6 <_free_r+0x22>
 8007f48:	6820      	ldr	r0, [r4, #0]
 8007f4a:	1821      	adds	r1, r4, r0
 8007f4c:	428b      	cmp	r3, r1
 8007f4e:	bf01      	itttt	eq
 8007f50:	6819      	ldreq	r1, [r3, #0]
 8007f52:	685b      	ldreq	r3, [r3, #4]
 8007f54:	1809      	addeq	r1, r1, r0
 8007f56:	6021      	streq	r1, [r4, #0]
 8007f58:	6063      	str	r3, [r4, #4]
 8007f5a:	6054      	str	r4, [r2, #4]
 8007f5c:	e7cb      	b.n	8007ef6 <_free_r+0x22>
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}
 8007f60:	2000071c 	.word	0x2000071c

08007f64 <sbrk_aligned>:
 8007f64:	b570      	push	{r4, r5, r6, lr}
 8007f66:	4e0e      	ldr	r6, [pc, #56]	; (8007fa0 <sbrk_aligned+0x3c>)
 8007f68:	460c      	mov	r4, r1
 8007f6a:	6831      	ldr	r1, [r6, #0]
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	b911      	cbnz	r1, 8007f76 <sbrk_aligned+0x12>
 8007f70:	f000 f9ee 	bl	8008350 <_sbrk_r>
 8007f74:	6030      	str	r0, [r6, #0]
 8007f76:	4621      	mov	r1, r4
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f000 f9e9 	bl	8008350 <_sbrk_r>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	d00a      	beq.n	8007f98 <sbrk_aligned+0x34>
 8007f82:	1cc4      	adds	r4, r0, #3
 8007f84:	f024 0403 	bic.w	r4, r4, #3
 8007f88:	42a0      	cmp	r0, r4
 8007f8a:	d007      	beq.n	8007f9c <sbrk_aligned+0x38>
 8007f8c:	1a21      	subs	r1, r4, r0
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f000 f9de 	bl	8008350 <_sbrk_r>
 8007f94:	3001      	adds	r0, #1
 8007f96:	d101      	bne.n	8007f9c <sbrk_aligned+0x38>
 8007f98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	20000720 	.word	0x20000720

08007fa4 <_malloc_r>:
 8007fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa8:	1ccd      	adds	r5, r1, #3
 8007faa:	f025 0503 	bic.w	r5, r5, #3
 8007fae:	3508      	adds	r5, #8
 8007fb0:	2d0c      	cmp	r5, #12
 8007fb2:	bf38      	it	cc
 8007fb4:	250c      	movcc	r5, #12
 8007fb6:	2d00      	cmp	r5, #0
 8007fb8:	4607      	mov	r7, r0
 8007fba:	db01      	blt.n	8007fc0 <_malloc_r+0x1c>
 8007fbc:	42a9      	cmp	r1, r5
 8007fbe:	d905      	bls.n	8007fcc <_malloc_r+0x28>
 8007fc0:	230c      	movs	r3, #12
 8007fc2:	2600      	movs	r6, #0
 8007fc4:	603b      	str	r3, [r7, #0]
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fcc:	4e2e      	ldr	r6, [pc, #184]	; (8008088 <_malloc_r+0xe4>)
 8007fce:	f000 fa3b 	bl	8008448 <__malloc_lock>
 8007fd2:	6833      	ldr	r3, [r6, #0]
 8007fd4:	461c      	mov	r4, r3
 8007fd6:	bb34      	cbnz	r4, 8008026 <_malloc_r+0x82>
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4638      	mov	r0, r7
 8007fdc:	f7ff ffc2 	bl	8007f64 <sbrk_aligned>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	d14d      	bne.n	8008082 <_malloc_r+0xde>
 8007fe6:	6834      	ldr	r4, [r6, #0]
 8007fe8:	4626      	mov	r6, r4
 8007fea:	2e00      	cmp	r6, #0
 8007fec:	d140      	bne.n	8008070 <_malloc_r+0xcc>
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	eb04 0803 	add.w	r8, r4, r3
 8007ff8:	f000 f9aa 	bl	8008350 <_sbrk_r>
 8007ffc:	4580      	cmp	r8, r0
 8007ffe:	d13a      	bne.n	8008076 <_malloc_r+0xd2>
 8008000:	6821      	ldr	r1, [r4, #0]
 8008002:	3503      	adds	r5, #3
 8008004:	1a6d      	subs	r5, r5, r1
 8008006:	f025 0503 	bic.w	r5, r5, #3
 800800a:	3508      	adds	r5, #8
 800800c:	2d0c      	cmp	r5, #12
 800800e:	bf38      	it	cc
 8008010:	250c      	movcc	r5, #12
 8008012:	4638      	mov	r0, r7
 8008014:	4629      	mov	r1, r5
 8008016:	f7ff ffa5 	bl	8007f64 <sbrk_aligned>
 800801a:	3001      	adds	r0, #1
 800801c:	d02b      	beq.n	8008076 <_malloc_r+0xd2>
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	442b      	add	r3, r5
 8008022:	6023      	str	r3, [r4, #0]
 8008024:	e00e      	b.n	8008044 <_malloc_r+0xa0>
 8008026:	6822      	ldr	r2, [r4, #0]
 8008028:	1b52      	subs	r2, r2, r5
 800802a:	d41e      	bmi.n	800806a <_malloc_r+0xc6>
 800802c:	2a0b      	cmp	r2, #11
 800802e:	d916      	bls.n	800805e <_malloc_r+0xba>
 8008030:	1961      	adds	r1, r4, r5
 8008032:	42a3      	cmp	r3, r4
 8008034:	6025      	str	r5, [r4, #0]
 8008036:	bf18      	it	ne
 8008038:	6059      	strne	r1, [r3, #4]
 800803a:	6863      	ldr	r3, [r4, #4]
 800803c:	bf08      	it	eq
 800803e:	6031      	streq	r1, [r6, #0]
 8008040:	5162      	str	r2, [r4, r5]
 8008042:	604b      	str	r3, [r1, #4]
 8008044:	4638      	mov	r0, r7
 8008046:	f104 060b 	add.w	r6, r4, #11
 800804a:	f000 fa03 	bl	8008454 <__malloc_unlock>
 800804e:	f026 0607 	bic.w	r6, r6, #7
 8008052:	1d23      	adds	r3, r4, #4
 8008054:	1af2      	subs	r2, r6, r3
 8008056:	d0b6      	beq.n	8007fc6 <_malloc_r+0x22>
 8008058:	1b9b      	subs	r3, r3, r6
 800805a:	50a3      	str	r3, [r4, r2]
 800805c:	e7b3      	b.n	8007fc6 <_malloc_r+0x22>
 800805e:	6862      	ldr	r2, [r4, #4]
 8008060:	42a3      	cmp	r3, r4
 8008062:	bf0c      	ite	eq
 8008064:	6032      	streq	r2, [r6, #0]
 8008066:	605a      	strne	r2, [r3, #4]
 8008068:	e7ec      	b.n	8008044 <_malloc_r+0xa0>
 800806a:	4623      	mov	r3, r4
 800806c:	6864      	ldr	r4, [r4, #4]
 800806e:	e7b2      	b.n	8007fd6 <_malloc_r+0x32>
 8008070:	4634      	mov	r4, r6
 8008072:	6876      	ldr	r6, [r6, #4]
 8008074:	e7b9      	b.n	8007fea <_malloc_r+0x46>
 8008076:	230c      	movs	r3, #12
 8008078:	4638      	mov	r0, r7
 800807a:	603b      	str	r3, [r7, #0]
 800807c:	f000 f9ea 	bl	8008454 <__malloc_unlock>
 8008080:	e7a1      	b.n	8007fc6 <_malloc_r+0x22>
 8008082:	6025      	str	r5, [r4, #0]
 8008084:	e7de      	b.n	8008044 <_malloc_r+0xa0>
 8008086:	bf00      	nop
 8008088:	2000071c 	.word	0x2000071c

0800808c <__ssputs_r>:
 800808c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008090:	688e      	ldr	r6, [r1, #8]
 8008092:	4682      	mov	sl, r0
 8008094:	429e      	cmp	r6, r3
 8008096:	460c      	mov	r4, r1
 8008098:	4690      	mov	r8, r2
 800809a:	461f      	mov	r7, r3
 800809c:	d838      	bhi.n	8008110 <__ssputs_r+0x84>
 800809e:	898a      	ldrh	r2, [r1, #12]
 80080a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080a4:	d032      	beq.n	800810c <__ssputs_r+0x80>
 80080a6:	6825      	ldr	r5, [r4, #0]
 80080a8:	6909      	ldr	r1, [r1, #16]
 80080aa:	3301      	adds	r3, #1
 80080ac:	eba5 0901 	sub.w	r9, r5, r1
 80080b0:	6965      	ldr	r5, [r4, #20]
 80080b2:	444b      	add	r3, r9
 80080b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080bc:	106d      	asrs	r5, r5, #1
 80080be:	429d      	cmp	r5, r3
 80080c0:	bf38      	it	cc
 80080c2:	461d      	movcc	r5, r3
 80080c4:	0553      	lsls	r3, r2, #21
 80080c6:	d531      	bpl.n	800812c <__ssputs_r+0xa0>
 80080c8:	4629      	mov	r1, r5
 80080ca:	f7ff ff6b 	bl	8007fa4 <_malloc_r>
 80080ce:	4606      	mov	r6, r0
 80080d0:	b950      	cbnz	r0, 80080e8 <__ssputs_r+0x5c>
 80080d2:	230c      	movs	r3, #12
 80080d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080d8:	f8ca 3000 	str.w	r3, [sl]
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080e2:	81a3      	strh	r3, [r4, #12]
 80080e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e8:	464a      	mov	r2, r9
 80080ea:	6921      	ldr	r1, [r4, #16]
 80080ec:	f7ff fa18 	bl	8007520 <memcpy>
 80080f0:	89a3      	ldrh	r3, [r4, #12]
 80080f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080fa:	81a3      	strh	r3, [r4, #12]
 80080fc:	6126      	str	r6, [r4, #16]
 80080fe:	444e      	add	r6, r9
 8008100:	6026      	str	r6, [r4, #0]
 8008102:	463e      	mov	r6, r7
 8008104:	6165      	str	r5, [r4, #20]
 8008106:	eba5 0509 	sub.w	r5, r5, r9
 800810a:	60a5      	str	r5, [r4, #8]
 800810c:	42be      	cmp	r6, r7
 800810e:	d900      	bls.n	8008112 <__ssputs_r+0x86>
 8008110:	463e      	mov	r6, r7
 8008112:	4632      	mov	r2, r6
 8008114:	4641      	mov	r1, r8
 8008116:	6820      	ldr	r0, [r4, #0]
 8008118:	f000 f97c 	bl	8008414 <memmove>
 800811c:	68a3      	ldr	r3, [r4, #8]
 800811e:	2000      	movs	r0, #0
 8008120:	1b9b      	subs	r3, r3, r6
 8008122:	60a3      	str	r3, [r4, #8]
 8008124:	6823      	ldr	r3, [r4, #0]
 8008126:	4433      	add	r3, r6
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	e7db      	b.n	80080e4 <__ssputs_r+0x58>
 800812c:	462a      	mov	r2, r5
 800812e:	f000 f997 	bl	8008460 <_realloc_r>
 8008132:	4606      	mov	r6, r0
 8008134:	2800      	cmp	r0, #0
 8008136:	d1e1      	bne.n	80080fc <__ssputs_r+0x70>
 8008138:	4650      	mov	r0, sl
 800813a:	6921      	ldr	r1, [r4, #16]
 800813c:	f7ff feca 	bl	8007ed4 <_free_r>
 8008140:	e7c7      	b.n	80080d2 <__ssputs_r+0x46>
	...

08008144 <_svfiprintf_r>:
 8008144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008148:	4698      	mov	r8, r3
 800814a:	898b      	ldrh	r3, [r1, #12]
 800814c:	4607      	mov	r7, r0
 800814e:	061b      	lsls	r3, r3, #24
 8008150:	460d      	mov	r5, r1
 8008152:	4614      	mov	r4, r2
 8008154:	b09d      	sub	sp, #116	; 0x74
 8008156:	d50e      	bpl.n	8008176 <_svfiprintf_r+0x32>
 8008158:	690b      	ldr	r3, [r1, #16]
 800815a:	b963      	cbnz	r3, 8008176 <_svfiprintf_r+0x32>
 800815c:	2140      	movs	r1, #64	; 0x40
 800815e:	f7ff ff21 	bl	8007fa4 <_malloc_r>
 8008162:	6028      	str	r0, [r5, #0]
 8008164:	6128      	str	r0, [r5, #16]
 8008166:	b920      	cbnz	r0, 8008172 <_svfiprintf_r+0x2e>
 8008168:	230c      	movs	r3, #12
 800816a:	603b      	str	r3, [r7, #0]
 800816c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008170:	e0d1      	b.n	8008316 <_svfiprintf_r+0x1d2>
 8008172:	2340      	movs	r3, #64	; 0x40
 8008174:	616b      	str	r3, [r5, #20]
 8008176:	2300      	movs	r3, #0
 8008178:	9309      	str	r3, [sp, #36]	; 0x24
 800817a:	2320      	movs	r3, #32
 800817c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008180:	2330      	movs	r3, #48	; 0x30
 8008182:	f04f 0901 	mov.w	r9, #1
 8008186:	f8cd 800c 	str.w	r8, [sp, #12]
 800818a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008330 <_svfiprintf_r+0x1ec>
 800818e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008192:	4623      	mov	r3, r4
 8008194:	469a      	mov	sl, r3
 8008196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800819a:	b10a      	cbz	r2, 80081a0 <_svfiprintf_r+0x5c>
 800819c:	2a25      	cmp	r2, #37	; 0x25
 800819e:	d1f9      	bne.n	8008194 <_svfiprintf_r+0x50>
 80081a0:	ebba 0b04 	subs.w	fp, sl, r4
 80081a4:	d00b      	beq.n	80081be <_svfiprintf_r+0x7a>
 80081a6:	465b      	mov	r3, fp
 80081a8:	4622      	mov	r2, r4
 80081aa:	4629      	mov	r1, r5
 80081ac:	4638      	mov	r0, r7
 80081ae:	f7ff ff6d 	bl	800808c <__ssputs_r>
 80081b2:	3001      	adds	r0, #1
 80081b4:	f000 80aa 	beq.w	800830c <_svfiprintf_r+0x1c8>
 80081b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081ba:	445a      	add	r2, fp
 80081bc:	9209      	str	r2, [sp, #36]	; 0x24
 80081be:	f89a 3000 	ldrb.w	r3, [sl]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f000 80a2 	beq.w	800830c <_svfiprintf_r+0x1c8>
 80081c8:	2300      	movs	r3, #0
 80081ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081d2:	f10a 0a01 	add.w	sl, sl, #1
 80081d6:	9304      	str	r3, [sp, #16]
 80081d8:	9307      	str	r3, [sp, #28]
 80081da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081de:	931a      	str	r3, [sp, #104]	; 0x68
 80081e0:	4654      	mov	r4, sl
 80081e2:	2205      	movs	r2, #5
 80081e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e8:	4851      	ldr	r0, [pc, #324]	; (8008330 <_svfiprintf_r+0x1ec>)
 80081ea:	f7ff f98b 	bl	8007504 <memchr>
 80081ee:	9a04      	ldr	r2, [sp, #16]
 80081f0:	b9d8      	cbnz	r0, 800822a <_svfiprintf_r+0xe6>
 80081f2:	06d0      	lsls	r0, r2, #27
 80081f4:	bf44      	itt	mi
 80081f6:	2320      	movmi	r3, #32
 80081f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081fc:	0711      	lsls	r1, r2, #28
 80081fe:	bf44      	itt	mi
 8008200:	232b      	movmi	r3, #43	; 0x2b
 8008202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008206:	f89a 3000 	ldrb.w	r3, [sl]
 800820a:	2b2a      	cmp	r3, #42	; 0x2a
 800820c:	d015      	beq.n	800823a <_svfiprintf_r+0xf6>
 800820e:	4654      	mov	r4, sl
 8008210:	2000      	movs	r0, #0
 8008212:	f04f 0c0a 	mov.w	ip, #10
 8008216:	9a07      	ldr	r2, [sp, #28]
 8008218:	4621      	mov	r1, r4
 800821a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800821e:	3b30      	subs	r3, #48	; 0x30
 8008220:	2b09      	cmp	r3, #9
 8008222:	d94e      	bls.n	80082c2 <_svfiprintf_r+0x17e>
 8008224:	b1b0      	cbz	r0, 8008254 <_svfiprintf_r+0x110>
 8008226:	9207      	str	r2, [sp, #28]
 8008228:	e014      	b.n	8008254 <_svfiprintf_r+0x110>
 800822a:	eba0 0308 	sub.w	r3, r0, r8
 800822e:	fa09 f303 	lsl.w	r3, r9, r3
 8008232:	4313      	orrs	r3, r2
 8008234:	46a2      	mov	sl, r4
 8008236:	9304      	str	r3, [sp, #16]
 8008238:	e7d2      	b.n	80081e0 <_svfiprintf_r+0x9c>
 800823a:	9b03      	ldr	r3, [sp, #12]
 800823c:	1d19      	adds	r1, r3, #4
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	9103      	str	r1, [sp, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	bfbb      	ittet	lt
 8008246:	425b      	neglt	r3, r3
 8008248:	f042 0202 	orrlt.w	r2, r2, #2
 800824c:	9307      	strge	r3, [sp, #28]
 800824e:	9307      	strlt	r3, [sp, #28]
 8008250:	bfb8      	it	lt
 8008252:	9204      	strlt	r2, [sp, #16]
 8008254:	7823      	ldrb	r3, [r4, #0]
 8008256:	2b2e      	cmp	r3, #46	; 0x2e
 8008258:	d10c      	bne.n	8008274 <_svfiprintf_r+0x130>
 800825a:	7863      	ldrb	r3, [r4, #1]
 800825c:	2b2a      	cmp	r3, #42	; 0x2a
 800825e:	d135      	bne.n	80082cc <_svfiprintf_r+0x188>
 8008260:	9b03      	ldr	r3, [sp, #12]
 8008262:	3402      	adds	r4, #2
 8008264:	1d1a      	adds	r2, r3, #4
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	9203      	str	r2, [sp, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	bfb8      	it	lt
 800826e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008272:	9305      	str	r3, [sp, #20]
 8008274:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008334 <_svfiprintf_r+0x1f0>
 8008278:	2203      	movs	r2, #3
 800827a:	4650      	mov	r0, sl
 800827c:	7821      	ldrb	r1, [r4, #0]
 800827e:	f7ff f941 	bl	8007504 <memchr>
 8008282:	b140      	cbz	r0, 8008296 <_svfiprintf_r+0x152>
 8008284:	2340      	movs	r3, #64	; 0x40
 8008286:	eba0 000a 	sub.w	r0, r0, sl
 800828a:	fa03 f000 	lsl.w	r0, r3, r0
 800828e:	9b04      	ldr	r3, [sp, #16]
 8008290:	3401      	adds	r4, #1
 8008292:	4303      	orrs	r3, r0
 8008294:	9304      	str	r3, [sp, #16]
 8008296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800829a:	2206      	movs	r2, #6
 800829c:	4826      	ldr	r0, [pc, #152]	; (8008338 <_svfiprintf_r+0x1f4>)
 800829e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082a2:	f7ff f92f 	bl	8007504 <memchr>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d038      	beq.n	800831c <_svfiprintf_r+0x1d8>
 80082aa:	4b24      	ldr	r3, [pc, #144]	; (800833c <_svfiprintf_r+0x1f8>)
 80082ac:	bb1b      	cbnz	r3, 80082f6 <_svfiprintf_r+0x1b2>
 80082ae:	9b03      	ldr	r3, [sp, #12]
 80082b0:	3307      	adds	r3, #7
 80082b2:	f023 0307 	bic.w	r3, r3, #7
 80082b6:	3308      	adds	r3, #8
 80082b8:	9303      	str	r3, [sp, #12]
 80082ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082bc:	4433      	add	r3, r6
 80082be:	9309      	str	r3, [sp, #36]	; 0x24
 80082c0:	e767      	b.n	8008192 <_svfiprintf_r+0x4e>
 80082c2:	460c      	mov	r4, r1
 80082c4:	2001      	movs	r0, #1
 80082c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80082ca:	e7a5      	b.n	8008218 <_svfiprintf_r+0xd4>
 80082cc:	2300      	movs	r3, #0
 80082ce:	f04f 0c0a 	mov.w	ip, #10
 80082d2:	4619      	mov	r1, r3
 80082d4:	3401      	adds	r4, #1
 80082d6:	9305      	str	r3, [sp, #20]
 80082d8:	4620      	mov	r0, r4
 80082da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082de:	3a30      	subs	r2, #48	; 0x30
 80082e0:	2a09      	cmp	r2, #9
 80082e2:	d903      	bls.n	80082ec <_svfiprintf_r+0x1a8>
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d0c5      	beq.n	8008274 <_svfiprintf_r+0x130>
 80082e8:	9105      	str	r1, [sp, #20]
 80082ea:	e7c3      	b.n	8008274 <_svfiprintf_r+0x130>
 80082ec:	4604      	mov	r4, r0
 80082ee:	2301      	movs	r3, #1
 80082f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80082f4:	e7f0      	b.n	80082d8 <_svfiprintf_r+0x194>
 80082f6:	ab03      	add	r3, sp, #12
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	462a      	mov	r2, r5
 80082fc:	4638      	mov	r0, r7
 80082fe:	4b10      	ldr	r3, [pc, #64]	; (8008340 <_svfiprintf_r+0x1fc>)
 8008300:	a904      	add	r1, sp, #16
 8008302:	f7fc fa7d 	bl	8004800 <_printf_float>
 8008306:	1c42      	adds	r2, r0, #1
 8008308:	4606      	mov	r6, r0
 800830a:	d1d6      	bne.n	80082ba <_svfiprintf_r+0x176>
 800830c:	89ab      	ldrh	r3, [r5, #12]
 800830e:	065b      	lsls	r3, r3, #25
 8008310:	f53f af2c 	bmi.w	800816c <_svfiprintf_r+0x28>
 8008314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008316:	b01d      	add	sp, #116	; 0x74
 8008318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831c:	ab03      	add	r3, sp, #12
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	462a      	mov	r2, r5
 8008322:	4638      	mov	r0, r7
 8008324:	4b06      	ldr	r3, [pc, #24]	; (8008340 <_svfiprintf_r+0x1fc>)
 8008326:	a904      	add	r1, sp, #16
 8008328:	f7fc fd06 	bl	8004d38 <_printf_i>
 800832c:	e7eb      	b.n	8008306 <_svfiprintf_r+0x1c2>
 800832e:	bf00      	nop
 8008330:	08009aec 	.word	0x08009aec
 8008334:	08009af2 	.word	0x08009af2
 8008338:	08009af6 	.word	0x08009af6
 800833c:	08004801 	.word	0x08004801
 8008340:	0800808d 	.word	0x0800808d

08008344 <nan>:
 8008344:	2000      	movs	r0, #0
 8008346:	4901      	ldr	r1, [pc, #4]	; (800834c <nan+0x8>)
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	7ff80000 	.word	0x7ff80000

08008350 <_sbrk_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	2300      	movs	r3, #0
 8008354:	4d05      	ldr	r5, [pc, #20]	; (800836c <_sbrk_r+0x1c>)
 8008356:	4604      	mov	r4, r0
 8008358:	4608      	mov	r0, r1
 800835a:	602b      	str	r3, [r5, #0]
 800835c:	f7f9 fcfe 	bl	8001d5c <_sbrk>
 8008360:	1c43      	adds	r3, r0, #1
 8008362:	d102      	bne.n	800836a <_sbrk_r+0x1a>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	b103      	cbz	r3, 800836a <_sbrk_r+0x1a>
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	bd38      	pop	{r3, r4, r5, pc}
 800836c:	20000724 	.word	0x20000724

08008370 <strncmp>:
 8008370:	4603      	mov	r3, r0
 8008372:	b510      	push	{r4, lr}
 8008374:	b172      	cbz	r2, 8008394 <strncmp+0x24>
 8008376:	3901      	subs	r1, #1
 8008378:	1884      	adds	r4, r0, r2
 800837a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800837e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008382:	4290      	cmp	r0, r2
 8008384:	d101      	bne.n	800838a <strncmp+0x1a>
 8008386:	42a3      	cmp	r3, r4
 8008388:	d101      	bne.n	800838e <strncmp+0x1e>
 800838a:	1a80      	subs	r0, r0, r2
 800838c:	bd10      	pop	{r4, pc}
 800838e:	2800      	cmp	r0, #0
 8008390:	d1f3      	bne.n	800837a <strncmp+0xa>
 8008392:	e7fa      	b.n	800838a <strncmp+0x1a>
 8008394:	4610      	mov	r0, r2
 8008396:	e7f9      	b.n	800838c <strncmp+0x1c>

08008398 <__ascii_wctomb>:
 8008398:	4603      	mov	r3, r0
 800839a:	4608      	mov	r0, r1
 800839c:	b141      	cbz	r1, 80083b0 <__ascii_wctomb+0x18>
 800839e:	2aff      	cmp	r2, #255	; 0xff
 80083a0:	d904      	bls.n	80083ac <__ascii_wctomb+0x14>
 80083a2:	228a      	movs	r2, #138	; 0x8a
 80083a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	4770      	bx	lr
 80083ac:	2001      	movs	r0, #1
 80083ae:	700a      	strb	r2, [r1, #0]
 80083b0:	4770      	bx	lr
	...

080083b4 <__assert_func>:
 80083b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083b6:	4614      	mov	r4, r2
 80083b8:	461a      	mov	r2, r3
 80083ba:	4b09      	ldr	r3, [pc, #36]	; (80083e0 <__assert_func+0x2c>)
 80083bc:	4605      	mov	r5, r0
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68d8      	ldr	r0, [r3, #12]
 80083c2:	b14c      	cbz	r4, 80083d8 <__assert_func+0x24>
 80083c4:	4b07      	ldr	r3, [pc, #28]	; (80083e4 <__assert_func+0x30>)
 80083c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083ca:	9100      	str	r1, [sp, #0]
 80083cc:	462b      	mov	r3, r5
 80083ce:	4906      	ldr	r1, [pc, #24]	; (80083e8 <__assert_func+0x34>)
 80083d0:	f000 f80e 	bl	80083f0 <fiprintf>
 80083d4:	f000 fa8a 	bl	80088ec <abort>
 80083d8:	4b04      	ldr	r3, [pc, #16]	; (80083ec <__assert_func+0x38>)
 80083da:	461c      	mov	r4, r3
 80083dc:	e7f3      	b.n	80083c6 <__assert_func+0x12>
 80083de:	bf00      	nop
 80083e0:	20000014 	.word	0x20000014
 80083e4:	08009afd 	.word	0x08009afd
 80083e8:	08009b0a 	.word	0x08009b0a
 80083ec:	08009b38 	.word	0x08009b38

080083f0 <fiprintf>:
 80083f0:	b40e      	push	{r1, r2, r3}
 80083f2:	b503      	push	{r0, r1, lr}
 80083f4:	4601      	mov	r1, r0
 80083f6:	ab03      	add	r3, sp, #12
 80083f8:	4805      	ldr	r0, [pc, #20]	; (8008410 <fiprintf+0x20>)
 80083fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80083fe:	6800      	ldr	r0, [r0, #0]
 8008400:	9301      	str	r3, [sp, #4]
 8008402:	f000 f883 	bl	800850c <_vfiprintf_r>
 8008406:	b002      	add	sp, #8
 8008408:	f85d eb04 	ldr.w	lr, [sp], #4
 800840c:	b003      	add	sp, #12
 800840e:	4770      	bx	lr
 8008410:	20000014 	.word	0x20000014

08008414 <memmove>:
 8008414:	4288      	cmp	r0, r1
 8008416:	b510      	push	{r4, lr}
 8008418:	eb01 0402 	add.w	r4, r1, r2
 800841c:	d902      	bls.n	8008424 <memmove+0x10>
 800841e:	4284      	cmp	r4, r0
 8008420:	4623      	mov	r3, r4
 8008422:	d807      	bhi.n	8008434 <memmove+0x20>
 8008424:	1e43      	subs	r3, r0, #1
 8008426:	42a1      	cmp	r1, r4
 8008428:	d008      	beq.n	800843c <memmove+0x28>
 800842a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800842e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008432:	e7f8      	b.n	8008426 <memmove+0x12>
 8008434:	4601      	mov	r1, r0
 8008436:	4402      	add	r2, r0
 8008438:	428a      	cmp	r2, r1
 800843a:	d100      	bne.n	800843e <memmove+0x2a>
 800843c:	bd10      	pop	{r4, pc}
 800843e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008442:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008446:	e7f7      	b.n	8008438 <memmove+0x24>

08008448 <__malloc_lock>:
 8008448:	4801      	ldr	r0, [pc, #4]	; (8008450 <__malloc_lock+0x8>)
 800844a:	f000 bc0b 	b.w	8008c64 <__retarget_lock_acquire_recursive>
 800844e:	bf00      	nop
 8008450:	20000728 	.word	0x20000728

08008454 <__malloc_unlock>:
 8008454:	4801      	ldr	r0, [pc, #4]	; (800845c <__malloc_unlock+0x8>)
 8008456:	f000 bc06 	b.w	8008c66 <__retarget_lock_release_recursive>
 800845a:	bf00      	nop
 800845c:	20000728 	.word	0x20000728

08008460 <_realloc_r>:
 8008460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008464:	4680      	mov	r8, r0
 8008466:	4614      	mov	r4, r2
 8008468:	460e      	mov	r6, r1
 800846a:	b921      	cbnz	r1, 8008476 <_realloc_r+0x16>
 800846c:	4611      	mov	r1, r2
 800846e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008472:	f7ff bd97 	b.w	8007fa4 <_malloc_r>
 8008476:	b92a      	cbnz	r2, 8008484 <_realloc_r+0x24>
 8008478:	f7ff fd2c 	bl	8007ed4 <_free_r>
 800847c:	4625      	mov	r5, r4
 800847e:	4628      	mov	r0, r5
 8008480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008484:	f000 fc56 	bl	8008d34 <_malloc_usable_size_r>
 8008488:	4284      	cmp	r4, r0
 800848a:	4607      	mov	r7, r0
 800848c:	d802      	bhi.n	8008494 <_realloc_r+0x34>
 800848e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008492:	d812      	bhi.n	80084ba <_realloc_r+0x5a>
 8008494:	4621      	mov	r1, r4
 8008496:	4640      	mov	r0, r8
 8008498:	f7ff fd84 	bl	8007fa4 <_malloc_r>
 800849c:	4605      	mov	r5, r0
 800849e:	2800      	cmp	r0, #0
 80084a0:	d0ed      	beq.n	800847e <_realloc_r+0x1e>
 80084a2:	42bc      	cmp	r4, r7
 80084a4:	4622      	mov	r2, r4
 80084a6:	4631      	mov	r1, r6
 80084a8:	bf28      	it	cs
 80084aa:	463a      	movcs	r2, r7
 80084ac:	f7ff f838 	bl	8007520 <memcpy>
 80084b0:	4631      	mov	r1, r6
 80084b2:	4640      	mov	r0, r8
 80084b4:	f7ff fd0e 	bl	8007ed4 <_free_r>
 80084b8:	e7e1      	b.n	800847e <_realloc_r+0x1e>
 80084ba:	4635      	mov	r5, r6
 80084bc:	e7df      	b.n	800847e <_realloc_r+0x1e>

080084be <__sfputc_r>:
 80084be:	6893      	ldr	r3, [r2, #8]
 80084c0:	b410      	push	{r4}
 80084c2:	3b01      	subs	r3, #1
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	6093      	str	r3, [r2, #8]
 80084c8:	da07      	bge.n	80084da <__sfputc_r+0x1c>
 80084ca:	6994      	ldr	r4, [r2, #24]
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	db01      	blt.n	80084d4 <__sfputc_r+0x16>
 80084d0:	290a      	cmp	r1, #10
 80084d2:	d102      	bne.n	80084da <__sfputc_r+0x1c>
 80084d4:	bc10      	pop	{r4}
 80084d6:	f000 b949 	b.w	800876c <__swbuf_r>
 80084da:	6813      	ldr	r3, [r2, #0]
 80084dc:	1c58      	adds	r0, r3, #1
 80084de:	6010      	str	r0, [r2, #0]
 80084e0:	7019      	strb	r1, [r3, #0]
 80084e2:	4608      	mov	r0, r1
 80084e4:	bc10      	pop	{r4}
 80084e6:	4770      	bx	lr

080084e8 <__sfputs_r>:
 80084e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ea:	4606      	mov	r6, r0
 80084ec:	460f      	mov	r7, r1
 80084ee:	4614      	mov	r4, r2
 80084f0:	18d5      	adds	r5, r2, r3
 80084f2:	42ac      	cmp	r4, r5
 80084f4:	d101      	bne.n	80084fa <__sfputs_r+0x12>
 80084f6:	2000      	movs	r0, #0
 80084f8:	e007      	b.n	800850a <__sfputs_r+0x22>
 80084fa:	463a      	mov	r2, r7
 80084fc:	4630      	mov	r0, r6
 80084fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008502:	f7ff ffdc 	bl	80084be <__sfputc_r>
 8008506:	1c43      	adds	r3, r0, #1
 8008508:	d1f3      	bne.n	80084f2 <__sfputs_r+0xa>
 800850a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800850c <_vfiprintf_r>:
 800850c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008510:	460d      	mov	r5, r1
 8008512:	4614      	mov	r4, r2
 8008514:	4698      	mov	r8, r3
 8008516:	4606      	mov	r6, r0
 8008518:	b09d      	sub	sp, #116	; 0x74
 800851a:	b118      	cbz	r0, 8008524 <_vfiprintf_r+0x18>
 800851c:	6983      	ldr	r3, [r0, #24]
 800851e:	b90b      	cbnz	r3, 8008524 <_vfiprintf_r+0x18>
 8008520:	f000 fb02 	bl	8008b28 <__sinit>
 8008524:	4b89      	ldr	r3, [pc, #548]	; (800874c <_vfiprintf_r+0x240>)
 8008526:	429d      	cmp	r5, r3
 8008528:	d11b      	bne.n	8008562 <_vfiprintf_r+0x56>
 800852a:	6875      	ldr	r5, [r6, #4]
 800852c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800852e:	07d9      	lsls	r1, r3, #31
 8008530:	d405      	bmi.n	800853e <_vfiprintf_r+0x32>
 8008532:	89ab      	ldrh	r3, [r5, #12]
 8008534:	059a      	lsls	r2, r3, #22
 8008536:	d402      	bmi.n	800853e <_vfiprintf_r+0x32>
 8008538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800853a:	f000 fb93 	bl	8008c64 <__retarget_lock_acquire_recursive>
 800853e:	89ab      	ldrh	r3, [r5, #12]
 8008540:	071b      	lsls	r3, r3, #28
 8008542:	d501      	bpl.n	8008548 <_vfiprintf_r+0x3c>
 8008544:	692b      	ldr	r3, [r5, #16]
 8008546:	b9eb      	cbnz	r3, 8008584 <_vfiprintf_r+0x78>
 8008548:	4629      	mov	r1, r5
 800854a:	4630      	mov	r0, r6
 800854c:	f000 f960 	bl	8008810 <__swsetup_r>
 8008550:	b1c0      	cbz	r0, 8008584 <_vfiprintf_r+0x78>
 8008552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008554:	07dc      	lsls	r4, r3, #31
 8008556:	d50e      	bpl.n	8008576 <_vfiprintf_r+0x6a>
 8008558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800855c:	b01d      	add	sp, #116	; 0x74
 800855e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008562:	4b7b      	ldr	r3, [pc, #492]	; (8008750 <_vfiprintf_r+0x244>)
 8008564:	429d      	cmp	r5, r3
 8008566:	d101      	bne.n	800856c <_vfiprintf_r+0x60>
 8008568:	68b5      	ldr	r5, [r6, #8]
 800856a:	e7df      	b.n	800852c <_vfiprintf_r+0x20>
 800856c:	4b79      	ldr	r3, [pc, #484]	; (8008754 <_vfiprintf_r+0x248>)
 800856e:	429d      	cmp	r5, r3
 8008570:	bf08      	it	eq
 8008572:	68f5      	ldreq	r5, [r6, #12]
 8008574:	e7da      	b.n	800852c <_vfiprintf_r+0x20>
 8008576:	89ab      	ldrh	r3, [r5, #12]
 8008578:	0598      	lsls	r0, r3, #22
 800857a:	d4ed      	bmi.n	8008558 <_vfiprintf_r+0x4c>
 800857c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800857e:	f000 fb72 	bl	8008c66 <__retarget_lock_release_recursive>
 8008582:	e7e9      	b.n	8008558 <_vfiprintf_r+0x4c>
 8008584:	2300      	movs	r3, #0
 8008586:	9309      	str	r3, [sp, #36]	; 0x24
 8008588:	2320      	movs	r3, #32
 800858a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800858e:	2330      	movs	r3, #48	; 0x30
 8008590:	f04f 0901 	mov.w	r9, #1
 8008594:	f8cd 800c 	str.w	r8, [sp, #12]
 8008598:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008758 <_vfiprintf_r+0x24c>
 800859c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085a0:	4623      	mov	r3, r4
 80085a2:	469a      	mov	sl, r3
 80085a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085a8:	b10a      	cbz	r2, 80085ae <_vfiprintf_r+0xa2>
 80085aa:	2a25      	cmp	r2, #37	; 0x25
 80085ac:	d1f9      	bne.n	80085a2 <_vfiprintf_r+0x96>
 80085ae:	ebba 0b04 	subs.w	fp, sl, r4
 80085b2:	d00b      	beq.n	80085cc <_vfiprintf_r+0xc0>
 80085b4:	465b      	mov	r3, fp
 80085b6:	4622      	mov	r2, r4
 80085b8:	4629      	mov	r1, r5
 80085ba:	4630      	mov	r0, r6
 80085bc:	f7ff ff94 	bl	80084e8 <__sfputs_r>
 80085c0:	3001      	adds	r0, #1
 80085c2:	f000 80aa 	beq.w	800871a <_vfiprintf_r+0x20e>
 80085c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085c8:	445a      	add	r2, fp
 80085ca:	9209      	str	r2, [sp, #36]	; 0x24
 80085cc:	f89a 3000 	ldrb.w	r3, [sl]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 80a2 	beq.w	800871a <_vfiprintf_r+0x20e>
 80085d6:	2300      	movs	r3, #0
 80085d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085e0:	f10a 0a01 	add.w	sl, sl, #1
 80085e4:	9304      	str	r3, [sp, #16]
 80085e6:	9307      	str	r3, [sp, #28]
 80085e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085ec:	931a      	str	r3, [sp, #104]	; 0x68
 80085ee:	4654      	mov	r4, sl
 80085f0:	2205      	movs	r2, #5
 80085f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f6:	4858      	ldr	r0, [pc, #352]	; (8008758 <_vfiprintf_r+0x24c>)
 80085f8:	f7fe ff84 	bl	8007504 <memchr>
 80085fc:	9a04      	ldr	r2, [sp, #16]
 80085fe:	b9d8      	cbnz	r0, 8008638 <_vfiprintf_r+0x12c>
 8008600:	06d1      	lsls	r1, r2, #27
 8008602:	bf44      	itt	mi
 8008604:	2320      	movmi	r3, #32
 8008606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800860a:	0713      	lsls	r3, r2, #28
 800860c:	bf44      	itt	mi
 800860e:	232b      	movmi	r3, #43	; 0x2b
 8008610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008614:	f89a 3000 	ldrb.w	r3, [sl]
 8008618:	2b2a      	cmp	r3, #42	; 0x2a
 800861a:	d015      	beq.n	8008648 <_vfiprintf_r+0x13c>
 800861c:	4654      	mov	r4, sl
 800861e:	2000      	movs	r0, #0
 8008620:	f04f 0c0a 	mov.w	ip, #10
 8008624:	9a07      	ldr	r2, [sp, #28]
 8008626:	4621      	mov	r1, r4
 8008628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800862c:	3b30      	subs	r3, #48	; 0x30
 800862e:	2b09      	cmp	r3, #9
 8008630:	d94e      	bls.n	80086d0 <_vfiprintf_r+0x1c4>
 8008632:	b1b0      	cbz	r0, 8008662 <_vfiprintf_r+0x156>
 8008634:	9207      	str	r2, [sp, #28]
 8008636:	e014      	b.n	8008662 <_vfiprintf_r+0x156>
 8008638:	eba0 0308 	sub.w	r3, r0, r8
 800863c:	fa09 f303 	lsl.w	r3, r9, r3
 8008640:	4313      	orrs	r3, r2
 8008642:	46a2      	mov	sl, r4
 8008644:	9304      	str	r3, [sp, #16]
 8008646:	e7d2      	b.n	80085ee <_vfiprintf_r+0xe2>
 8008648:	9b03      	ldr	r3, [sp, #12]
 800864a:	1d19      	adds	r1, r3, #4
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	9103      	str	r1, [sp, #12]
 8008650:	2b00      	cmp	r3, #0
 8008652:	bfbb      	ittet	lt
 8008654:	425b      	neglt	r3, r3
 8008656:	f042 0202 	orrlt.w	r2, r2, #2
 800865a:	9307      	strge	r3, [sp, #28]
 800865c:	9307      	strlt	r3, [sp, #28]
 800865e:	bfb8      	it	lt
 8008660:	9204      	strlt	r2, [sp, #16]
 8008662:	7823      	ldrb	r3, [r4, #0]
 8008664:	2b2e      	cmp	r3, #46	; 0x2e
 8008666:	d10c      	bne.n	8008682 <_vfiprintf_r+0x176>
 8008668:	7863      	ldrb	r3, [r4, #1]
 800866a:	2b2a      	cmp	r3, #42	; 0x2a
 800866c:	d135      	bne.n	80086da <_vfiprintf_r+0x1ce>
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	3402      	adds	r4, #2
 8008672:	1d1a      	adds	r2, r3, #4
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	9203      	str	r2, [sp, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	bfb8      	it	lt
 800867c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008680:	9305      	str	r3, [sp, #20]
 8008682:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800875c <_vfiprintf_r+0x250>
 8008686:	2203      	movs	r2, #3
 8008688:	4650      	mov	r0, sl
 800868a:	7821      	ldrb	r1, [r4, #0]
 800868c:	f7fe ff3a 	bl	8007504 <memchr>
 8008690:	b140      	cbz	r0, 80086a4 <_vfiprintf_r+0x198>
 8008692:	2340      	movs	r3, #64	; 0x40
 8008694:	eba0 000a 	sub.w	r0, r0, sl
 8008698:	fa03 f000 	lsl.w	r0, r3, r0
 800869c:	9b04      	ldr	r3, [sp, #16]
 800869e:	3401      	adds	r4, #1
 80086a0:	4303      	orrs	r3, r0
 80086a2:	9304      	str	r3, [sp, #16]
 80086a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a8:	2206      	movs	r2, #6
 80086aa:	482d      	ldr	r0, [pc, #180]	; (8008760 <_vfiprintf_r+0x254>)
 80086ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086b0:	f7fe ff28 	bl	8007504 <memchr>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d03f      	beq.n	8008738 <_vfiprintf_r+0x22c>
 80086b8:	4b2a      	ldr	r3, [pc, #168]	; (8008764 <_vfiprintf_r+0x258>)
 80086ba:	bb1b      	cbnz	r3, 8008704 <_vfiprintf_r+0x1f8>
 80086bc:	9b03      	ldr	r3, [sp, #12]
 80086be:	3307      	adds	r3, #7
 80086c0:	f023 0307 	bic.w	r3, r3, #7
 80086c4:	3308      	adds	r3, #8
 80086c6:	9303      	str	r3, [sp, #12]
 80086c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ca:	443b      	add	r3, r7
 80086cc:	9309      	str	r3, [sp, #36]	; 0x24
 80086ce:	e767      	b.n	80085a0 <_vfiprintf_r+0x94>
 80086d0:	460c      	mov	r4, r1
 80086d2:	2001      	movs	r0, #1
 80086d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80086d8:	e7a5      	b.n	8008626 <_vfiprintf_r+0x11a>
 80086da:	2300      	movs	r3, #0
 80086dc:	f04f 0c0a 	mov.w	ip, #10
 80086e0:	4619      	mov	r1, r3
 80086e2:	3401      	adds	r4, #1
 80086e4:	9305      	str	r3, [sp, #20]
 80086e6:	4620      	mov	r0, r4
 80086e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086ec:	3a30      	subs	r2, #48	; 0x30
 80086ee:	2a09      	cmp	r2, #9
 80086f0:	d903      	bls.n	80086fa <_vfiprintf_r+0x1ee>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d0c5      	beq.n	8008682 <_vfiprintf_r+0x176>
 80086f6:	9105      	str	r1, [sp, #20]
 80086f8:	e7c3      	b.n	8008682 <_vfiprintf_r+0x176>
 80086fa:	4604      	mov	r4, r0
 80086fc:	2301      	movs	r3, #1
 80086fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008702:	e7f0      	b.n	80086e6 <_vfiprintf_r+0x1da>
 8008704:	ab03      	add	r3, sp, #12
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	462a      	mov	r2, r5
 800870a:	4630      	mov	r0, r6
 800870c:	4b16      	ldr	r3, [pc, #88]	; (8008768 <_vfiprintf_r+0x25c>)
 800870e:	a904      	add	r1, sp, #16
 8008710:	f7fc f876 	bl	8004800 <_printf_float>
 8008714:	4607      	mov	r7, r0
 8008716:	1c78      	adds	r0, r7, #1
 8008718:	d1d6      	bne.n	80086c8 <_vfiprintf_r+0x1bc>
 800871a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800871c:	07d9      	lsls	r1, r3, #31
 800871e:	d405      	bmi.n	800872c <_vfiprintf_r+0x220>
 8008720:	89ab      	ldrh	r3, [r5, #12]
 8008722:	059a      	lsls	r2, r3, #22
 8008724:	d402      	bmi.n	800872c <_vfiprintf_r+0x220>
 8008726:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008728:	f000 fa9d 	bl	8008c66 <__retarget_lock_release_recursive>
 800872c:	89ab      	ldrh	r3, [r5, #12]
 800872e:	065b      	lsls	r3, r3, #25
 8008730:	f53f af12 	bmi.w	8008558 <_vfiprintf_r+0x4c>
 8008734:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008736:	e711      	b.n	800855c <_vfiprintf_r+0x50>
 8008738:	ab03      	add	r3, sp, #12
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	462a      	mov	r2, r5
 800873e:	4630      	mov	r0, r6
 8008740:	4b09      	ldr	r3, [pc, #36]	; (8008768 <_vfiprintf_r+0x25c>)
 8008742:	a904      	add	r1, sp, #16
 8008744:	f7fc faf8 	bl	8004d38 <_printf_i>
 8008748:	e7e4      	b.n	8008714 <_vfiprintf_r+0x208>
 800874a:	bf00      	nop
 800874c:	08009b5c 	.word	0x08009b5c
 8008750:	08009b7c 	.word	0x08009b7c
 8008754:	08009b3c 	.word	0x08009b3c
 8008758:	08009aec 	.word	0x08009aec
 800875c:	08009af2 	.word	0x08009af2
 8008760:	08009af6 	.word	0x08009af6
 8008764:	08004801 	.word	0x08004801
 8008768:	080084e9 	.word	0x080084e9

0800876c <__swbuf_r>:
 800876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876e:	460e      	mov	r6, r1
 8008770:	4614      	mov	r4, r2
 8008772:	4605      	mov	r5, r0
 8008774:	b118      	cbz	r0, 800877e <__swbuf_r+0x12>
 8008776:	6983      	ldr	r3, [r0, #24]
 8008778:	b90b      	cbnz	r3, 800877e <__swbuf_r+0x12>
 800877a:	f000 f9d5 	bl	8008b28 <__sinit>
 800877e:	4b21      	ldr	r3, [pc, #132]	; (8008804 <__swbuf_r+0x98>)
 8008780:	429c      	cmp	r4, r3
 8008782:	d12b      	bne.n	80087dc <__swbuf_r+0x70>
 8008784:	686c      	ldr	r4, [r5, #4]
 8008786:	69a3      	ldr	r3, [r4, #24]
 8008788:	60a3      	str	r3, [r4, #8]
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	071a      	lsls	r2, r3, #28
 800878e:	d52f      	bpl.n	80087f0 <__swbuf_r+0x84>
 8008790:	6923      	ldr	r3, [r4, #16]
 8008792:	b36b      	cbz	r3, 80087f0 <__swbuf_r+0x84>
 8008794:	6923      	ldr	r3, [r4, #16]
 8008796:	6820      	ldr	r0, [r4, #0]
 8008798:	b2f6      	uxtb	r6, r6
 800879a:	1ac0      	subs	r0, r0, r3
 800879c:	6963      	ldr	r3, [r4, #20]
 800879e:	4637      	mov	r7, r6
 80087a0:	4283      	cmp	r3, r0
 80087a2:	dc04      	bgt.n	80087ae <__swbuf_r+0x42>
 80087a4:	4621      	mov	r1, r4
 80087a6:	4628      	mov	r0, r5
 80087a8:	f000 f92a 	bl	8008a00 <_fflush_r>
 80087ac:	bb30      	cbnz	r0, 80087fc <__swbuf_r+0x90>
 80087ae:	68a3      	ldr	r3, [r4, #8]
 80087b0:	3001      	adds	r0, #1
 80087b2:	3b01      	subs	r3, #1
 80087b4:	60a3      	str	r3, [r4, #8]
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	1c5a      	adds	r2, r3, #1
 80087ba:	6022      	str	r2, [r4, #0]
 80087bc:	701e      	strb	r6, [r3, #0]
 80087be:	6963      	ldr	r3, [r4, #20]
 80087c0:	4283      	cmp	r3, r0
 80087c2:	d004      	beq.n	80087ce <__swbuf_r+0x62>
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	07db      	lsls	r3, r3, #31
 80087c8:	d506      	bpl.n	80087d8 <__swbuf_r+0x6c>
 80087ca:	2e0a      	cmp	r6, #10
 80087cc:	d104      	bne.n	80087d8 <__swbuf_r+0x6c>
 80087ce:	4621      	mov	r1, r4
 80087d0:	4628      	mov	r0, r5
 80087d2:	f000 f915 	bl	8008a00 <_fflush_r>
 80087d6:	b988      	cbnz	r0, 80087fc <__swbuf_r+0x90>
 80087d8:	4638      	mov	r0, r7
 80087da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087dc:	4b0a      	ldr	r3, [pc, #40]	; (8008808 <__swbuf_r+0x9c>)
 80087de:	429c      	cmp	r4, r3
 80087e0:	d101      	bne.n	80087e6 <__swbuf_r+0x7a>
 80087e2:	68ac      	ldr	r4, [r5, #8]
 80087e4:	e7cf      	b.n	8008786 <__swbuf_r+0x1a>
 80087e6:	4b09      	ldr	r3, [pc, #36]	; (800880c <__swbuf_r+0xa0>)
 80087e8:	429c      	cmp	r4, r3
 80087ea:	bf08      	it	eq
 80087ec:	68ec      	ldreq	r4, [r5, #12]
 80087ee:	e7ca      	b.n	8008786 <__swbuf_r+0x1a>
 80087f0:	4621      	mov	r1, r4
 80087f2:	4628      	mov	r0, r5
 80087f4:	f000 f80c 	bl	8008810 <__swsetup_r>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d0cb      	beq.n	8008794 <__swbuf_r+0x28>
 80087fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008800:	e7ea      	b.n	80087d8 <__swbuf_r+0x6c>
 8008802:	bf00      	nop
 8008804:	08009b5c 	.word	0x08009b5c
 8008808:	08009b7c 	.word	0x08009b7c
 800880c:	08009b3c 	.word	0x08009b3c

08008810 <__swsetup_r>:
 8008810:	4b32      	ldr	r3, [pc, #200]	; (80088dc <__swsetup_r+0xcc>)
 8008812:	b570      	push	{r4, r5, r6, lr}
 8008814:	681d      	ldr	r5, [r3, #0]
 8008816:	4606      	mov	r6, r0
 8008818:	460c      	mov	r4, r1
 800881a:	b125      	cbz	r5, 8008826 <__swsetup_r+0x16>
 800881c:	69ab      	ldr	r3, [r5, #24]
 800881e:	b913      	cbnz	r3, 8008826 <__swsetup_r+0x16>
 8008820:	4628      	mov	r0, r5
 8008822:	f000 f981 	bl	8008b28 <__sinit>
 8008826:	4b2e      	ldr	r3, [pc, #184]	; (80088e0 <__swsetup_r+0xd0>)
 8008828:	429c      	cmp	r4, r3
 800882a:	d10f      	bne.n	800884c <__swsetup_r+0x3c>
 800882c:	686c      	ldr	r4, [r5, #4]
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008834:	0719      	lsls	r1, r3, #28
 8008836:	d42c      	bmi.n	8008892 <__swsetup_r+0x82>
 8008838:	06dd      	lsls	r5, r3, #27
 800883a:	d411      	bmi.n	8008860 <__swsetup_r+0x50>
 800883c:	2309      	movs	r3, #9
 800883e:	6033      	str	r3, [r6, #0]
 8008840:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008848:	81a3      	strh	r3, [r4, #12]
 800884a:	e03e      	b.n	80088ca <__swsetup_r+0xba>
 800884c:	4b25      	ldr	r3, [pc, #148]	; (80088e4 <__swsetup_r+0xd4>)
 800884e:	429c      	cmp	r4, r3
 8008850:	d101      	bne.n	8008856 <__swsetup_r+0x46>
 8008852:	68ac      	ldr	r4, [r5, #8]
 8008854:	e7eb      	b.n	800882e <__swsetup_r+0x1e>
 8008856:	4b24      	ldr	r3, [pc, #144]	; (80088e8 <__swsetup_r+0xd8>)
 8008858:	429c      	cmp	r4, r3
 800885a:	bf08      	it	eq
 800885c:	68ec      	ldreq	r4, [r5, #12]
 800885e:	e7e6      	b.n	800882e <__swsetup_r+0x1e>
 8008860:	0758      	lsls	r0, r3, #29
 8008862:	d512      	bpl.n	800888a <__swsetup_r+0x7a>
 8008864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008866:	b141      	cbz	r1, 800887a <__swsetup_r+0x6a>
 8008868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800886c:	4299      	cmp	r1, r3
 800886e:	d002      	beq.n	8008876 <__swsetup_r+0x66>
 8008870:	4630      	mov	r0, r6
 8008872:	f7ff fb2f 	bl	8007ed4 <_free_r>
 8008876:	2300      	movs	r3, #0
 8008878:	6363      	str	r3, [r4, #52]	; 0x34
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008880:	81a3      	strh	r3, [r4, #12]
 8008882:	2300      	movs	r3, #0
 8008884:	6063      	str	r3, [r4, #4]
 8008886:	6923      	ldr	r3, [r4, #16]
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	89a3      	ldrh	r3, [r4, #12]
 800888c:	f043 0308 	orr.w	r3, r3, #8
 8008890:	81a3      	strh	r3, [r4, #12]
 8008892:	6923      	ldr	r3, [r4, #16]
 8008894:	b94b      	cbnz	r3, 80088aa <__swsetup_r+0x9a>
 8008896:	89a3      	ldrh	r3, [r4, #12]
 8008898:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800889c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088a0:	d003      	beq.n	80088aa <__swsetup_r+0x9a>
 80088a2:	4621      	mov	r1, r4
 80088a4:	4630      	mov	r0, r6
 80088a6:	f000 fa05 	bl	8008cb4 <__smakebuf_r>
 80088aa:	89a0      	ldrh	r0, [r4, #12]
 80088ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088b0:	f010 0301 	ands.w	r3, r0, #1
 80088b4:	d00a      	beq.n	80088cc <__swsetup_r+0xbc>
 80088b6:	2300      	movs	r3, #0
 80088b8:	60a3      	str	r3, [r4, #8]
 80088ba:	6963      	ldr	r3, [r4, #20]
 80088bc:	425b      	negs	r3, r3
 80088be:	61a3      	str	r3, [r4, #24]
 80088c0:	6923      	ldr	r3, [r4, #16]
 80088c2:	b943      	cbnz	r3, 80088d6 <__swsetup_r+0xc6>
 80088c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088c8:	d1ba      	bne.n	8008840 <__swsetup_r+0x30>
 80088ca:	bd70      	pop	{r4, r5, r6, pc}
 80088cc:	0781      	lsls	r1, r0, #30
 80088ce:	bf58      	it	pl
 80088d0:	6963      	ldrpl	r3, [r4, #20]
 80088d2:	60a3      	str	r3, [r4, #8]
 80088d4:	e7f4      	b.n	80088c0 <__swsetup_r+0xb0>
 80088d6:	2000      	movs	r0, #0
 80088d8:	e7f7      	b.n	80088ca <__swsetup_r+0xba>
 80088da:	bf00      	nop
 80088dc:	20000014 	.word	0x20000014
 80088e0:	08009b5c 	.word	0x08009b5c
 80088e4:	08009b7c 	.word	0x08009b7c
 80088e8:	08009b3c 	.word	0x08009b3c

080088ec <abort>:
 80088ec:	2006      	movs	r0, #6
 80088ee:	b508      	push	{r3, lr}
 80088f0:	f000 fa50 	bl	8008d94 <raise>
 80088f4:	2001      	movs	r0, #1
 80088f6:	f7f9 f9be 	bl	8001c76 <_exit>
	...

080088fc <__sflush_r>:
 80088fc:	898a      	ldrh	r2, [r1, #12]
 80088fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008900:	4605      	mov	r5, r0
 8008902:	0710      	lsls	r0, r2, #28
 8008904:	460c      	mov	r4, r1
 8008906:	d457      	bmi.n	80089b8 <__sflush_r+0xbc>
 8008908:	684b      	ldr	r3, [r1, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	dc04      	bgt.n	8008918 <__sflush_r+0x1c>
 800890e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008910:	2b00      	cmp	r3, #0
 8008912:	dc01      	bgt.n	8008918 <__sflush_r+0x1c>
 8008914:	2000      	movs	r0, #0
 8008916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800891a:	2e00      	cmp	r6, #0
 800891c:	d0fa      	beq.n	8008914 <__sflush_r+0x18>
 800891e:	2300      	movs	r3, #0
 8008920:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008924:	682f      	ldr	r7, [r5, #0]
 8008926:	602b      	str	r3, [r5, #0]
 8008928:	d032      	beq.n	8008990 <__sflush_r+0x94>
 800892a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	075a      	lsls	r2, r3, #29
 8008930:	d505      	bpl.n	800893e <__sflush_r+0x42>
 8008932:	6863      	ldr	r3, [r4, #4]
 8008934:	1ac0      	subs	r0, r0, r3
 8008936:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008938:	b10b      	cbz	r3, 800893e <__sflush_r+0x42>
 800893a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800893c:	1ac0      	subs	r0, r0, r3
 800893e:	2300      	movs	r3, #0
 8008940:	4602      	mov	r2, r0
 8008942:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008944:	4628      	mov	r0, r5
 8008946:	6a21      	ldr	r1, [r4, #32]
 8008948:	47b0      	blx	r6
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	d106      	bne.n	800895e <__sflush_r+0x62>
 8008950:	6829      	ldr	r1, [r5, #0]
 8008952:	291d      	cmp	r1, #29
 8008954:	d82c      	bhi.n	80089b0 <__sflush_r+0xb4>
 8008956:	4a29      	ldr	r2, [pc, #164]	; (80089fc <__sflush_r+0x100>)
 8008958:	40ca      	lsrs	r2, r1
 800895a:	07d6      	lsls	r6, r2, #31
 800895c:	d528      	bpl.n	80089b0 <__sflush_r+0xb4>
 800895e:	2200      	movs	r2, #0
 8008960:	6062      	str	r2, [r4, #4]
 8008962:	6922      	ldr	r2, [r4, #16]
 8008964:	04d9      	lsls	r1, r3, #19
 8008966:	6022      	str	r2, [r4, #0]
 8008968:	d504      	bpl.n	8008974 <__sflush_r+0x78>
 800896a:	1c42      	adds	r2, r0, #1
 800896c:	d101      	bne.n	8008972 <__sflush_r+0x76>
 800896e:	682b      	ldr	r3, [r5, #0]
 8008970:	b903      	cbnz	r3, 8008974 <__sflush_r+0x78>
 8008972:	6560      	str	r0, [r4, #84]	; 0x54
 8008974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008976:	602f      	str	r7, [r5, #0]
 8008978:	2900      	cmp	r1, #0
 800897a:	d0cb      	beq.n	8008914 <__sflush_r+0x18>
 800897c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008980:	4299      	cmp	r1, r3
 8008982:	d002      	beq.n	800898a <__sflush_r+0x8e>
 8008984:	4628      	mov	r0, r5
 8008986:	f7ff faa5 	bl	8007ed4 <_free_r>
 800898a:	2000      	movs	r0, #0
 800898c:	6360      	str	r0, [r4, #52]	; 0x34
 800898e:	e7c2      	b.n	8008916 <__sflush_r+0x1a>
 8008990:	6a21      	ldr	r1, [r4, #32]
 8008992:	2301      	movs	r3, #1
 8008994:	4628      	mov	r0, r5
 8008996:	47b0      	blx	r6
 8008998:	1c41      	adds	r1, r0, #1
 800899a:	d1c7      	bne.n	800892c <__sflush_r+0x30>
 800899c:	682b      	ldr	r3, [r5, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0c4      	beq.n	800892c <__sflush_r+0x30>
 80089a2:	2b1d      	cmp	r3, #29
 80089a4:	d001      	beq.n	80089aa <__sflush_r+0xae>
 80089a6:	2b16      	cmp	r3, #22
 80089a8:	d101      	bne.n	80089ae <__sflush_r+0xb2>
 80089aa:	602f      	str	r7, [r5, #0]
 80089ac:	e7b2      	b.n	8008914 <__sflush_r+0x18>
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b4:	81a3      	strh	r3, [r4, #12]
 80089b6:	e7ae      	b.n	8008916 <__sflush_r+0x1a>
 80089b8:	690f      	ldr	r7, [r1, #16]
 80089ba:	2f00      	cmp	r7, #0
 80089bc:	d0aa      	beq.n	8008914 <__sflush_r+0x18>
 80089be:	0793      	lsls	r3, r2, #30
 80089c0:	bf18      	it	ne
 80089c2:	2300      	movne	r3, #0
 80089c4:	680e      	ldr	r6, [r1, #0]
 80089c6:	bf08      	it	eq
 80089c8:	694b      	ldreq	r3, [r1, #20]
 80089ca:	1bf6      	subs	r6, r6, r7
 80089cc:	600f      	str	r7, [r1, #0]
 80089ce:	608b      	str	r3, [r1, #8]
 80089d0:	2e00      	cmp	r6, #0
 80089d2:	dd9f      	ble.n	8008914 <__sflush_r+0x18>
 80089d4:	4633      	mov	r3, r6
 80089d6:	463a      	mov	r2, r7
 80089d8:	4628      	mov	r0, r5
 80089da:	6a21      	ldr	r1, [r4, #32]
 80089dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80089e0:	47e0      	blx	ip
 80089e2:	2800      	cmp	r0, #0
 80089e4:	dc06      	bgt.n	80089f4 <__sflush_r+0xf8>
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089f0:	81a3      	strh	r3, [r4, #12]
 80089f2:	e790      	b.n	8008916 <__sflush_r+0x1a>
 80089f4:	4407      	add	r7, r0
 80089f6:	1a36      	subs	r6, r6, r0
 80089f8:	e7ea      	b.n	80089d0 <__sflush_r+0xd4>
 80089fa:	bf00      	nop
 80089fc:	20400001 	.word	0x20400001

08008a00 <_fflush_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	690b      	ldr	r3, [r1, #16]
 8008a04:	4605      	mov	r5, r0
 8008a06:	460c      	mov	r4, r1
 8008a08:	b913      	cbnz	r3, 8008a10 <_fflush_r+0x10>
 8008a0a:	2500      	movs	r5, #0
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
 8008a10:	b118      	cbz	r0, 8008a1a <_fflush_r+0x1a>
 8008a12:	6983      	ldr	r3, [r0, #24]
 8008a14:	b90b      	cbnz	r3, 8008a1a <_fflush_r+0x1a>
 8008a16:	f000 f887 	bl	8008b28 <__sinit>
 8008a1a:	4b14      	ldr	r3, [pc, #80]	; (8008a6c <_fflush_r+0x6c>)
 8008a1c:	429c      	cmp	r4, r3
 8008a1e:	d11b      	bne.n	8008a58 <_fflush_r+0x58>
 8008a20:	686c      	ldr	r4, [r5, #4]
 8008a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d0ef      	beq.n	8008a0a <_fflush_r+0xa>
 8008a2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a2c:	07d0      	lsls	r0, r2, #31
 8008a2e:	d404      	bmi.n	8008a3a <_fflush_r+0x3a>
 8008a30:	0599      	lsls	r1, r3, #22
 8008a32:	d402      	bmi.n	8008a3a <_fflush_r+0x3a>
 8008a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a36:	f000 f915 	bl	8008c64 <__retarget_lock_acquire_recursive>
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	f7ff ff5d 	bl	80088fc <__sflush_r>
 8008a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a44:	4605      	mov	r5, r0
 8008a46:	07da      	lsls	r2, r3, #31
 8008a48:	d4e0      	bmi.n	8008a0c <_fflush_r+0xc>
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	059b      	lsls	r3, r3, #22
 8008a4e:	d4dd      	bmi.n	8008a0c <_fflush_r+0xc>
 8008a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a52:	f000 f908 	bl	8008c66 <__retarget_lock_release_recursive>
 8008a56:	e7d9      	b.n	8008a0c <_fflush_r+0xc>
 8008a58:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <_fflush_r+0x70>)
 8008a5a:	429c      	cmp	r4, r3
 8008a5c:	d101      	bne.n	8008a62 <_fflush_r+0x62>
 8008a5e:	68ac      	ldr	r4, [r5, #8]
 8008a60:	e7df      	b.n	8008a22 <_fflush_r+0x22>
 8008a62:	4b04      	ldr	r3, [pc, #16]	; (8008a74 <_fflush_r+0x74>)
 8008a64:	429c      	cmp	r4, r3
 8008a66:	bf08      	it	eq
 8008a68:	68ec      	ldreq	r4, [r5, #12]
 8008a6a:	e7da      	b.n	8008a22 <_fflush_r+0x22>
 8008a6c:	08009b5c 	.word	0x08009b5c
 8008a70:	08009b7c 	.word	0x08009b7c
 8008a74:	08009b3c 	.word	0x08009b3c

08008a78 <std>:
 8008a78:	2300      	movs	r3, #0
 8008a7a:	b510      	push	{r4, lr}
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a86:	6083      	str	r3, [r0, #8]
 8008a88:	8181      	strh	r1, [r0, #12]
 8008a8a:	6643      	str	r3, [r0, #100]	; 0x64
 8008a8c:	81c2      	strh	r2, [r0, #14]
 8008a8e:	6183      	str	r3, [r0, #24]
 8008a90:	4619      	mov	r1, r3
 8008a92:	2208      	movs	r2, #8
 8008a94:	305c      	adds	r0, #92	; 0x5c
 8008a96:	f7fb fe0d 	bl	80046b4 <memset>
 8008a9a:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <std+0x38>)
 8008a9c:	6224      	str	r4, [r4, #32]
 8008a9e:	6263      	str	r3, [r4, #36]	; 0x24
 8008aa0:	4b04      	ldr	r3, [pc, #16]	; (8008ab4 <std+0x3c>)
 8008aa2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008aa4:	4b04      	ldr	r3, [pc, #16]	; (8008ab8 <std+0x40>)
 8008aa6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008aa8:	4b04      	ldr	r3, [pc, #16]	; (8008abc <std+0x44>)
 8008aaa:	6323      	str	r3, [r4, #48]	; 0x30
 8008aac:	bd10      	pop	{r4, pc}
 8008aae:	bf00      	nop
 8008ab0:	08008dcd 	.word	0x08008dcd
 8008ab4:	08008def 	.word	0x08008def
 8008ab8:	08008e27 	.word	0x08008e27
 8008abc:	08008e4b 	.word	0x08008e4b

08008ac0 <_cleanup_r>:
 8008ac0:	4901      	ldr	r1, [pc, #4]	; (8008ac8 <_cleanup_r+0x8>)
 8008ac2:	f000 b8af 	b.w	8008c24 <_fwalk_reent>
 8008ac6:	bf00      	nop
 8008ac8:	08008a01 	.word	0x08008a01

08008acc <__sfmoreglue>:
 8008acc:	2268      	movs	r2, #104	; 0x68
 8008ace:	b570      	push	{r4, r5, r6, lr}
 8008ad0:	1e4d      	subs	r5, r1, #1
 8008ad2:	4355      	muls	r5, r2
 8008ad4:	460e      	mov	r6, r1
 8008ad6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ada:	f7ff fa63 	bl	8007fa4 <_malloc_r>
 8008ade:	4604      	mov	r4, r0
 8008ae0:	b140      	cbz	r0, 8008af4 <__sfmoreglue+0x28>
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	e9c0 1600 	strd	r1, r6, [r0]
 8008ae8:	300c      	adds	r0, #12
 8008aea:	60a0      	str	r0, [r4, #8]
 8008aec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008af0:	f7fb fde0 	bl	80046b4 <memset>
 8008af4:	4620      	mov	r0, r4
 8008af6:	bd70      	pop	{r4, r5, r6, pc}

08008af8 <__sfp_lock_acquire>:
 8008af8:	4801      	ldr	r0, [pc, #4]	; (8008b00 <__sfp_lock_acquire+0x8>)
 8008afa:	f000 b8b3 	b.w	8008c64 <__retarget_lock_acquire_recursive>
 8008afe:	bf00      	nop
 8008b00:	20000729 	.word	0x20000729

08008b04 <__sfp_lock_release>:
 8008b04:	4801      	ldr	r0, [pc, #4]	; (8008b0c <__sfp_lock_release+0x8>)
 8008b06:	f000 b8ae 	b.w	8008c66 <__retarget_lock_release_recursive>
 8008b0a:	bf00      	nop
 8008b0c:	20000729 	.word	0x20000729

08008b10 <__sinit_lock_acquire>:
 8008b10:	4801      	ldr	r0, [pc, #4]	; (8008b18 <__sinit_lock_acquire+0x8>)
 8008b12:	f000 b8a7 	b.w	8008c64 <__retarget_lock_acquire_recursive>
 8008b16:	bf00      	nop
 8008b18:	2000072a 	.word	0x2000072a

08008b1c <__sinit_lock_release>:
 8008b1c:	4801      	ldr	r0, [pc, #4]	; (8008b24 <__sinit_lock_release+0x8>)
 8008b1e:	f000 b8a2 	b.w	8008c66 <__retarget_lock_release_recursive>
 8008b22:	bf00      	nop
 8008b24:	2000072a 	.word	0x2000072a

08008b28 <__sinit>:
 8008b28:	b510      	push	{r4, lr}
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	f7ff fff0 	bl	8008b10 <__sinit_lock_acquire>
 8008b30:	69a3      	ldr	r3, [r4, #24]
 8008b32:	b11b      	cbz	r3, 8008b3c <__sinit+0x14>
 8008b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b38:	f7ff bff0 	b.w	8008b1c <__sinit_lock_release>
 8008b3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b40:	6523      	str	r3, [r4, #80]	; 0x50
 8008b42:	4b13      	ldr	r3, [pc, #76]	; (8008b90 <__sinit+0x68>)
 8008b44:	4a13      	ldr	r2, [pc, #76]	; (8008b94 <__sinit+0x6c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b4a:	42a3      	cmp	r3, r4
 8008b4c:	bf08      	it	eq
 8008b4e:	2301      	moveq	r3, #1
 8008b50:	4620      	mov	r0, r4
 8008b52:	bf08      	it	eq
 8008b54:	61a3      	streq	r3, [r4, #24]
 8008b56:	f000 f81f 	bl	8008b98 <__sfp>
 8008b5a:	6060      	str	r0, [r4, #4]
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f000 f81b 	bl	8008b98 <__sfp>
 8008b62:	60a0      	str	r0, [r4, #8]
 8008b64:	4620      	mov	r0, r4
 8008b66:	f000 f817 	bl	8008b98 <__sfp>
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2104      	movs	r1, #4
 8008b6e:	60e0      	str	r0, [r4, #12]
 8008b70:	6860      	ldr	r0, [r4, #4]
 8008b72:	f7ff ff81 	bl	8008a78 <std>
 8008b76:	2201      	movs	r2, #1
 8008b78:	2109      	movs	r1, #9
 8008b7a:	68a0      	ldr	r0, [r4, #8]
 8008b7c:	f7ff ff7c 	bl	8008a78 <std>
 8008b80:	2202      	movs	r2, #2
 8008b82:	2112      	movs	r1, #18
 8008b84:	68e0      	ldr	r0, [r4, #12]
 8008b86:	f7ff ff77 	bl	8008a78 <std>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	61a3      	str	r3, [r4, #24]
 8008b8e:	e7d1      	b.n	8008b34 <__sinit+0xc>
 8008b90:	080096f8 	.word	0x080096f8
 8008b94:	08008ac1 	.word	0x08008ac1

08008b98 <__sfp>:
 8008b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9a:	4607      	mov	r7, r0
 8008b9c:	f7ff ffac 	bl	8008af8 <__sfp_lock_acquire>
 8008ba0:	4b1e      	ldr	r3, [pc, #120]	; (8008c1c <__sfp+0x84>)
 8008ba2:	681e      	ldr	r6, [r3, #0]
 8008ba4:	69b3      	ldr	r3, [r6, #24]
 8008ba6:	b913      	cbnz	r3, 8008bae <__sfp+0x16>
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f7ff ffbd 	bl	8008b28 <__sinit>
 8008bae:	3648      	adds	r6, #72	; 0x48
 8008bb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	d503      	bpl.n	8008bc0 <__sfp+0x28>
 8008bb8:	6833      	ldr	r3, [r6, #0]
 8008bba:	b30b      	cbz	r3, 8008c00 <__sfp+0x68>
 8008bbc:	6836      	ldr	r6, [r6, #0]
 8008bbe:	e7f7      	b.n	8008bb0 <__sfp+0x18>
 8008bc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008bc4:	b9d5      	cbnz	r5, 8008bfc <__sfp+0x64>
 8008bc6:	4b16      	ldr	r3, [pc, #88]	; (8008c20 <__sfp+0x88>)
 8008bc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bcc:	60e3      	str	r3, [r4, #12]
 8008bce:	6665      	str	r5, [r4, #100]	; 0x64
 8008bd0:	f000 f847 	bl	8008c62 <__retarget_lock_init_recursive>
 8008bd4:	f7ff ff96 	bl	8008b04 <__sfp_lock_release>
 8008bd8:	2208      	movs	r2, #8
 8008bda:	4629      	mov	r1, r5
 8008bdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008be0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008be4:	6025      	str	r5, [r4, #0]
 8008be6:	61a5      	str	r5, [r4, #24]
 8008be8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bec:	f7fb fd62 	bl	80046b4 <memset>
 8008bf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bfc:	3468      	adds	r4, #104	; 0x68
 8008bfe:	e7d9      	b.n	8008bb4 <__sfp+0x1c>
 8008c00:	2104      	movs	r1, #4
 8008c02:	4638      	mov	r0, r7
 8008c04:	f7ff ff62 	bl	8008acc <__sfmoreglue>
 8008c08:	4604      	mov	r4, r0
 8008c0a:	6030      	str	r0, [r6, #0]
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	d1d5      	bne.n	8008bbc <__sfp+0x24>
 8008c10:	f7ff ff78 	bl	8008b04 <__sfp_lock_release>
 8008c14:	230c      	movs	r3, #12
 8008c16:	603b      	str	r3, [r7, #0]
 8008c18:	e7ee      	b.n	8008bf8 <__sfp+0x60>
 8008c1a:	bf00      	nop
 8008c1c:	080096f8 	.word	0x080096f8
 8008c20:	ffff0001 	.word	0xffff0001

08008c24 <_fwalk_reent>:
 8008c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c28:	4606      	mov	r6, r0
 8008c2a:	4688      	mov	r8, r1
 8008c2c:	2700      	movs	r7, #0
 8008c2e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c36:	f1b9 0901 	subs.w	r9, r9, #1
 8008c3a:	d505      	bpl.n	8008c48 <_fwalk_reent+0x24>
 8008c3c:	6824      	ldr	r4, [r4, #0]
 8008c3e:	2c00      	cmp	r4, #0
 8008c40:	d1f7      	bne.n	8008c32 <_fwalk_reent+0xe>
 8008c42:	4638      	mov	r0, r7
 8008c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c48:	89ab      	ldrh	r3, [r5, #12]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d907      	bls.n	8008c5e <_fwalk_reent+0x3a>
 8008c4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c52:	3301      	adds	r3, #1
 8008c54:	d003      	beq.n	8008c5e <_fwalk_reent+0x3a>
 8008c56:	4629      	mov	r1, r5
 8008c58:	4630      	mov	r0, r6
 8008c5a:	47c0      	blx	r8
 8008c5c:	4307      	orrs	r7, r0
 8008c5e:	3568      	adds	r5, #104	; 0x68
 8008c60:	e7e9      	b.n	8008c36 <_fwalk_reent+0x12>

08008c62 <__retarget_lock_init_recursive>:
 8008c62:	4770      	bx	lr

08008c64 <__retarget_lock_acquire_recursive>:
 8008c64:	4770      	bx	lr

08008c66 <__retarget_lock_release_recursive>:
 8008c66:	4770      	bx	lr

08008c68 <__swhatbuf_r>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	460e      	mov	r6, r1
 8008c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c70:	4614      	mov	r4, r2
 8008c72:	2900      	cmp	r1, #0
 8008c74:	461d      	mov	r5, r3
 8008c76:	b096      	sub	sp, #88	; 0x58
 8008c78:	da08      	bge.n	8008c8c <__swhatbuf_r+0x24>
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c80:	602a      	str	r2, [r5, #0]
 8008c82:	061a      	lsls	r2, r3, #24
 8008c84:	d410      	bmi.n	8008ca8 <__swhatbuf_r+0x40>
 8008c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c8a:	e00e      	b.n	8008caa <__swhatbuf_r+0x42>
 8008c8c:	466a      	mov	r2, sp
 8008c8e:	f000 f903 	bl	8008e98 <_fstat_r>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	dbf1      	blt.n	8008c7a <__swhatbuf_r+0x12>
 8008c96:	9a01      	ldr	r2, [sp, #4]
 8008c98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ca0:	425a      	negs	r2, r3
 8008ca2:	415a      	adcs	r2, r3
 8008ca4:	602a      	str	r2, [r5, #0]
 8008ca6:	e7ee      	b.n	8008c86 <__swhatbuf_r+0x1e>
 8008ca8:	2340      	movs	r3, #64	; 0x40
 8008caa:	2000      	movs	r0, #0
 8008cac:	6023      	str	r3, [r4, #0]
 8008cae:	b016      	add	sp, #88	; 0x58
 8008cb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08008cb4 <__smakebuf_r>:
 8008cb4:	898b      	ldrh	r3, [r1, #12]
 8008cb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cb8:	079d      	lsls	r5, r3, #30
 8008cba:	4606      	mov	r6, r0
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	d507      	bpl.n	8008cd0 <__smakebuf_r+0x1c>
 8008cc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cc4:	6023      	str	r3, [r4, #0]
 8008cc6:	6123      	str	r3, [r4, #16]
 8008cc8:	2301      	movs	r3, #1
 8008cca:	6163      	str	r3, [r4, #20]
 8008ccc:	b002      	add	sp, #8
 8008cce:	bd70      	pop	{r4, r5, r6, pc}
 8008cd0:	466a      	mov	r2, sp
 8008cd2:	ab01      	add	r3, sp, #4
 8008cd4:	f7ff ffc8 	bl	8008c68 <__swhatbuf_r>
 8008cd8:	9900      	ldr	r1, [sp, #0]
 8008cda:	4605      	mov	r5, r0
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f7ff f961 	bl	8007fa4 <_malloc_r>
 8008ce2:	b948      	cbnz	r0, 8008cf8 <__smakebuf_r+0x44>
 8008ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ce8:	059a      	lsls	r2, r3, #22
 8008cea:	d4ef      	bmi.n	8008ccc <__smakebuf_r+0x18>
 8008cec:	f023 0303 	bic.w	r3, r3, #3
 8008cf0:	f043 0302 	orr.w	r3, r3, #2
 8008cf4:	81a3      	strh	r3, [r4, #12]
 8008cf6:	e7e3      	b.n	8008cc0 <__smakebuf_r+0xc>
 8008cf8:	4b0d      	ldr	r3, [pc, #52]	; (8008d30 <__smakebuf_r+0x7c>)
 8008cfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cfc:	89a3      	ldrh	r3, [r4, #12]
 8008cfe:	6020      	str	r0, [r4, #0]
 8008d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d04:	81a3      	strh	r3, [r4, #12]
 8008d06:	9b00      	ldr	r3, [sp, #0]
 8008d08:	6120      	str	r0, [r4, #16]
 8008d0a:	6163      	str	r3, [r4, #20]
 8008d0c:	9b01      	ldr	r3, [sp, #4]
 8008d0e:	b15b      	cbz	r3, 8008d28 <__smakebuf_r+0x74>
 8008d10:	4630      	mov	r0, r6
 8008d12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d16:	f000 f8d1 	bl	8008ebc <_isatty_r>
 8008d1a:	b128      	cbz	r0, 8008d28 <__smakebuf_r+0x74>
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	f023 0303 	bic.w	r3, r3, #3
 8008d22:	f043 0301 	orr.w	r3, r3, #1
 8008d26:	81a3      	strh	r3, [r4, #12]
 8008d28:	89a0      	ldrh	r0, [r4, #12]
 8008d2a:	4305      	orrs	r5, r0
 8008d2c:	81a5      	strh	r5, [r4, #12]
 8008d2e:	e7cd      	b.n	8008ccc <__smakebuf_r+0x18>
 8008d30:	08008ac1 	.word	0x08008ac1

08008d34 <_malloc_usable_size_r>:
 8008d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d38:	1f18      	subs	r0, r3, #4
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	bfbc      	itt	lt
 8008d3e:	580b      	ldrlt	r3, [r1, r0]
 8008d40:	18c0      	addlt	r0, r0, r3
 8008d42:	4770      	bx	lr

08008d44 <_raise_r>:
 8008d44:	291f      	cmp	r1, #31
 8008d46:	b538      	push	{r3, r4, r5, lr}
 8008d48:	4604      	mov	r4, r0
 8008d4a:	460d      	mov	r5, r1
 8008d4c:	d904      	bls.n	8008d58 <_raise_r+0x14>
 8008d4e:	2316      	movs	r3, #22
 8008d50:	6003      	str	r3, [r0, #0]
 8008d52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d56:	bd38      	pop	{r3, r4, r5, pc}
 8008d58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d5a:	b112      	cbz	r2, 8008d62 <_raise_r+0x1e>
 8008d5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d60:	b94b      	cbnz	r3, 8008d76 <_raise_r+0x32>
 8008d62:	4620      	mov	r0, r4
 8008d64:	f000 f830 	bl	8008dc8 <_getpid_r>
 8008d68:	462a      	mov	r2, r5
 8008d6a:	4601      	mov	r1, r0
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d72:	f000 b817 	b.w	8008da4 <_kill_r>
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d00a      	beq.n	8008d90 <_raise_r+0x4c>
 8008d7a:	1c59      	adds	r1, r3, #1
 8008d7c:	d103      	bne.n	8008d86 <_raise_r+0x42>
 8008d7e:	2316      	movs	r3, #22
 8008d80:	6003      	str	r3, [r0, #0]
 8008d82:	2001      	movs	r0, #1
 8008d84:	e7e7      	b.n	8008d56 <_raise_r+0x12>
 8008d86:	2400      	movs	r4, #0
 8008d88:	4628      	mov	r0, r5
 8008d8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d8e:	4798      	blx	r3
 8008d90:	2000      	movs	r0, #0
 8008d92:	e7e0      	b.n	8008d56 <_raise_r+0x12>

08008d94 <raise>:
 8008d94:	4b02      	ldr	r3, [pc, #8]	; (8008da0 <raise+0xc>)
 8008d96:	4601      	mov	r1, r0
 8008d98:	6818      	ldr	r0, [r3, #0]
 8008d9a:	f7ff bfd3 	b.w	8008d44 <_raise_r>
 8008d9e:	bf00      	nop
 8008da0:	20000014 	.word	0x20000014

08008da4 <_kill_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	2300      	movs	r3, #0
 8008da8:	4d06      	ldr	r5, [pc, #24]	; (8008dc4 <_kill_r+0x20>)
 8008daa:	4604      	mov	r4, r0
 8008dac:	4608      	mov	r0, r1
 8008dae:	4611      	mov	r1, r2
 8008db0:	602b      	str	r3, [r5, #0]
 8008db2:	f7f8 ff50 	bl	8001c56 <_kill>
 8008db6:	1c43      	adds	r3, r0, #1
 8008db8:	d102      	bne.n	8008dc0 <_kill_r+0x1c>
 8008dba:	682b      	ldr	r3, [r5, #0]
 8008dbc:	b103      	cbz	r3, 8008dc0 <_kill_r+0x1c>
 8008dbe:	6023      	str	r3, [r4, #0]
 8008dc0:	bd38      	pop	{r3, r4, r5, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20000724 	.word	0x20000724

08008dc8 <_getpid_r>:
 8008dc8:	f7f8 bf3e 	b.w	8001c48 <_getpid>

08008dcc <__sread>:
 8008dcc:	b510      	push	{r4, lr}
 8008dce:	460c      	mov	r4, r1
 8008dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd4:	f000 f894 	bl	8008f00 <_read_r>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	bfab      	itete	ge
 8008ddc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008dde:	89a3      	ldrhlt	r3, [r4, #12]
 8008de0:	181b      	addge	r3, r3, r0
 8008de2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008de6:	bfac      	ite	ge
 8008de8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008dea:	81a3      	strhlt	r3, [r4, #12]
 8008dec:	bd10      	pop	{r4, pc}

08008dee <__swrite>:
 8008dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df2:	461f      	mov	r7, r3
 8008df4:	898b      	ldrh	r3, [r1, #12]
 8008df6:	4605      	mov	r5, r0
 8008df8:	05db      	lsls	r3, r3, #23
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	4616      	mov	r6, r2
 8008dfe:	d505      	bpl.n	8008e0c <__swrite+0x1e>
 8008e00:	2302      	movs	r3, #2
 8008e02:	2200      	movs	r2, #0
 8008e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e08:	f000 f868 	bl	8008edc <_lseek_r>
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	4632      	mov	r2, r6
 8008e10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e14:	81a3      	strh	r3, [r4, #12]
 8008e16:	4628      	mov	r0, r5
 8008e18:	463b      	mov	r3, r7
 8008e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e22:	f000 b817 	b.w	8008e54 <_write_r>

08008e26 <__sseek>:
 8008e26:	b510      	push	{r4, lr}
 8008e28:	460c      	mov	r4, r1
 8008e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e2e:	f000 f855 	bl	8008edc <_lseek_r>
 8008e32:	1c43      	adds	r3, r0, #1
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	bf15      	itete	ne
 8008e38:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e42:	81a3      	strheq	r3, [r4, #12]
 8008e44:	bf18      	it	ne
 8008e46:	81a3      	strhne	r3, [r4, #12]
 8008e48:	bd10      	pop	{r4, pc}

08008e4a <__sclose>:
 8008e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e4e:	f000 b813 	b.w	8008e78 <_close_r>
	...

08008e54 <_write_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4604      	mov	r4, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	4d05      	ldr	r5, [pc, #20]	; (8008e74 <_write_r+0x20>)
 8008e60:	602a      	str	r2, [r5, #0]
 8008e62:	461a      	mov	r2, r3
 8008e64:	f7f8 ff2e 	bl	8001cc4 <_write>
 8008e68:	1c43      	adds	r3, r0, #1
 8008e6a:	d102      	bne.n	8008e72 <_write_r+0x1e>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	b103      	cbz	r3, 8008e72 <_write_r+0x1e>
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	bd38      	pop	{r3, r4, r5, pc}
 8008e74:	20000724 	.word	0x20000724

08008e78 <_close_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	4d05      	ldr	r5, [pc, #20]	; (8008e94 <_close_r+0x1c>)
 8008e7e:	4604      	mov	r4, r0
 8008e80:	4608      	mov	r0, r1
 8008e82:	602b      	str	r3, [r5, #0]
 8008e84:	f7f8 ff3a 	bl	8001cfc <_close>
 8008e88:	1c43      	adds	r3, r0, #1
 8008e8a:	d102      	bne.n	8008e92 <_close_r+0x1a>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	b103      	cbz	r3, 8008e92 <_close_r+0x1a>
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	20000724 	.word	0x20000724

08008e98 <_fstat_r>:
 8008e98:	b538      	push	{r3, r4, r5, lr}
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	4d06      	ldr	r5, [pc, #24]	; (8008eb8 <_fstat_r+0x20>)
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	4608      	mov	r0, r1
 8008ea2:	4611      	mov	r1, r2
 8008ea4:	602b      	str	r3, [r5, #0]
 8008ea6:	f7f8 ff34 	bl	8001d12 <_fstat>
 8008eaa:	1c43      	adds	r3, r0, #1
 8008eac:	d102      	bne.n	8008eb4 <_fstat_r+0x1c>
 8008eae:	682b      	ldr	r3, [r5, #0]
 8008eb0:	b103      	cbz	r3, 8008eb4 <_fstat_r+0x1c>
 8008eb2:	6023      	str	r3, [r4, #0]
 8008eb4:	bd38      	pop	{r3, r4, r5, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20000724 	.word	0x20000724

08008ebc <_isatty_r>:
 8008ebc:	b538      	push	{r3, r4, r5, lr}
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	4d05      	ldr	r5, [pc, #20]	; (8008ed8 <_isatty_r+0x1c>)
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	602b      	str	r3, [r5, #0]
 8008ec8:	f7f8 ff32 	bl	8001d30 <_isatty>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	d102      	bne.n	8008ed6 <_isatty_r+0x1a>
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	b103      	cbz	r3, 8008ed6 <_isatty_r+0x1a>
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	bd38      	pop	{r3, r4, r5, pc}
 8008ed8:	20000724 	.word	0x20000724

08008edc <_lseek_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4d05      	ldr	r5, [pc, #20]	; (8008efc <_lseek_r+0x20>)
 8008ee8:	602a      	str	r2, [r5, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	f7f8 ff2a 	bl	8001d44 <_lseek>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	d102      	bne.n	8008efa <_lseek_r+0x1e>
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	b103      	cbz	r3, 8008efa <_lseek_r+0x1e>
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	20000724 	.word	0x20000724

08008f00 <_read_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4604      	mov	r4, r0
 8008f04:	4608      	mov	r0, r1
 8008f06:	4611      	mov	r1, r2
 8008f08:	2200      	movs	r2, #0
 8008f0a:	4d05      	ldr	r5, [pc, #20]	; (8008f20 <_read_r+0x20>)
 8008f0c:	602a      	str	r2, [r5, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f7f8 febb 	bl	8001c8a <_read>
 8008f14:	1c43      	adds	r3, r0, #1
 8008f16:	d102      	bne.n	8008f1e <_read_r+0x1e>
 8008f18:	682b      	ldr	r3, [r5, #0]
 8008f1a:	b103      	cbz	r3, 8008f1e <_read_r+0x1e>
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	20000724 	.word	0x20000724

08008f24 <_init>:
 8008f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f26:	bf00      	nop
 8008f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f2a:	bc08      	pop	{r3}
 8008f2c:	469e      	mov	lr, r3
 8008f2e:	4770      	bx	lr

08008f30 <_fini>:
 8008f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f32:	bf00      	nop
 8008f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f36:	bc08      	pop	{r3}
 8008f38:	469e      	mov	lr, r3
 8008f3a:	4770      	bx	lr
