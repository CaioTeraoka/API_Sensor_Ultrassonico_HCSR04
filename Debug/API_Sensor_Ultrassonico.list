
API_Sensor_Ultrassonico.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d6c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c5c  08008e80  08008e80  00018e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009adc  08009adc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08009adc  08009adc  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009adc  08009adc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009adc  08009adc  00019adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ae0  08009ae0  00019ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  200001e8  08009ccc  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  08009ccc  0002072c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d749  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f5  00000000  00000000  0002d95a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  0002fa50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  00030870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c55  00000000  00000000  000315b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb79  00000000  00000000  0004a205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c285  00000000  00000000  00059d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6003  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005054  00000000  00000000  000e6054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008e64 	.word	0x08008e64

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008e64 	.word	0x08008e64

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <Medir_Distancia_CM>:
uint32_t Distancia  = 0;								//Variável que indica a distância
uint32_t Distancia_Real  = 0;
uint32_t a = 0;
uint32_t b = 0;									//Variável que nos diz o quanto o sensor está errando

uint32_t Medir_Distancia_CM(void){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Trigger_Pin, 1); 			// Para acionar o sensor se deve gerar um pulso de duração de 10uS no pino Trigger
 8000bde:	2201      	movs	r2, #1
 8000be0:	2102      	movs	r1, #2
 8000be2:	4815      	ldr	r0, [pc, #84]	; (8000c38 <Medir_Distancia_CM+0x60>)
 8000be4:	f001 fbd6 	bl	8002394 <HAL_GPIO_WritePin>
	for(int x = 0; x < 40; ++x){} 						//delay de 10uS (O clock funciona a 40Mhz)
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	e002      	b.n	8000bf4 <Medir_Distancia_CM+0x1c>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b27      	cmp	r3, #39	; 0x27
 8000bf8:	ddf9      	ble.n	8000bee <Medir_Distancia_CM+0x16>
	HAL_GPIO_WritePin(GPIOA, Trigger_Pin, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	480e      	ldr	r0, [pc, #56]	; (8000c38 <Medir_Distancia_CM+0x60>)
 8000c00:	f001 fbc8 	bl	8002394 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);			 //Habilita a interrupção para o timer 1, irá permitir a leitura da subida do Echo
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <Medir_Distancia_CM+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <Medir_Distancia_CM+0x64>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f042 0202 	orr.w	r2, r2, #2
 8000c12:	60da      	str	r2, [r3, #12]
	Distancia_Real = (Distancia - a)/(1+b);
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <Medir_Distancia_CM+0x68>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <Medir_Distancia_CM+0x6c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	1ad2      	subs	r2, r2, r3
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <Medir_Distancia_CM+0x70>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c28:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <Medir_Distancia_CM+0x74>)
 8000c2a:	6013      	str	r3, [r2, #0]
	return Distancia_Real; 							//Retorna a distância em centímetros
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <Medir_Distancia_CM+0x74>)
 8000c2e:	681b      	ldr	r3, [r3, #0]

} 														//Vai retornar a distância medida em centímetros
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40010800 	.word	0x40010800
 8000c3c:	20000278 	.word	0x20000278
 8000c40:	20000214 	.word	0x20000214
 8000c44:	2000021c 	.word	0x2000021c
 8000c48:	20000220 	.word	0x20000220
 8000c4c:	20000218 	.word	0x20000218

08000c50 <Medir_Distancia_INCH>:


uint32_t Medir_Distancia_INCH(void){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Trigger_Pin, 1); 			// Para acionar o sensor se deve gerar um pulso de duração de 10uS no pino Trigger
 8000c56:	2201      	movs	r2, #1
 8000c58:	2102      	movs	r1, #2
 8000c5a:	481f      	ldr	r0, [pc, #124]	; (8000cd8 <Medir_Distancia_INCH+0x88>)
 8000c5c:	f001 fb9a 	bl	8002394 <HAL_GPIO_WritePin>
	for(int x = 0; x < 40; ++x){} 						//delay de 10uS (O clock funciona a 40Mhz)
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	e002      	b.n	8000c6c <Medir_Distancia_INCH+0x1c>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b27      	cmp	r3, #39	; 0x27
 8000c70:	ddf9      	ble.n	8000c66 <Medir_Distancia_INCH+0x16>
	HAL_GPIO_WritePin(GPIOA, Trigger_Pin, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2102      	movs	r1, #2
 8000c76:	4818      	ldr	r0, [pc, #96]	; (8000cd8 <Medir_Distancia_INCH+0x88>)
 8000c78:	f001 fb8c 	bl	8002394 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1); 			//Habilita a interrupção para o timer 1, irá permitir a leitura da subida do Echo
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <Medir_Distancia_INCH+0x8c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <Medir_Distancia_INCH+0x8c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f042 0202 	orr.w	r2, r2, #2
 8000c8a:	60da      	str	r2, [r3, #12]
	Distancia_Real = (Distancia - a)/(1+b);
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <Medir_Distancia_INCH+0x90>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <Medir_Distancia_INCH+0x94>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	1ad2      	subs	r2, r2, r3
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <Medir_Distancia_INCH+0x98>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca0:	4a12      	ldr	r2, [pc, #72]	; (8000cec <Medir_Distancia_INCH+0x9c>)
 8000ca2:	6013      	str	r3, [r2, #0]
	return Distancia_Real/2.54; 							//Retorna a distância em polegadas
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <Medir_Distancia_INCH+0x9c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fb9b 	bl	80003e4 <__aeabi_ui2d>
 8000cae:	a308      	add	r3, pc, #32	; (adr r3, 8000cd0 <Medir_Distancia_INCH+0x80>)
 8000cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb4:	f7ff fd3a 	bl	800072c <__aeabi_ddiv>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f7ff fee2 	bl	8000a88 <__aeabi_d2uiz>
 8000cc4:	4603      	mov	r3, r0

} 														//Vai retornar a distância em polegadas
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	851eb852 	.word	0x851eb852
 8000cd4:	400451eb 	.word	0x400451eb
 8000cd8:	40010800 	.word	0x40010800
 8000cdc:	20000278 	.word	0x20000278
 8000ce0:	20000214 	.word	0x20000214
 8000ce4:	2000021c 	.word	0x2000021c
 8000ce8:	20000220 	.word	0x20000220
 8000cec:	20000218 	.word	0x20000218

08000cf0 <Calibracao>:


void Calibracao(void){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b090      	sub	sp, #64	; 0x40
 8000cf4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2110      	movs	r1, #16
 8000cfa:	4838      	ldr	r0, [pc, #224]	; (8000ddc <Calibracao+0xec>)
 8000cfc:	f001 fb4a 	bl	8002394 <HAL_GPIO_WritePin>
	uint32_t medicao[10];
	uint32_t dist = 10;
 8000d00:	230a      	movs	r3, #10
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t somaY = 0 , somaX = 100 , somaQX = 1000, somaXY ;
 8000d04:	2300      	movs	r3, #0
 8000d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d08:	2364      	movs	r3, #100	; 0x64
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
    for(int a = 0; a < 10; ++a){
 8000d12:	2300      	movs	r3, #0
 8000d14:	637b      	str	r3, [r7, #52]	; 0x34
 8000d16:	e024      	b.n	8000d62 <Calibracao+0x72>
        medicao[a] = Medir_Distancia_CM() - dist;
 8000d18:	f7ff ff5e 	bl	8000bd8 <Medir_Distancia_CM>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d20:	1ad2      	subs	r2, r2, r3
 8000d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	3340      	adds	r3, #64	; 0x40
 8000d28:	443b      	add	r3, r7
 8000d2a:	f843 2c40 	str.w	r2, [r3, #-64]
        somaY += medicao[a];
 8000d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	3340      	adds	r3, #64	; 0x40
 8000d34:	443b      	add	r3, r7
 8000d36:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8000d3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d3c:	4413      	add	r3, r2
 8000d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        somaXY = medicao[a]*10;
 8000d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	3340      	adds	r3, #64	; 0x40
 8000d46:	443b      	add	r3, r7
 8000d48:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
        HAL_Delay(60);
 8000d56:	203c      	movs	r0, #60	; 0x3c
 8000d58:	f001 f866 	bl	8001e28 <HAL_Delay>
    for(int a = 0; a < 10; ++a){
 8000d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5e:	3301      	adds	r3, #1
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
 8000d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d64:	2b09      	cmp	r3, #9
 8000d66:	ddd7      	ble.n	8000d18 <Calibracao+0x28>
    }
    a = ((somaY*somaQX)-(somaX*somaXY))/(10*somaQX - (somaX*somaX));
 8000d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d6c:	fb03 f202 	mul.w	r2, r3, r2
 8000d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000d74:	fb01 f303 	mul.w	r3, r1, r3
 8000d78:	1ad1      	subs	r1, r2, r3
 8000d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	461a      	mov	r2, r3
 8000d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d88:	fb03 f303 	mul.w	r3, r3, r3
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d92:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <Calibracao+0xf0>)
 8000d94:	6013      	str	r3, [r2, #0]
    b = (10*somaXY-(somaX*somaY))/(10*somaQX - (somaX*somaX));
 8000d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4619      	mov	r1, r3
 8000da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000da6:	fb02 f303 	mul.w	r3, r2, r3
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	461a      	mov	r2, r3
 8000db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dba:	fb03 f303 	mul.w	r3, r3, r3
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dc4:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <Calibracao+0xf4>)
 8000dc6:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin, 1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2110      	movs	r1, #16
 8000dcc:	4803      	ldr	r0, [pc, #12]	; (8000ddc <Calibracao+0xec>)
 8000dce:	f001 fae1 	bl	8002394 <HAL_GPIO_WritePin>

}														//
 8000dd2:	bf00      	nop
 8000dd4:	3740      	adds	r7, #64	; 0x40
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40010800 	.word	0x40010800
 8000de0:	2000021c 	.word	0x2000021c
 8000de4:	20000220 	.word	0x20000220

08000de8 <Alerta_Distancia>:

void Alerta_Distancia(uint32_t dist){ 					//A função vai acontecer enquanto a variável funcao estiver em 2
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	uint32_t dist_atual = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
	while(funcao == 2){
 8000df4:	e014      	b.n	8000e20 <Alerta_Distancia+0x38>
	dist_atual = Medir_Distancia_CM(); 					//Mede a distancia atual
 8000df6:	f7ff feef 	bl	8000bd8 <Medir_Distancia_CM>
 8000dfa:	60f8      	str	r0, [r7, #12]
	if (dist_atual < dist) HAL_GPIO_WritePin(GPIOA, LED_2_Pin, 1); //Condicional para decisao se acende o led ou não
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d205      	bcs.n	8000e10 <Alerta_Distancia+0x28>
 8000e04:	2201      	movs	r2, #1
 8000e06:	2120      	movs	r1, #32
 8000e08:	480a      	ldr	r0, [pc, #40]	; (8000e34 <Alerta_Distancia+0x4c>)
 8000e0a:	f001 fac3 	bl	8002394 <HAL_GPIO_WritePin>
 8000e0e:	e004      	b.n	8000e1a <Alerta_Distancia+0x32>
	else HAL_GPIO_WritePin(GPIOA, LED_2_Pin, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2120      	movs	r1, #32
 8000e14:	4807      	ldr	r0, [pc, #28]	; (8000e34 <Alerta_Distancia+0x4c>)
 8000e16:	f001 fabd 	bl	8002394 <HAL_GPIO_WritePin>
	HAL_Delay(60); 										//delay de 60ms indicado pelo fabricante do sensor entre uma medição e outra
 8000e1a:	203c      	movs	r0, #60	; 0x3c
 8000e1c:	f001 f804 	bl	8001e28 <HAL_Delay>
	while(funcao == 2){
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <Alerta_Distancia+0x50>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d0e6      	beq.n	8000df6 <Alerta_Distancia+0xe>
	}
} 														//Recebe um valor de distância como parâmetro e quando o objeto estiver em uma distância menor um led irá acender como alerta
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40010800 	.word	0x40010800
 8000e38:	20000308 	.word	0x20000308
 8000e3c:	00000000 	.word	0x00000000

08000e40 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) //Esta função serve para capturar o tempo de que Echo fica em nível lógico alto
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7f1b      	ldrb	r3, [r3, #28]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	f040 8082 	bne.w	8000f56 <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (Primeira_Captura==0) 						//Se a variavel for igual a zero significa que o sinal subiu para nivel lógico alto
 8000e52:	4b45      	ldr	r3, [pc, #276]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d11a      	bne.n	8000e90 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			Time1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); //O momento de subida é armazenado na variavel time1
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f003 f89f 	bl	8003fa0 <HAL_TIM_ReadCapturedValue>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a41      	ldr	r2, [pc, #260]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e66:	6013      	str	r3, [r2, #0]
			Primeira_Captura = 1;
 8000e68:	4b3f      	ldr	r3, [pc, #252]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]


			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING); //Muda a configuração para ler o momento em que o sinal esteja descendo
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6a1a      	ldr	r2, [r3, #32]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 020a 	bic.w	r2, r2, #10
 8000e7c:	621a      	str	r2, [r3, #32]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6a1a      	ldr	r2, [r3, #32]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f042 0202 	orr.w	r2, r2, #2
 8000e8c:	621a      	str	r2, [r3, #32]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); //Muda a configuração para ler o momento em que o sinal esteja subindo
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1); //A interrupção é desabilitada para ser chamada apenas quando necessário
		}
	}
}
 8000e8e:	e062      	b.n	8000f56 <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Primeira_Captura==1) 					//Se a variavel for igual a um significa que o sinal desceu para nivel lógico baixo
 8000e90:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d15e      	bne.n	8000f56 <HAL_TIM_IC_CaptureCallback+0x116>
			Time2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);// //O momento de descida é armazenado na variavel time1
 8000e98:	2100      	movs	r1, #0
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f003 f880 	bl	8003fa0 <HAL_TIM_ReadCapturedValue>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4a33      	ldr	r2, [pc, #204]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ea4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0); 			//Reinicia o contador do timer1 para zero
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24
			if (Time2 > Time1)							// Se time2 for maior que time1 o resultado do tempo é igual a diferenca
 8000eae:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d907      	bls.n	8000eca <HAL_TIM_IC_CaptureCallback+0x8a>
				Diferenca = Time2-Time1;
 8000eba:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	4a2b      	ldr	r2, [pc, #172]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	e00f      	b.n	8000eea <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (Time1 > Time2)						// Se time1 for maior que time2 significa que o contador ultrapassou seu limite e reiniciou a contagem
 8000eca:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d909      	bls.n	8000eea <HAL_TIM_IC_CaptureCallback+0xaa>
				Diferenca = (0xffff - Time1) + Time2;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000ee4:	33ff      	adds	r3, #255	; 0xff
 8000ee6:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000ee8:	6013      	str	r3, [r2, #0]
			Distancia = Diferenca * 0.034/2;
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fa78 	bl	80003e4 <__aeabi_ui2d>
 8000ef4:	a31a      	add	r3, pc, #104	; (adr r3, 8000f60 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efa:	f7ff faed 	bl	80004d8 <__aeabi_dmul>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	4610      	mov	r0, r2
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f0e:	f7ff fc0d 	bl	800072c <__aeabi_ddiv>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f7ff fdb5 	bl	8000a88 <__aeabi_d2uiz>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a15      	ldr	r2, [pc, #84]	; (8000f78 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000f22:	6013      	str	r3, [r2, #0]
			Primeira_Captura = 0;
 8000f24:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); //Muda a configuração para ler o momento em que o sinal esteja subindo
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6a1a      	ldr	r2, [r3, #32]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 020a 	bic.w	r2, r2, #10
 8000f38:	621a      	str	r2, [r3, #32]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6a12      	ldr	r2, [r2, #32]
 8000f44:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1); //A interrupção é desabilitada para ser chamada apenas quando necessário
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 0202 	bic.w	r2, r2, #2
 8000f54:	60da      	str	r2, [r3, #12]
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	b020c49c 	.word	0xb020c49c
 8000f64:	3fa16872 	.word	0x3fa16872
 8000f68:	20000210 	.word	0x20000210
 8000f6c:	20000204 	.word	0x20000204
 8000f70:	20000208 	.word	0x20000208
 8000f74:	2000020c 	.word	0x2000020c
 8000f78:	20000214 	.word	0x20000214
 8000f7c:	20000278 	.word	0x20000278

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b094      	sub	sp, #80	; 0x50
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char distancia_cm_str[30];
	char distancia_inch_str[30];
	uint32_t distancia_cm = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t distancia_inch = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t distancia_limite_cm = 10;
 8000f8e:	230a      	movs	r3, #10
 8000f90:	647b      	str	r3, [r7, #68]	; 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f92:	f000 fee7 	bl	8001d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f96:	f000 f869 	bl	800106c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_TIM_Base_Start(&htim3);
 8000f9a:	482e      	ldr	r0, [pc, #184]	; (8001054 <main+0xd4>)
 8000f9c:	f002 fbf8 	bl	8003790 <HAL_TIM_Base_Start>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa0:	f000 f998 	bl	80012d4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000fa4:	f000 f8d2 	bl	800114c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000fa8:	f000 f946 	bl	8001238 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000fac:	f000 f8a0 	bl	80010f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000fb0:	f000 fa16 	bl	80013e0 <SSD1306_Init>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4828      	ldr	r0, [pc, #160]	; (8001058 <main+0xd8>)
 8000fb8:	f002 fc8c 	bl	80038d4 <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
// Este projeto irá chamar uma função da API de acordo com o valor da variável funcao, esta variável varia de acordo com a quantidade de vezes que o botão B2 foi apertado

  {
	  switch (funcao){
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <main+0xdc>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d03e      	beq.n	8001042 <main+0xc2>
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	dc40      	bgt.n	800104a <main+0xca>
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <main+0x52>
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d033      	beq.n	8001038 <main+0xb8>
 8000fd0:	e03b      	b.n	800104a <main+0xca>
	  case 0:
	  		  Calibracao();
 8000fd2:	f7ff fe8d 	bl	8000cf0 <Calibracao>
	  		  break;
 8000fd6:	e03b      	b.n	8001050 <main+0xd0>

	  case 1:
		  while(funcao == 0){ // Neste caso ele irá medir a distância em centímetros e polegadas e então printar no display OLED
			  distancia_cm = Medir_Distancia_CM();
 8000fd8:	f7ff fdfe 	bl	8000bd8 <Medir_Distancia_CM>
 8000fdc:	64f8      	str	r0, [r7, #76]	; 0x4c
			  distancia_inch = Medir_Distancia_INCH();
 8000fde:	f7ff fe37 	bl	8000c50 <Medir_Distancia_INCH>
 8000fe2:	64b8      	str	r0, [r7, #72]	; 0x48
			  sprintf(distancia_cm_str, "D_cm: %.2lu cm",distancia_cm);
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000fea:	491d      	ldr	r1, [pc, #116]	; (8001060 <main+0xe0>)
 8000fec:	4618      	mov	r0, r3
 8000fee:	f004 f97d 	bl	80052ec <siprintf>
			  SSD1306_GotoXY (0,0);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 fb5b 	bl	80016b0 <SSD1306_GotoXY>
			  SSD1306_Puts (distancia_cm_str, &Font_7x10, 1);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	2201      	movs	r2, #1
 8001000:	4918      	ldr	r1, [pc, #96]	; (8001064 <main+0xe4>)
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fbea 	bl	80017dc <SSD1306_Puts>
			  SSD1306_UpdateScreen(); // update display
 8001008:	f000 faae 	bl	8001568 <SSD1306_UpdateScreen>
			  sprintf(distancia_inch_str, "D_inch: %.2lu inch",distancia_inch);
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001010:	4915      	ldr	r1, [pc, #84]	; (8001068 <main+0xe8>)
 8001012:	4618      	mov	r0, r3
 8001014:	f004 f96a 	bl	80052ec <siprintf>
			  SSD1306_GotoXY (0,30);
 8001018:	211e      	movs	r1, #30
 800101a:	2000      	movs	r0, #0
 800101c:	f000 fb48 	bl	80016b0 <SSD1306_GotoXY>
			  SSD1306_Puts (distancia_inch_str, &Font_7x10, 1);
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2201      	movs	r2, #1
 8001024:	490f      	ldr	r1, [pc, #60]	; (8001064 <main+0xe4>)
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fbd8 	bl	80017dc <SSD1306_Puts>
			  SSD1306_UpdateScreen(); // update display
 800102c:	f000 fa9c 	bl	8001568 <SSD1306_UpdateScreen>
			  HAL_Delay(600);}
 8001030:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001034:	f000 fef8 	bl	8001e28 <HAL_Delay>
		  while(funcao == 0){ // Neste caso ele irá medir a distância em centímetros e polegadas e então printar no display OLED
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <main+0xdc>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0cb      	beq.n	8000fd8 <main+0x58>
		  break;
 8001040:	e006      	b.n	8001050 <main+0xd0>

	  case 2:
		  Alerta_Distancia(distancia_limite_cm);
 8001042:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001044:	f7ff fed0 	bl	8000de8 <Alerta_Distancia>
		  break;
 8001048:	e002      	b.n	8001050 <main+0xd0>

	  default:
		  funcao = 0;
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <main+0xdc>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
	  switch (funcao){
 8001050:	e7b4      	b.n	8000fbc <main+0x3c>
 8001052:	bf00      	nop
 8001054:	200002c0 	.word	0x200002c0
 8001058:	20000278 	.word	0x20000278
 800105c:	20000308 	.word	0x20000308
 8001060:	08008e80 	.word	0x08008e80
 8001064:	20000000 	.word	0x20000000
 8001068:	08008e90 	.word	0x08008e90

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b090      	sub	sp, #64	; 0x40
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	2228      	movs	r2, #40	; 0x28
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fabc 	bl	80045f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800108e:	2302      	movs	r3, #2
 8001090:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001092:	2301      	movs	r3, #1
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001096:	2310      	movs	r3, #16
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109a:	2302      	movs	r3, #2
 800109c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800109e:	2300      	movs	r3, #0
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80010a2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 ff19 	bl	8002ee4 <HAL_RCC_OscConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80010b8:	f000 f98c 	bl	80013d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010bc:	230f      	movs	r3, #15
 80010be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c0:	2302      	movs	r3, #2
 80010c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2102      	movs	r1, #2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 f986 	bl	80033e8 <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80010e2:	f000 f977 	bl	80013d4 <Error_Handler>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3740      	adds	r7, #64	; 0x40
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <MX_I2C1_Init+0x50>)
 80010f6:	4a13      	ldr	r2, [pc, #76]	; (8001144 <MX_I2C1_Init+0x54>)
 80010f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_I2C1_Init+0x50>)
 80010fc:	4a12      	ldr	r2, [pc, #72]	; (8001148 <MX_I2C1_Init+0x58>)
 80010fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_I2C1_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_I2C1_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <MX_I2C1_Init+0x50>)
 800110e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001112:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <MX_I2C1_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <MX_I2C1_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <MX_I2C1_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <MX_I2C1_Init+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <MX_I2C1_Init+0x50>)
 800112e:	f001 f961 	bl	80023f4 <HAL_I2C_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001138:	f000 f94c 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000224 	.word	0x20000224
 8001144:	40005400 	.word	0x40005400
 8001148:	00061a80 	.word	0x00061a80

0800114c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800116a:	463b      	mov	r3, r7
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001176:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <MX_TIM1_Init+0xe4>)
 8001178:	4a2e      	ldr	r2, [pc, #184]	; (8001234 <MX_TIM1_Init+0xe8>)
 800117a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 800117c:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <MX_TIM1_Init+0xe4>)
 800117e:	223f      	movs	r2, #63	; 0x3f
 8001180:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <MX_TIM1_Init+0xe4>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff - 1;
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <MX_TIM1_Init+0xe4>)
 800118a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800118e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <MX_TIM1_Init+0xe4>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <MX_TIM1_Init+0xe4>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <MX_TIM1_Init+0xe4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011a2:	4823      	ldr	r0, [pc, #140]	; (8001230 <MX_TIM1_Init+0xe4>)
 80011a4:	f002 faa4 	bl	80036f0 <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80011ae:	f000 f911 	bl	80013d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011b8:	f107 0318 	add.w	r3, r7, #24
 80011bc:	4619      	mov	r1, r3
 80011be:	481c      	ldr	r0, [pc, #112]	; (8001230 <MX_TIM1_Init+0xe4>)
 80011c0:	f002 fe2a 	bl	8003e18 <HAL_TIM_ConfigClockSource>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80011ca:	f000 f903 	bl	80013d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80011ce:	4818      	ldr	r0, [pc, #96]	; (8001230 <MX_TIM1_Init+0xe4>)
 80011d0:	f002 fb28 	bl	8003824 <HAL_TIM_IC_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80011da:	f000 f8fb 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	4619      	mov	r1, r3
 80011ec:	4810      	ldr	r0, [pc, #64]	; (8001230 <MX_TIM1_Init+0xe4>)
 80011ee:	f003 f969 	bl	80044c4 <HAL_TIMEx_MasterConfigSynchronization>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80011f8:	f000 f8ec 	bl	80013d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011fc:	2300      	movs	r3, #0
 80011fe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001200:	2301      	movs	r3, #1
 8001202:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	4619      	mov	r1, r3
 8001212:	4807      	ldr	r0, [pc, #28]	; (8001230 <MX_TIM1_Init+0xe4>)
 8001214:	f002 fd6c 	bl	8003cf0 <HAL_TIM_IC_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800121e:	f000 f8d9 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 8001222:	4803      	ldr	r0, [pc, #12]	; (8001230 <MX_TIM1_Init+0xe4>)
 8001224:	f002 fab4 	bl	8003790 <HAL_TIM_Base_Start>
  /* USER CODE END TIM1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	; 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000278 	.word	0x20000278
 8001234:	40012c00 	.word	0x40012c00

08001238 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	463b      	mov	r3, r7
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <MX_TIM3_Init+0x94>)
 8001256:	4a1e      	ldr	r2, [pc, #120]	; (80012d0 <MX_TIM3_Init+0x98>)
 8001258:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_TIM3_Init+0x94>)
 800125c:	223f      	movs	r2, #63	; 0x3f
 800125e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_TIM3_Init+0x94>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <MX_TIM3_Init+0x94>)
 8001268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800126c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <MX_TIM3_Init+0x94>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_TIM3_Init+0x94>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800127a:	4814      	ldr	r0, [pc, #80]	; (80012cc <MX_TIM3_Init+0x94>)
 800127c:	f002 fa38 	bl	80036f0 <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001286:	f000 f8a5 	bl	80013d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	; (80012cc <MX_TIM3_Init+0x94>)
 8001298:	f002 fdbe 	bl	8003e18 <HAL_TIM_ConfigClockSource>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80012a2:	f000 f897 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ae:	463b      	mov	r3, r7
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	; (80012cc <MX_TIM3_Init+0x94>)
 80012b4:	f003 f906 	bl	80044c4 <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80012be:	f000 f889 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200002c0 	.word	0x200002c0
 80012d0:	40000400 	.word	0x40000400

080012d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e8:	4b27      	ldr	r3, [pc, #156]	; (8001388 <MX_GPIO_Init+0xb4>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a26      	ldr	r2, [pc, #152]	; (8001388 <MX_GPIO_Init+0xb4>)
 80012ee:	f043 0310 	orr.w	r3, r3, #16
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <MX_GPIO_Init+0xb4>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0310 	and.w	r3, r3, #16
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b21      	ldr	r3, [pc, #132]	; (8001388 <MX_GPIO_Init+0xb4>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a20      	ldr	r2, [pc, #128]	; (8001388 <MX_GPIO_Init+0xb4>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_GPIO_Init+0xb4>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <MX_GPIO_Init+0xb4>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <MX_GPIO_Init+0xb4>)
 800131e:	f043 0308 	orr.w	r3, r3, #8
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_GPIO_Init+0xb4>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trigger_Pin|LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	2132      	movs	r1, #50	; 0x32
 8001334:	4815      	ldr	r0, [pc, #84]	; (800138c <MX_GPIO_Init+0xb8>)
 8001336:	f001 f82d 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800133a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <MX_GPIO_Init+0xbc>)
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4619      	mov	r1, r3
 800134e:	4811      	ldr	r0, [pc, #68]	; (8001394 <MX_GPIO_Init+0xc0>)
 8001350:	f000 fe9c 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pins : Trigger_Pin LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin|LED_1_Pin|LED_2_Pin;
 8001354:	2332      	movs	r3, #50	; 0x32
 8001356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2302      	movs	r3, #2
 8001362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	4619      	mov	r1, r3
 800136a:	4808      	ldr	r0, [pc, #32]	; (800138c <MX_GPIO_Init+0xb8>)
 800136c:	f000 fe8e 	bl	800208c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	2028      	movs	r0, #40	; 0x28
 8001376:	f000 fe52 	bl	800201e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800137a:	2028      	movs	r0, #40	; 0x28
 800137c:	f000 fe6b 	bl	8002056 <HAL_NVIC_EnableIRQ>

}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40021000 	.word	0x40021000
 800138c:	40010800 	.word	0x40010800
 8001390:	10210000 	.word	0x10210000
 8001394:	40011000 	.word	0x40011000

08001398 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013a8:	d10c      	bne.n	80013c4 <HAL_GPIO_EXTI_Callback+0x2c>
		if(funcao < 2)
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x38>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	dc05      	bgt.n	80013be <HAL_GPIO_EXTI_Callback+0x26>
		funcao++;
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x38>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x38>)
 80013ba:	6013      	str	r3, [r2, #0]
		else
		funcao = 0;}
}
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_EXTI_Callback+0x2c>
		funcao = 0;}
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x38>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000308 	.word	0x20000308

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013dc:	e7fe      	b.n	80013dc <Error_Handler+0x8>
	...

080013e0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80013e6:	f000 fa1f 	bl	8001828 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80013ea:	f644 6320 	movw	r3, #20000	; 0x4e20
 80013ee:	2201      	movs	r2, #1
 80013f0:	2178      	movs	r1, #120	; 0x78
 80013f2:	485b      	ldr	r0, [pc, #364]	; (8001560 <SSD1306_Init+0x180>)
 80013f4:	f001 fa40 	bl	8002878 <HAL_I2C_IsDeviceReady>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	e0a9      	b.n	8001556 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001402:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001406:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001408:	e002      	b.n	8001410 <SSD1306_Init+0x30>
		p--;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3b01      	subs	r3, #1
 800140e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f9      	bne.n	800140a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001416:	22ae      	movs	r2, #174	; 0xae
 8001418:	2100      	movs	r1, #0
 800141a:	2078      	movs	r0, #120	; 0x78
 800141c:	f000 fa7e 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001420:	2220      	movs	r2, #32
 8001422:	2100      	movs	r1, #0
 8001424:	2078      	movs	r0, #120	; 0x78
 8001426:	f000 fa79 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800142a:	2210      	movs	r2, #16
 800142c:	2100      	movs	r1, #0
 800142e:	2078      	movs	r0, #120	; 0x78
 8001430:	f000 fa74 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001434:	22b0      	movs	r2, #176	; 0xb0
 8001436:	2100      	movs	r1, #0
 8001438:	2078      	movs	r0, #120	; 0x78
 800143a:	f000 fa6f 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800143e:	22c8      	movs	r2, #200	; 0xc8
 8001440:	2100      	movs	r1, #0
 8001442:	2078      	movs	r0, #120	; 0x78
 8001444:	f000 fa6a 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	2078      	movs	r0, #120	; 0x78
 800144e:	f000 fa65 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001452:	2210      	movs	r2, #16
 8001454:	2100      	movs	r1, #0
 8001456:	2078      	movs	r0, #120	; 0x78
 8001458:	f000 fa60 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800145c:	2240      	movs	r2, #64	; 0x40
 800145e:	2100      	movs	r1, #0
 8001460:	2078      	movs	r0, #120	; 0x78
 8001462:	f000 fa5b 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001466:	2281      	movs	r2, #129	; 0x81
 8001468:	2100      	movs	r1, #0
 800146a:	2078      	movs	r0, #120	; 0x78
 800146c:	f000 fa56 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001470:	22ff      	movs	r2, #255	; 0xff
 8001472:	2100      	movs	r1, #0
 8001474:	2078      	movs	r0, #120	; 0x78
 8001476:	f000 fa51 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800147a:	22a1      	movs	r2, #161	; 0xa1
 800147c:	2100      	movs	r1, #0
 800147e:	2078      	movs	r0, #120	; 0x78
 8001480:	f000 fa4c 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001484:	22a6      	movs	r2, #166	; 0xa6
 8001486:	2100      	movs	r1, #0
 8001488:	2078      	movs	r0, #120	; 0x78
 800148a:	f000 fa47 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800148e:	22a8      	movs	r2, #168	; 0xa8
 8001490:	2100      	movs	r1, #0
 8001492:	2078      	movs	r0, #120	; 0x78
 8001494:	f000 fa42 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001498:	223f      	movs	r2, #63	; 0x3f
 800149a:	2100      	movs	r1, #0
 800149c:	2078      	movs	r0, #120	; 0x78
 800149e:	f000 fa3d 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014a2:	22a4      	movs	r2, #164	; 0xa4
 80014a4:	2100      	movs	r1, #0
 80014a6:	2078      	movs	r0, #120	; 0x78
 80014a8:	f000 fa38 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80014ac:	22d3      	movs	r2, #211	; 0xd3
 80014ae:	2100      	movs	r1, #0
 80014b0:	2078      	movs	r0, #120	; 0x78
 80014b2:	f000 fa33 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	2078      	movs	r0, #120	; 0x78
 80014bc:	f000 fa2e 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80014c0:	22d5      	movs	r2, #213	; 0xd5
 80014c2:	2100      	movs	r1, #0
 80014c4:	2078      	movs	r0, #120	; 0x78
 80014c6:	f000 fa29 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80014ca:	22f0      	movs	r2, #240	; 0xf0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2078      	movs	r0, #120	; 0x78
 80014d0:	f000 fa24 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80014d4:	22d9      	movs	r2, #217	; 0xd9
 80014d6:	2100      	movs	r1, #0
 80014d8:	2078      	movs	r0, #120	; 0x78
 80014da:	f000 fa1f 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80014de:	2222      	movs	r2, #34	; 0x22
 80014e0:	2100      	movs	r1, #0
 80014e2:	2078      	movs	r0, #120	; 0x78
 80014e4:	f000 fa1a 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80014e8:	22da      	movs	r2, #218	; 0xda
 80014ea:	2100      	movs	r1, #0
 80014ec:	2078      	movs	r0, #120	; 0x78
 80014ee:	f000 fa15 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80014f2:	2212      	movs	r2, #18
 80014f4:	2100      	movs	r1, #0
 80014f6:	2078      	movs	r0, #120	; 0x78
 80014f8:	f000 fa10 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80014fc:	22db      	movs	r2, #219	; 0xdb
 80014fe:	2100      	movs	r1, #0
 8001500:	2078      	movs	r0, #120	; 0x78
 8001502:	f000 fa0b 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001506:	2220      	movs	r2, #32
 8001508:	2100      	movs	r1, #0
 800150a:	2078      	movs	r0, #120	; 0x78
 800150c:	f000 fa06 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001510:	228d      	movs	r2, #141	; 0x8d
 8001512:	2100      	movs	r1, #0
 8001514:	2078      	movs	r0, #120	; 0x78
 8001516:	f000 fa01 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800151a:	2214      	movs	r2, #20
 800151c:	2100      	movs	r1, #0
 800151e:	2078      	movs	r0, #120	; 0x78
 8001520:	f000 f9fc 	bl	800191c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001524:	22af      	movs	r2, #175	; 0xaf
 8001526:	2100      	movs	r1, #0
 8001528:	2078      	movs	r0, #120	; 0x78
 800152a:	f000 f9f7 	bl	800191c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800152e:	222e      	movs	r2, #46	; 0x2e
 8001530:	2100      	movs	r1, #0
 8001532:	2078      	movs	r0, #120	; 0x78
 8001534:	f000 f9f2 	bl	800191c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001538:	2000      	movs	r0, #0
 800153a:	f000 f843 	bl	80015c4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800153e:	f000 f813 	bl	8001568 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <SSD1306_Init+0x184>)
 8001544:	2200      	movs	r2, #0
 8001546:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <SSD1306_Init+0x184>)
 800154a:	2200      	movs	r2, #0
 800154c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SSD1306_Init+0x184>)
 8001550:	2201      	movs	r2, #1
 8001552:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001554:	2301      	movs	r3, #1
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000224 	.word	0x20000224
 8001564:	2000070c 	.word	0x2000070c

08001568 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800156e:	2300      	movs	r3, #0
 8001570:	71fb      	strb	r3, [r7, #7]
 8001572:	e01d      	b.n	80015b0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	3b50      	subs	r3, #80	; 0x50
 8001578:	b2db      	uxtb	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	2100      	movs	r1, #0
 800157e:	2078      	movs	r0, #120	; 0x78
 8001580:	f000 f9cc 	bl	800191c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001584:	2200      	movs	r2, #0
 8001586:	2100      	movs	r1, #0
 8001588:	2078      	movs	r0, #120	; 0x78
 800158a:	f000 f9c7 	bl	800191c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800158e:	2210      	movs	r2, #16
 8001590:	2100      	movs	r1, #0
 8001592:	2078      	movs	r0, #120	; 0x78
 8001594:	f000 f9c2 	bl	800191c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	01db      	lsls	r3, r3, #7
 800159c:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <SSD1306_UpdateScreen+0x58>)
 800159e:	441a      	add	r2, r3
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	2140      	movs	r1, #64	; 0x40
 80015a4:	2078      	movs	r0, #120	; 0x78
 80015a6:	f000 f953 	bl	8001850 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	3301      	adds	r3, #1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	2b07      	cmp	r3, #7
 80015b4:	d9de      	bls.n	8001574 <SSD1306_UpdateScreen+0xc>
	}
}
 80015b6:	bf00      	nop
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	2000030c 	.word	0x2000030c

080015c4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <SSD1306_Fill+0x14>
 80015d4:	2300      	movs	r3, #0
 80015d6:	e000      	b.n	80015da <SSD1306_Fill+0x16>
 80015d8:	23ff      	movs	r3, #255	; 0xff
 80015da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015de:	4619      	mov	r1, r3
 80015e0:	4803      	ldr	r0, [pc, #12]	; (80015f0 <SSD1306_Fill+0x2c>)
 80015e2:	f003 f809 	bl	80045f8 <memset>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000030c 	.word	0x2000030c

080015f4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	80fb      	strh	r3, [r7, #6]
 80015fe:	460b      	mov	r3, r1
 8001600:	80bb      	strh	r3, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	70fb      	strb	r3, [r7, #3]
	if (
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	2b7f      	cmp	r3, #127	; 0x7f
 800160a:	d848      	bhi.n	800169e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800160c:	88bb      	ldrh	r3, [r7, #4]
 800160e:	2b3f      	cmp	r3, #63	; 0x3f
 8001610:	d845      	bhi.n	800169e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001612:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <SSD1306_DrawPixel+0xb4>)
 8001614:	791b      	ldrb	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d006      	beq.n	8001628 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	2b00      	cmp	r3, #0
 800161e:	bf0c      	ite	eq
 8001620:	2301      	moveq	r3, #1
 8001622:	2300      	movne	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d11a      	bne.n	8001664 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800162e:	88fa      	ldrh	r2, [r7, #6]
 8001630:	88bb      	ldrh	r3, [r7, #4]
 8001632:	08db      	lsrs	r3, r3, #3
 8001634:	b298      	uxth	r0, r3
 8001636:	4603      	mov	r3, r0
 8001638:	01db      	lsls	r3, r3, #7
 800163a:	4413      	add	r3, r2
 800163c:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <SSD1306_DrawPixel+0xb8>)
 800163e:	5cd3      	ldrb	r3, [r2, r3]
 8001640:	b25a      	sxtb	r2, r3
 8001642:	88bb      	ldrh	r3, [r7, #4]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	2101      	movs	r1, #1
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	b25b      	sxtb	r3, r3
 8001650:	4313      	orrs	r3, r2
 8001652:	b259      	sxtb	r1, r3
 8001654:	88fa      	ldrh	r2, [r7, #6]
 8001656:	4603      	mov	r3, r0
 8001658:	01db      	lsls	r3, r3, #7
 800165a:	4413      	add	r3, r2
 800165c:	b2c9      	uxtb	r1, r1
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <SSD1306_DrawPixel+0xb8>)
 8001660:	54d1      	strb	r1, [r2, r3]
 8001662:	e01d      	b.n	80016a0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001664:	88fa      	ldrh	r2, [r7, #6]
 8001666:	88bb      	ldrh	r3, [r7, #4]
 8001668:	08db      	lsrs	r3, r3, #3
 800166a:	b298      	uxth	r0, r3
 800166c:	4603      	mov	r3, r0
 800166e:	01db      	lsls	r3, r3, #7
 8001670:	4413      	add	r3, r2
 8001672:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <SSD1306_DrawPixel+0xb8>)
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	b25a      	sxtb	r2, r3
 8001678:	88bb      	ldrh	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	2101      	movs	r1, #1
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	b25b      	sxtb	r3, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	b25b      	sxtb	r3, r3
 800168a:	4013      	ands	r3, r2
 800168c:	b259      	sxtb	r1, r3
 800168e:	88fa      	ldrh	r2, [r7, #6]
 8001690:	4603      	mov	r3, r0
 8001692:	01db      	lsls	r3, r3, #7
 8001694:	4413      	add	r3, r2
 8001696:	b2c9      	uxtb	r1, r1
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <SSD1306_DrawPixel+0xb8>)
 800169a:	54d1      	strb	r1, [r2, r3]
 800169c:	e000      	b.n	80016a0 <SSD1306_DrawPixel+0xac>
		return;
 800169e:	bf00      	nop
	}
}
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	2000070c 	.word	0x2000070c
 80016ac:	2000030c 	.word	0x2000030c

080016b0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	460a      	mov	r2, r1
 80016ba:	80fb      	strh	r3, [r7, #6]
 80016bc:	4613      	mov	r3, r2
 80016be:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80016c0:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <SSD1306_GotoXY+0x28>)
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80016c6:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <SSD1306_GotoXY+0x28>)
 80016c8:	88bb      	ldrh	r3, [r7, #4]
 80016ca:	8053      	strh	r3, [r2, #2]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	2000070c 	.word	0x2000070c

080016dc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
 80016e8:	4613      	mov	r3, r2
 80016ea:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80016ec:	4b3a      	ldr	r3, [pc, #232]	; (80017d8 <SSD1306_Putc+0xfc>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
	if (
 80016f8:	2b7f      	cmp	r3, #127	; 0x7f
 80016fa:	dc07      	bgt.n	800170c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80016fc:	4b36      	ldr	r3, [pc, #216]	; (80017d8 <SSD1306_Putc+0xfc>)
 80016fe:	885b      	ldrh	r3, [r3, #2]
 8001700:	461a      	mov	r2, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	785b      	ldrb	r3, [r3, #1]
 8001706:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001708:	2b3f      	cmp	r3, #63	; 0x3f
 800170a:	dd01      	ble.n	8001710 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800170c:	2300      	movs	r3, #0
 800170e:	e05e      	b.n	80017ce <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e04b      	b.n	80017ae <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	3b20      	subs	r3, #32
 800171e:	6839      	ldr	r1, [r7, #0]
 8001720:	7849      	ldrb	r1, [r1, #1]
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4619      	mov	r1, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	440b      	add	r3, r1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	e030      	b.n	800179c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d010      	beq.n	800176c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <SSD1306_Putc+0xfc>)
 800174c:	881a      	ldrh	r2, [r3, #0]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	b29b      	uxth	r3, r3
 8001752:	4413      	add	r3, r2
 8001754:	b298      	uxth	r0, r3
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <SSD1306_Putc+0xfc>)
 8001758:	885a      	ldrh	r2, [r3, #2]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	b29b      	uxth	r3, r3
 800175e:	4413      	add	r3, r2
 8001760:	b29b      	uxth	r3, r3
 8001762:	79ba      	ldrb	r2, [r7, #6]
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff ff45 	bl	80015f4 <SSD1306_DrawPixel>
 800176a:	e014      	b.n	8001796 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <SSD1306_Putc+0xfc>)
 800176e:	881a      	ldrh	r2, [r3, #0]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	b29b      	uxth	r3, r3
 8001774:	4413      	add	r3, r2
 8001776:	b298      	uxth	r0, r3
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <SSD1306_Putc+0xfc>)
 800177a:	885a      	ldrh	r2, [r3, #2]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	b29b      	uxth	r3, r3
 8001780:	4413      	add	r3, r2
 8001782:	b299      	uxth	r1, r3
 8001784:	79bb      	ldrb	r3, [r7, #6]
 8001786:	2b00      	cmp	r3, #0
 8001788:	bf0c      	ite	eq
 800178a:	2301      	moveq	r3, #1
 800178c:	2300      	movne	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	461a      	mov	r2, r3
 8001792:	f7ff ff2f 	bl	80015f4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	3301      	adds	r3, #1
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d3c8      	bcc.n	800173a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	785b      	ldrb	r3, [r3, #1]
 80017b2:	461a      	mov	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d3ad      	bcc.n	8001716 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <SSD1306_Putc+0xfc>)
 80017bc:	881a      	ldrh	r2, [r3, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <SSD1306_Putc+0xfc>)
 80017ca:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80017cc:	79fb      	ldrb	r3, [r7, #7]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000070c 	.word	0x2000070c

080017dc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	4613      	mov	r3, r2
 80017e8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80017ea:	e012      	b.n	8001812 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	79fa      	ldrb	r2, [r7, #7]
 80017f2:	68b9      	ldr	r1, [r7, #8]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff71 	bl	80016dc <SSD1306_Putc>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d002      	beq.n	800180c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	e008      	b.n	800181e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3301      	adds	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1e8      	bne.n	80017ec <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	781b      	ldrb	r3, [r3, #0]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <ssd1306_I2C_Init+0x24>)
 8001830:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001832:	e002      	b.n	800183a <ssd1306_I2C_Init+0x12>
		p--;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	607b      	str	r3, [r7, #4]
	while(p>0)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f9      	bne.n	8001834 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	0003d090 	.word	0x0003d090

08001850 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b0c7      	sub	sp, #284	; 0x11c
 8001854:	af02      	add	r7, sp, #8
 8001856:	4604      	mov	r4, r0
 8001858:	4608      	mov	r0, r1
 800185a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800185e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001862:	600a      	str	r2, [r1, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800186a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800186e:	4622      	mov	r2, r4
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001876:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800187a:	4602      	mov	r2, r0
 800187c:	701a      	strb	r2, [r3, #0]
 800187e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001882:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001886:	460a      	mov	r2, r1
 8001888:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800188a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800188e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001892:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001896:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800189a:	7812      	ldrb	r2, [r2, #0]
 800189c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800189e:	2300      	movs	r3, #0
 80018a0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80018a4:	e015      	b.n	80018d2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80018a6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018aa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018ae:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	441a      	add	r2, r3
 80018b6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018ba:	3301      	adds	r3, #1
 80018bc:	7811      	ldrb	r1, [r2, #0]
 80018be:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018c2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80018c6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80018c8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018cc:	3301      	adds	r3, #1
 80018ce:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80018d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018dc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80018e0:	8812      	ldrh	r2, [r2, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d8df      	bhi.n	80018a6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80018e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018ea:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b299      	uxth	r1, r3
 80018f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	3301      	adds	r3, #1
 80018fe:	b29b      	uxth	r3, r3
 8001900:	f107 020c 	add.w	r2, r7, #12
 8001904:	200a      	movs	r0, #10
 8001906:	9000      	str	r0, [sp, #0]
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <ssd1306_I2C_WriteMulti+0xc8>)
 800190a:	f000 feb7 	bl	800267c <HAL_I2C_Master_Transmit>
}
 800190e:	bf00      	nop
 8001910:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001914:	46bd      	mov	sp, r7
 8001916:	bd90      	pop	{r4, r7, pc}
 8001918:	20000224 	.word	0x20000224

0800191c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af02      	add	r7, sp, #8
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
 8001926:	460b      	mov	r3, r1
 8001928:	71bb      	strb	r3, [r7, #6]
 800192a:	4613      	mov	r3, r2
 800192c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800192e:	79bb      	ldrb	r3, [r7, #6]
 8001930:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001932:	797b      	ldrb	r3, [r7, #5]
 8001934:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	b299      	uxth	r1, r3
 800193a:	f107 020c 	add.w	r2, r7, #12
 800193e:	230a      	movs	r3, #10
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2302      	movs	r3, #2
 8001944:	4803      	ldr	r0, [pc, #12]	; (8001954 <ssd1306_I2C_Write+0x38>)
 8001946:	f000 fe99 	bl	800267c <HAL_I2C_Master_Transmit>
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000224 	.word	0x20000224

08001958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_MspInit+0x40>)
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <HAL_MspInit+0x40>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6193      	str	r3, [r2, #24]
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_MspInit+0x40>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_MspInit+0x40>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_MspInit+0x40>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001980:	61d3      	str	r3, [r2, #28]
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_MspInit+0x40>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	40021000 	.word	0x40021000

0800199c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_I2C_MspInit+0x90>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d132      	bne.n	8001a22 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019bc:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <HAL_I2C_MspInit+0x94>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4a1b      	ldr	r2, [pc, #108]	; (8001a30 <HAL_I2C_MspInit+0x94>)
 80019c2:	f043 0308 	orr.w	r3, r3, #8
 80019c6:	6193      	str	r3, [r2, #24]
 80019c8:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_I2C_MspInit+0x94>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019da:	2312      	movs	r3, #18
 80019dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4812      	ldr	r0, [pc, #72]	; (8001a34 <HAL_I2C_MspInit+0x98>)
 80019ea:	f000 fb4f 	bl	800208c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_I2C_MspInit+0x9c>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	f043 0302 	orr.w	r3, r3, #2
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
 8001a04:	4a0c      	ldr	r2, [pc, #48]	; (8001a38 <HAL_I2C_MspInit+0x9c>)
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_I2C_MspInit+0x94>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <HAL_I2C_MspInit+0x94>)
 8001a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a14:	61d3      	str	r3, [r2, #28]
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_I2C_MspInit+0x94>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a22:	bf00      	nop
 8001a24:	3728      	adds	r7, #40	; 0x28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40005400 	.word	0x40005400
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40010c00 	.word	0x40010c00
 8001a38:	40010000 	.word	0x40010000

08001a3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0318 	add.w	r3, r7, #24
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a27      	ldr	r2, [pc, #156]	; (8001af4 <HAL_TIM_Base_MspInit+0xb8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d12d      	bne.n	8001ab8 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a5c:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a25      	ldr	r2, [pc, #148]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a74:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a1f      	ldr	r2, [pc, #124]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a7a:	f043 0304 	orr.w	r3, r3, #4
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	f107 0318 	add.w	r3, r7, #24
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4816      	ldr	r0, [pc, #88]	; (8001afc <HAL_TIM_Base_MspInit+0xc0>)
 8001aa2:	f000 faf3 	bl	800208c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	201b      	movs	r0, #27
 8001aac:	f000 fab7 	bl	800201e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ab0:	201b      	movs	r0, #27
 8001ab2:	f000 fad0 	bl	8002056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ab6:	e018      	b.n	8001aea <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a10      	ldr	r2, [pc, #64]	; (8001b00 <HAL_TIM_Base_MspInit+0xc4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d113      	bne.n	8001aea <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	61d3      	str	r3, [r2, #28]
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_TIM_Base_MspInit+0xbc>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	201d      	movs	r0, #29
 8001ae0:	f000 fa9d 	bl	800201e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ae4:	201d      	movs	r0, #29
 8001ae6:	f000 fab6 	bl	8002056 <HAL_NVIC_EnableIRQ>
}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	; 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40012c00 	.word	0x40012c00
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010800 	.word	0x40010800
 8001b00:	40000400 	.word	0x40000400

08001b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <NMI_Handler+0x4>

08001b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0e:	e7fe      	b.n	8001b0e <HardFault_Handler+0x4>

08001b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <MemManage_Handler+0x4>

08001b16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1a:	e7fe      	b.n	8001b1a <BusFault_Handler+0x4>

08001b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <UsageFault_Handler+0x4>

08001b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4a:	f000 f951 	bl	8001df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <TIM1_CC_IRQHandler+0x10>)
 8001b5a:	f001 ffc1 	bl	8003ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000278 	.word	0x20000278

08001b68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <TIM3_IRQHandler+0x10>)
 8001b6e:	f001 ffb7 	bl	8003ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200002c0 	.word	0x200002c0

08001b7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8001b80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b84:	f000 fc1e 	bl	80023c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_getpid>:
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	2301      	movs	r3, #1
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <_kill>:
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
 8001ba4:	f002 fcfe 	bl	80045a4 <__errno>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2216      	movs	r2, #22
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <_exit>:
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffe7 	bl	8001b9a <_kill>
 8001bcc:	e7fe      	b.n	8001bcc <_exit+0x12>

08001bce <_read>:
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	e00a      	b.n	8001bf6 <_read+0x28>
 8001be0:	f3af 8000 	nop.w
 8001be4:	4601      	mov	r1, r0
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	60ba      	str	r2, [r7, #8]
 8001bec:	b2ca      	uxtb	r2, r1
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	dbf0      	blt.n	8001be0 <_read+0x12>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_write>:
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	e009      	b.n	8001c2e <_write+0x26>
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	60ba      	str	r2, [r7, #8]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f3af 8000 	nop.w
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	dbf1      	blt.n	8001c1a <_write+0x12>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_close>:
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <_fstat>:
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <_isatty>:
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <_lseek>:
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	2300      	movs	r3, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <_sbrk>:
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <_sbrk+0x5c>)
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <_sbrk+0x60>)
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <_sbrk+0x22>
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <_sbrk+0x64>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <_sbrk+0x68>)
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <_sbrk+0x64>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d207      	bcs.n	8001ce0 <_sbrk+0x40>
 8001cd0:	f002 fc68 	bl	80045a4 <__errno>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cde:	e009      	b.n	8001cf4 <_sbrk+0x54>
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <_sbrk+0x64>)
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20005000 	.word	0x20005000
 8001d00:	00000400 	.word	0x00000400
 8001d04:	20000714 	.word	0x20000714
 8001d08:	20000730 	.word	0x20000730

08001d0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <Reset_Handler>:
 8001d18:	480c      	ldr	r0, [pc, #48]	; (8001d4c <LoopFillZerobss+0x12>)
 8001d1a:	490d      	ldr	r1, [pc, #52]	; (8001d50 <LoopFillZerobss+0x16>)
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <LoopFillZerobss+0x1a>)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e002      	b.n	8001d28 <LoopCopyDataInit>

08001d22 <CopyDataInit>:
 8001d22:	58d4      	ldr	r4, [r2, r3]
 8001d24:	50c4      	str	r4, [r0, r3]
 8001d26:	3304      	adds	r3, #4

08001d28 <LoopCopyDataInit>:
 8001d28:	18c4      	adds	r4, r0, r3
 8001d2a:	428c      	cmp	r4, r1
 8001d2c:	d3f9      	bcc.n	8001d22 <CopyDataInit>
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <LoopFillZerobss+0x1e>)
 8001d30:	4c0a      	ldr	r4, [pc, #40]	; (8001d5c <LoopFillZerobss+0x22>)
 8001d32:	2300      	movs	r3, #0
 8001d34:	e001      	b.n	8001d3a <LoopFillZerobss>

08001d36 <FillZerobss>:
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	3204      	adds	r2, #4

08001d3a <LoopFillZerobss>:
 8001d3a:	42a2      	cmp	r2, r4
 8001d3c:	d3fb      	bcc.n	8001d36 <FillZerobss>
 8001d3e:	f7ff ffe5 	bl	8001d0c <SystemInit>
 8001d42:	f002 fc35 	bl	80045b0 <__libc_init_array>
 8001d46:	f7ff f91b 	bl	8000f80 <main>
 8001d4a:	4770      	bx	lr
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	200001e8 	.word	0x200001e8
 8001d54:	08009ae4 	.word	0x08009ae4
 8001d58:	200001e8 	.word	0x200001e8
 8001d5c:	2000072c 	.word	0x2000072c

08001d60 <ADC1_2_IRQHandler>:
 8001d60:	e7fe      	b.n	8001d60 <ADC1_2_IRQHandler>
	...

08001d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <HAL_Init+0x28>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a07      	ldr	r2, [pc, #28]	; (8001d8c <HAL_Init+0x28>)
 8001d6e:	f043 0310 	orr.w	r3, r3, #16
 8001d72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d74:	2003      	movs	r0, #3
 8001d76:	f000 f947 	bl	8002008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7a:	200f      	movs	r0, #15
 8001d7c:	f000 f808 	bl	8001d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d80:	f7ff fdea 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40022000 	.word	0x40022000

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_InitTick+0x54>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_InitTick+0x58>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f95f 	bl	8002072 <HAL_SYSTICK_Config>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00e      	b.n	8001ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d80a      	bhi.n	8001dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dcc:	f000 f927 	bl	800201e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd0:	4a06      	ldr	r2, [pc, #24]	; (8001dec <HAL_InitTick+0x5c>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e000      	b.n	8001ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000008 	.word	0x20000008
 8001de8:	20000010 	.word	0x20000010
 8001dec:	2000000c 	.word	0x2000000c

08001df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_IncTick+0x1c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_IncTick+0x20>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <HAL_IncTick+0x20>)
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	20000010 	.word	0x20000010
 8001e10:	20000718 	.word	0x20000718

08001e14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return uwTick;
 8001e18:	4b02      	ldr	r3, [pc, #8]	; (8001e24 <HAL_GetTick+0x10>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	20000718 	.word	0x20000718

08001e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e30:	f7ff fff0 	bl	8001e14 <HAL_GetTick>
 8001e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e40:	d005      	beq.n	8001e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_Delay+0x44>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e4e:	bf00      	nop
 8001e50:	f7ff ffe0 	bl	8001e14 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d8f7      	bhi.n	8001e50 <HAL_Delay+0x28>
  {
  }
}
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000010 	.word	0x20000010

08001e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea2:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	60d3      	str	r3, [r2, #12]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	f003 0307 	and.w	r3, r3, #7
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	db0b      	blt.n	8001efe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	f003 021f 	and.w	r2, r3, #31
 8001eec:	4906      	ldr	r1, [pc, #24]	; (8001f08 <__NVIC_EnableIRQ+0x34>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8001efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	; (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd4:	d301      	bcc.n	8001fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00f      	b.n	8001ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <SysTick_Config+0x40>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe2:	210f      	movs	r1, #15
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fe8:	f7ff ff90 	bl	8001f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <SysTick_Config+0x40>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff2:	4b04      	ldr	r3, [pc, #16]	; (8002004 <SysTick_Config+0x40>)
 8001ff4:	2207      	movs	r2, #7
 8001ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	e000e010 	.word	0xe000e010

08002008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ff2d 	bl	8001e70 <__NVIC_SetPriorityGrouping>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	4603      	mov	r3, r0
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002030:	f7ff ff42 	bl	8001eb8 <__NVIC_GetPriorityGrouping>
 8002034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	6978      	ldr	r0, [r7, #20]
 800203c:	f7ff ff90 	bl	8001f60 <NVIC_EncodePriority>
 8002040:	4602      	mov	r2, r0
 8002042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff5f 	bl	8001f0c <__NVIC_SetPriority>
}
 800204e:	bf00      	nop
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff35 	bl	8001ed4 <__NVIC_EnableIRQ>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff ffa2 	bl	8001fc4 <SysTick_Config>
 8002080:	4603      	mov	r3, r0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800208c:	b480      	push	{r7}
 800208e:	b08b      	sub	sp, #44	; 0x2c
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800209a:	2300      	movs	r3, #0
 800209c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209e:	e169      	b.n	8002374 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020a0:	2201      	movs	r2, #1
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	f040 8158 	bne.w	800236e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4a9a      	ldr	r2, [pc, #616]	; (800232c <HAL_GPIO_Init+0x2a0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d05e      	beq.n	8002186 <HAL_GPIO_Init+0xfa>
 80020c8:	4a98      	ldr	r2, [pc, #608]	; (800232c <HAL_GPIO_Init+0x2a0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d875      	bhi.n	80021ba <HAL_GPIO_Init+0x12e>
 80020ce:	4a98      	ldr	r2, [pc, #608]	; (8002330 <HAL_GPIO_Init+0x2a4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d058      	beq.n	8002186 <HAL_GPIO_Init+0xfa>
 80020d4:	4a96      	ldr	r2, [pc, #600]	; (8002330 <HAL_GPIO_Init+0x2a4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d86f      	bhi.n	80021ba <HAL_GPIO_Init+0x12e>
 80020da:	4a96      	ldr	r2, [pc, #600]	; (8002334 <HAL_GPIO_Init+0x2a8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d052      	beq.n	8002186 <HAL_GPIO_Init+0xfa>
 80020e0:	4a94      	ldr	r2, [pc, #592]	; (8002334 <HAL_GPIO_Init+0x2a8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d869      	bhi.n	80021ba <HAL_GPIO_Init+0x12e>
 80020e6:	4a94      	ldr	r2, [pc, #592]	; (8002338 <HAL_GPIO_Init+0x2ac>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d04c      	beq.n	8002186 <HAL_GPIO_Init+0xfa>
 80020ec:	4a92      	ldr	r2, [pc, #584]	; (8002338 <HAL_GPIO_Init+0x2ac>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d863      	bhi.n	80021ba <HAL_GPIO_Init+0x12e>
 80020f2:	4a92      	ldr	r2, [pc, #584]	; (800233c <HAL_GPIO_Init+0x2b0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d046      	beq.n	8002186 <HAL_GPIO_Init+0xfa>
 80020f8:	4a90      	ldr	r2, [pc, #576]	; (800233c <HAL_GPIO_Init+0x2b0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d85d      	bhi.n	80021ba <HAL_GPIO_Init+0x12e>
 80020fe:	2b12      	cmp	r3, #18
 8002100:	d82a      	bhi.n	8002158 <HAL_GPIO_Init+0xcc>
 8002102:	2b12      	cmp	r3, #18
 8002104:	d859      	bhi.n	80021ba <HAL_GPIO_Init+0x12e>
 8002106:	a201      	add	r2, pc, #4	; (adr r2, 800210c <HAL_GPIO_Init+0x80>)
 8002108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210c:	08002187 	.word	0x08002187
 8002110:	08002161 	.word	0x08002161
 8002114:	08002173 	.word	0x08002173
 8002118:	080021b5 	.word	0x080021b5
 800211c:	080021bb 	.word	0x080021bb
 8002120:	080021bb 	.word	0x080021bb
 8002124:	080021bb 	.word	0x080021bb
 8002128:	080021bb 	.word	0x080021bb
 800212c:	080021bb 	.word	0x080021bb
 8002130:	080021bb 	.word	0x080021bb
 8002134:	080021bb 	.word	0x080021bb
 8002138:	080021bb 	.word	0x080021bb
 800213c:	080021bb 	.word	0x080021bb
 8002140:	080021bb 	.word	0x080021bb
 8002144:	080021bb 	.word	0x080021bb
 8002148:	080021bb 	.word	0x080021bb
 800214c:	080021bb 	.word	0x080021bb
 8002150:	08002169 	.word	0x08002169
 8002154:	0800217d 	.word	0x0800217d
 8002158:	4a79      	ldr	r2, [pc, #484]	; (8002340 <HAL_GPIO_Init+0x2b4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d013      	beq.n	8002186 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800215e:	e02c      	b.n	80021ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	623b      	str	r3, [r7, #32]
          break;
 8002166:	e029      	b.n	80021bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	3304      	adds	r3, #4
 800216e:	623b      	str	r3, [r7, #32]
          break;
 8002170:	e024      	b.n	80021bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	3308      	adds	r3, #8
 8002178:	623b      	str	r3, [r7, #32]
          break;
 800217a:	e01f      	b.n	80021bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	330c      	adds	r3, #12
 8002182:	623b      	str	r3, [r7, #32]
          break;
 8002184:	e01a      	b.n	80021bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d102      	bne.n	8002194 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800218e:	2304      	movs	r3, #4
 8002190:	623b      	str	r3, [r7, #32]
          break;
 8002192:	e013      	b.n	80021bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d105      	bne.n	80021a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800219c:	2308      	movs	r3, #8
 800219e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	611a      	str	r2, [r3, #16]
          break;
 80021a6:	e009      	b.n	80021bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a8:	2308      	movs	r3, #8
 80021aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	615a      	str	r2, [r3, #20]
          break;
 80021b2:	e003      	b.n	80021bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021b4:	2300      	movs	r3, #0
 80021b6:	623b      	str	r3, [r7, #32]
          break;
 80021b8:	e000      	b.n	80021bc <HAL_GPIO_Init+0x130>
          break;
 80021ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2bff      	cmp	r3, #255	; 0xff
 80021c0:	d801      	bhi.n	80021c6 <HAL_GPIO_Init+0x13a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	e001      	b.n	80021ca <HAL_GPIO_Init+0x13e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3304      	adds	r3, #4
 80021ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2bff      	cmp	r3, #255	; 0xff
 80021d0:	d802      	bhi.n	80021d8 <HAL_GPIO_Init+0x14c>
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	e002      	b.n	80021de <HAL_GPIO_Init+0x152>
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	3b08      	subs	r3, #8
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	210f      	movs	r1, #15
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	401a      	ands	r2, r3
 80021f0:	6a39      	ldr	r1, [r7, #32]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	431a      	orrs	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 80b1 	beq.w	800236e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800220c:	4b4d      	ldr	r3, [pc, #308]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a4c      	ldr	r2, [pc, #304]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b4a      	ldr	r3, [pc, #296]	; (8002344 <HAL_GPIO_Init+0x2b8>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002224:	4a48      	ldr	r2, [pc, #288]	; (8002348 <HAL_GPIO_Init+0x2bc>)
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	089b      	lsrs	r3, r3, #2
 800222a:	3302      	adds	r3, #2
 800222c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002230:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	220f      	movs	r2, #15
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4013      	ands	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a40      	ldr	r2, [pc, #256]	; (800234c <HAL_GPIO_Init+0x2c0>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d013      	beq.n	8002278 <HAL_GPIO_Init+0x1ec>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a3f      	ldr	r2, [pc, #252]	; (8002350 <HAL_GPIO_Init+0x2c4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00d      	beq.n	8002274 <HAL_GPIO_Init+0x1e8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a3e      	ldr	r2, [pc, #248]	; (8002354 <HAL_GPIO_Init+0x2c8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d007      	beq.n	8002270 <HAL_GPIO_Init+0x1e4>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a3d      	ldr	r2, [pc, #244]	; (8002358 <HAL_GPIO_Init+0x2cc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d101      	bne.n	800226c <HAL_GPIO_Init+0x1e0>
 8002268:	2303      	movs	r3, #3
 800226a:	e006      	b.n	800227a <HAL_GPIO_Init+0x1ee>
 800226c:	2304      	movs	r3, #4
 800226e:	e004      	b.n	800227a <HAL_GPIO_Init+0x1ee>
 8002270:	2302      	movs	r3, #2
 8002272:	e002      	b.n	800227a <HAL_GPIO_Init+0x1ee>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_GPIO_Init+0x1ee>
 8002278:	2300      	movs	r3, #0
 800227a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227c:	f002 0203 	and.w	r2, r2, #3
 8002280:	0092      	lsls	r2, r2, #2
 8002282:	4093      	lsls	r3, r2
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800228a:	492f      	ldr	r1, [pc, #188]	; (8002348 <HAL_GPIO_Init+0x2bc>)
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	3302      	adds	r3, #2
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d006      	beq.n	80022b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022a4:	4b2d      	ldr	r3, [pc, #180]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	492c      	ldr	r1, [pc, #176]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]
 80022b0:	e006      	b.n	80022c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022b2:	4b2a      	ldr	r3, [pc, #168]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	4928      	ldr	r1, [pc, #160]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022bc:	4013      	ands	r3, r2
 80022be:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d006      	beq.n	80022da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022cc:	4b23      	ldr	r3, [pc, #140]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	4922      	ldr	r1, [pc, #136]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
 80022d8:	e006      	b.n	80022e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	491e      	ldr	r1, [pc, #120]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d006      	beq.n	8002302 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022f4:	4b19      	ldr	r3, [pc, #100]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	4918      	ldr	r1, [pc, #96]	; (800235c <HAL_GPIO_Init+0x2d0>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]
 8002300:	e006      	b.n	8002310 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <HAL_GPIO_Init+0x2d0>)
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	43db      	mvns	r3, r3
 800230a:	4914      	ldr	r1, [pc, #80]	; (800235c <HAL_GPIO_Init+0x2d0>)
 800230c:	4013      	ands	r3, r2
 800230e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d021      	beq.n	8002360 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_GPIO_Init+0x2d0>)
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	490e      	ldr	r1, [pc, #56]	; (800235c <HAL_GPIO_Init+0x2d0>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	60cb      	str	r3, [r1, #12]
 8002328:	e021      	b.n	800236e <HAL_GPIO_Init+0x2e2>
 800232a:	bf00      	nop
 800232c:	10320000 	.word	0x10320000
 8002330:	10310000 	.word	0x10310000
 8002334:	10220000 	.word	0x10220000
 8002338:	10210000 	.word	0x10210000
 800233c:	10120000 	.word	0x10120000
 8002340:	10110000 	.word	0x10110000
 8002344:	40021000 	.word	0x40021000
 8002348:	40010000 	.word	0x40010000
 800234c:	40010800 	.word	0x40010800
 8002350:	40010c00 	.word	0x40010c00
 8002354:	40011000 	.word	0x40011000
 8002358:	40011400 	.word	0x40011400
 800235c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_GPIO_Init+0x304>)
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	43db      	mvns	r3, r3
 8002368:	4909      	ldr	r1, [pc, #36]	; (8002390 <HAL_GPIO_Init+0x304>)
 800236a:	4013      	ands	r3, r2
 800236c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	3301      	adds	r3, #1
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	fa22 f303 	lsr.w	r3, r2, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	f47f ae8e 	bne.w	80020a0 <HAL_GPIO_Init+0x14>
  }
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	372c      	adds	r7, #44	; 0x2c
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	40010400 	.word	0x40010400

08002394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
 80023a0:	4613      	mov	r3, r2
 80023a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023a4:	787b      	ldrb	r3, [r7, #1]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023b0:	e003      	b.n	80023ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023b2:	887b      	ldrh	r3, [r7, #2]
 80023b4:	041a      	lsls	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	611a      	str	r2, [r3, #16]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d006      	beq.n	80023e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe ffd8 	bl	8001398 <HAL_GPIO_EXTI_Callback>
  }
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40010400 	.word	0x40010400

080023f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e12b      	b.n	800265e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff fabe 	bl	800199c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2224      	movs	r2, #36	; 0x24
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002446:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002456:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002458:	f001 f918 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 800245c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4a81      	ldr	r2, [pc, #516]	; (8002668 <HAL_I2C_Init+0x274>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d807      	bhi.n	8002478 <HAL_I2C_Init+0x84>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4a80      	ldr	r2, [pc, #512]	; (800266c <HAL_I2C_Init+0x278>)
 800246c:	4293      	cmp	r3, r2
 800246e:	bf94      	ite	ls
 8002470:	2301      	movls	r3, #1
 8002472:	2300      	movhi	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	e006      	b.n	8002486 <HAL_I2C_Init+0x92>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4a7d      	ldr	r2, [pc, #500]	; (8002670 <HAL_I2C_Init+0x27c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	bf94      	ite	ls
 8002480:	2301      	movls	r3, #1
 8002482:	2300      	movhi	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e0e7      	b.n	800265e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4a78      	ldr	r2, [pc, #480]	; (8002674 <HAL_I2C_Init+0x280>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0c9b      	lsrs	r3, r3, #18
 8002498:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4a6a      	ldr	r2, [pc, #424]	; (8002668 <HAL_I2C_Init+0x274>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d802      	bhi.n	80024c8 <HAL_I2C_Init+0xd4>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	3301      	adds	r3, #1
 80024c6:	e009      	b.n	80024dc <HAL_I2C_Init+0xe8>
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	4a69      	ldr	r2, [pc, #420]	; (8002678 <HAL_I2C_Init+0x284>)
 80024d4:	fba2 2303 	umull	r2, r3, r2, r3
 80024d8:	099b      	lsrs	r3, r3, #6
 80024da:	3301      	adds	r3, #1
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	495c      	ldr	r1, [pc, #368]	; (8002668 <HAL_I2C_Init+0x274>)
 80024f8:	428b      	cmp	r3, r1
 80024fa:	d819      	bhi.n	8002530 <HAL_I2C_Init+0x13c>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1e59      	subs	r1, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fbb1 f3f3 	udiv	r3, r1, r3
 800250a:	1c59      	adds	r1, r3, #1
 800250c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002510:	400b      	ands	r3, r1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_I2C_Init+0x138>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1e59      	subs	r1, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fbb1 f3f3 	udiv	r3, r1, r3
 8002524:	3301      	adds	r3, #1
 8002526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252a:	e051      	b.n	80025d0 <HAL_I2C_Init+0x1dc>
 800252c:	2304      	movs	r3, #4
 800252e:	e04f      	b.n	80025d0 <HAL_I2C_Init+0x1dc>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d111      	bne.n	800255c <HAL_I2C_Init+0x168>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1e58      	subs	r0, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	440b      	add	r3, r1
 8002546:	fbb0 f3f3 	udiv	r3, r0, r3
 800254a:	3301      	adds	r3, #1
 800254c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e012      	b.n	8002582 <HAL_I2C_Init+0x18e>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1e58      	subs	r0, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6859      	ldr	r1, [r3, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	0099      	lsls	r1, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002572:	3301      	adds	r3, #1
 8002574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Init+0x196>
 8002586:	2301      	movs	r3, #1
 8002588:	e022      	b.n	80025d0 <HAL_I2C_Init+0x1dc>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10e      	bne.n	80025b0 <HAL_I2C_Init+0x1bc>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1e58      	subs	r0, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	440b      	add	r3, r1
 80025a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ae:	e00f      	b.n	80025d0 <HAL_I2C_Init+0x1dc>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1e58      	subs	r0, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	0099      	lsls	r1, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	6809      	ldr	r1, [r1, #0]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69da      	ldr	r2, [r3, #28]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6911      	ldr	r1, [r2, #16]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68d2      	ldr	r2, [r2, #12]
 800260a:	4311      	orrs	r1, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	430b      	orrs	r3, r1
 8002612:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	000186a0 	.word	0x000186a0
 800266c:	001e847f 	.word	0x001e847f
 8002670:	003d08ff 	.word	0x003d08ff
 8002674:	431bde83 	.word	0x431bde83
 8002678:	10624dd3 	.word	0x10624dd3

0800267c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af02      	add	r7, sp, #8
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	461a      	mov	r2, r3
 8002688:	460b      	mov	r3, r1
 800268a:	817b      	strh	r3, [r7, #10]
 800268c:	4613      	mov	r3, r2
 800268e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002690:	f7ff fbc0 	bl	8001e14 <HAL_GetTick>
 8002694:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b20      	cmp	r3, #32
 80026a0:	f040 80e0 	bne.w	8002864 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2319      	movs	r3, #25
 80026aa:	2201      	movs	r2, #1
 80026ac:	4970      	ldr	r1, [pc, #448]	; (8002870 <HAL_I2C_Master_Transmit+0x1f4>)
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fa92 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026ba:	2302      	movs	r3, #2
 80026bc:	e0d3      	b.n	8002866 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_I2C_Master_Transmit+0x50>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e0cc      	b.n	8002866 <HAL_I2C_Master_Transmit+0x1ea>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d007      	beq.n	80026f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0201 	orr.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002700:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2221      	movs	r2, #33	; 0x21
 8002706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2210      	movs	r2, #16
 800270e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	893a      	ldrh	r2, [r7, #8]
 8002722:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4a50      	ldr	r2, [pc, #320]	; (8002874 <HAL_I2C_Master_Transmit+0x1f8>)
 8002732:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002734:	8979      	ldrh	r1, [r7, #10]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	6a3a      	ldr	r2, [r7, #32]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f9ca 	bl	8002ad4 <I2C_MasterRequestWrite>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e08d      	b.n	8002866 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002760:	e066      	b.n	8002830 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	6a39      	ldr	r1, [r7, #32]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fb0c 	bl	8002d84 <I2C_WaitOnTXEFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00d      	beq.n	800278e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	2b04      	cmp	r3, #4
 8002778:	d107      	bne.n	800278a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002788:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e06b      	b.n	8002866 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d11b      	bne.n	8002804 <HAL_I2C_Master_Transmit+0x188>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d017      	beq.n	8002804 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	781a      	ldrb	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	6a39      	ldr	r1, [r7, #32]
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fafc 	bl	8002e06 <I2C_WaitOnBTFFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00d      	beq.n	8002830 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	2b04      	cmp	r3, #4
 800281a:	d107      	bne.n	800282c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e01a      	b.n	8002866 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	2b00      	cmp	r3, #0
 8002836:	d194      	bne.n	8002762 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e000      	b.n	8002866 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002864:	2302      	movs	r3, #2
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	00100002 	.word	0x00100002
 8002874:	ffff0000 	.word	0xffff0000

08002878 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	460b      	mov	r3, r1
 8002886:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002888:	f7ff fac4 	bl	8001e14 <HAL_GetTick>
 800288c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800288e:	2301      	movs	r3, #1
 8002890:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b20      	cmp	r3, #32
 800289c:	f040 8111 	bne.w	8002ac2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2319      	movs	r3, #25
 80028a6:	2201      	movs	r2, #1
 80028a8:	4988      	ldr	r1, [pc, #544]	; (8002acc <HAL_I2C_IsDeviceReady+0x254>)
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f994 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
 80028b8:	e104      	b.n	8002ac4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_I2C_IsDeviceReady+0x50>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e0fd      	b.n	8002ac4 <HAL_I2C_IsDeviceReady+0x24c>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d007      	beq.n	80028ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0201 	orr.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2224      	movs	r2, #36	; 0x24
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4a70      	ldr	r2, [pc, #448]	; (8002ad0 <HAL_I2C_IsDeviceReady+0x258>)
 8002910:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002920:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2200      	movs	r2, #0
 800292a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f952 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00d      	beq.n	8002956 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002948:	d103      	bne.n	8002952 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002950:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e0b6      	b.n	8002ac4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002956:	897b      	ldrh	r3, [r7, #10]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002964:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002966:	f7ff fa55 	bl	8001e14 <HAL_GetTick>
 800296a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b02      	cmp	r3, #2
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002990:	bf0c      	ite	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	2300      	movne	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800299a:	e025      	b.n	80029e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800299c:	f7ff fa3a 	bl	8001e14 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d302      	bcc.n	80029b2 <HAL_I2C_IsDeviceReady+0x13a>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d103      	bne.n	80029ba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	22a0      	movs	r2, #160	; 0xa0
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2ba0      	cmp	r3, #160	; 0xa0
 80029f2:	d005      	beq.n	8002a00 <HAL_I2C_IsDeviceReady+0x188>
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d102      	bne.n	8002a00 <HAL_I2C_IsDeviceReady+0x188>
 80029fa:	7dbb      	ldrb	r3, [r7, #22]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0cd      	beq.n	800299c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d129      	bne.n	8002a6a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a24:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2319      	movs	r3, #25
 8002a42:	2201      	movs	r2, #1
 8002a44:	4921      	ldr	r1, [pc, #132]	; (8002acc <HAL_I2C_IsDeviceReady+0x254>)
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f8c6 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e036      	b.n	8002ac4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e02c      	b.n	8002ac4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a78:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a82:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	2319      	movs	r3, #25
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	490f      	ldr	r1, [pc, #60]	; (8002acc <HAL_I2C_IsDeviceReady+0x254>)
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f8a2 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e012      	b.n	8002ac4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	f4ff af32 	bcc.w	8002912 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002ac2:	2302      	movs	r3, #2
  }
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3720      	adds	r7, #32
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	00100002 	.word	0x00100002
 8002ad0:	ffff0000 	.word	0xffff0000

08002ad4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d006      	beq.n	8002afe <I2C_MasterRequestWrite+0x2a>
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d003      	beq.n	8002afe <I2C_MasterRequestWrite+0x2a>
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002afc:	d108      	bne.n	8002b10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	e00b      	b.n	8002b28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	2b12      	cmp	r3, #18
 8002b16:	d107      	bne.n	8002b28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f84f 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00d      	beq.n	8002b5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4e:	d103      	bne.n	8002b58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e035      	b.n	8002bc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b64:	d108      	bne.n	8002b78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b74:	611a      	str	r2, [r3, #16]
 8002b76:	e01b      	b.n	8002bb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b78:	897b      	ldrh	r3, [r7, #10]
 8002b7a:	11db      	asrs	r3, r3, #7
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f003 0306 	and.w	r3, r3, #6
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f063 030f 	orn	r3, r3, #15
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	490e      	ldr	r1, [pc, #56]	; (8002bd0 <I2C_MasterRequestWrite+0xfc>)
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f875 	bl	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e010      	b.n	8002bc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ba6:	897b      	ldrh	r3, [r7, #10]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	4907      	ldr	r1, [pc, #28]	; (8002bd4 <I2C_MasterRequestWrite+0x100>)
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f865 	bl	8002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	00010008 	.word	0x00010008
 8002bd4:	00010002 	.word	0x00010002

08002bd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	4613      	mov	r3, r2
 8002be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002be8:	e025      	b.n	8002c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bf0:	d021      	beq.n	8002c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf2:	f7ff f90f 	bl	8001e14 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d302      	bcc.n	8002c08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d116      	bne.n	8002c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f043 0220 	orr.w	r2, r3, #32
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e023      	b.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	0c1b      	lsrs	r3, r3, #16
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d10d      	bne.n	8002c5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	43da      	mvns	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	bf0c      	ite	eq
 8002c52:	2301      	moveq	r3, #1
 8002c54:	2300      	movne	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	e00c      	b.n	8002c76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4013      	ands	r3, r2
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bf0c      	ite	eq
 8002c6e:	2301      	moveq	r3, #1
 8002c70:	2300      	movne	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d0b6      	beq.n	8002bea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c94:	e051      	b.n	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca4:	d123      	bne.n	8002cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cbe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f043 0204 	orr.w	r2, r3, #4
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e046      	b.n	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cf4:	d021      	beq.n	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf6:	f7ff f88d 	bl	8001e14 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d302      	bcc.n	8002d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d116      	bne.n	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e020      	b.n	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d10c      	bne.n	8002d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	bf14      	ite	ne
 8002d56:	2301      	movne	r3, #1
 8002d58:	2300      	moveq	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	e00b      	b.n	8002d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	43da      	mvns	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d18d      	bne.n	8002c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d90:	e02d      	b.n	8002dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f878 	bl	8002e88 <I2C_IsAcknowledgeFailed>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e02d      	b.n	8002dfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002da8:	d021      	beq.n	8002dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002daa:	f7ff f833 	bl	8001e14 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d302      	bcc.n	8002dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d116      	bne.n	8002dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f043 0220 	orr.w	r2, r3, #32
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e007      	b.n	8002dfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df8:	2b80      	cmp	r3, #128	; 0x80
 8002dfa:	d1ca      	bne.n	8002d92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e12:	e02d      	b.n	8002e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f837 	bl	8002e88 <I2C_IsAcknowledgeFailed>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e02d      	b.n	8002e80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e2a:	d021      	beq.n	8002e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2c:	f7fe fff2 	bl	8001e14 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d302      	bcc.n	8002e42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d116      	bne.n	8002e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f043 0220 	orr.w	r2, r3, #32
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e007      	b.n	8002e80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d1ca      	bne.n	8002e14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9e:	d11b      	bne.n	8002ed8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ea8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f043 0204 	orr.w	r2, r3, #4
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e272      	b.n	80033dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 8087 	beq.w	8003012 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f04:	4b92      	ldr	r3, [pc, #584]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d00c      	beq.n	8002f2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f10:	4b8f      	ldr	r3, [pc, #572]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d112      	bne.n	8002f42 <HAL_RCC_OscConfig+0x5e>
 8002f1c:	4b8c      	ldr	r3, [pc, #560]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f28:	d10b      	bne.n	8002f42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2a:	4b89      	ldr	r3, [pc, #548]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d06c      	beq.n	8003010 <HAL_RCC_OscConfig+0x12c>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d168      	bne.n	8003010 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e24c      	b.n	80033dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x76>
 8002f4c:	4b80      	ldr	r3, [pc, #512]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a7f      	ldr	r2, [pc, #508]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	e02e      	b.n	8002fb8 <HAL_RCC_OscConfig+0xd4>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x98>
 8002f62:	4b7b      	ldr	r3, [pc, #492]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a7a      	ldr	r2, [pc, #488]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b78      	ldr	r3, [pc, #480]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a77      	ldr	r2, [pc, #476]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e01d      	b.n	8002fb8 <HAL_RCC_OscConfig+0xd4>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0xbc>
 8002f86:	4b72      	ldr	r3, [pc, #456]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a71      	ldr	r2, [pc, #452]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	4b6f      	ldr	r3, [pc, #444]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a6e      	ldr	r2, [pc, #440]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	e00b      	b.n	8002fb8 <HAL_RCC_OscConfig+0xd4>
 8002fa0:	4b6b      	ldr	r3, [pc, #428]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a6a      	ldr	r2, [pc, #424]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	4b68      	ldr	r3, [pc, #416]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a67      	ldr	r2, [pc, #412]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d013      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe ff28 	bl	8001e14 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7fe ff24 	bl	8001e14 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	; 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e200      	b.n	80033dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	4b5d      	ldr	r3, [pc, #372]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0xe4>
 8002fe6:	e014      	b.n	8003012 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe ff14 	bl	8001e14 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fe ff10 	bl	8001e14 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e1ec      	b.n	80033dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003002:	4b53      	ldr	r3, [pc, #332]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x10c>
 800300e:	e000      	b.n	8003012 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d063      	beq.n	80030e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800301e:	4b4c      	ldr	r3, [pc, #304]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00b      	beq.n	8003042 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800302a:	4b49      	ldr	r3, [pc, #292]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b08      	cmp	r3, #8
 8003034:	d11c      	bne.n	8003070 <HAL_RCC_OscConfig+0x18c>
 8003036:	4b46      	ldr	r3, [pc, #280]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d116      	bne.n	8003070 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003042:	4b43      	ldr	r3, [pc, #268]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_RCC_OscConfig+0x176>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d001      	beq.n	800305a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e1c0      	b.n	80033dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305a:	4b3d      	ldr	r3, [pc, #244]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4939      	ldr	r1, [pc, #228]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306e:	e03a      	b.n	80030e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d020      	beq.n	80030ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003078:	4b36      	ldr	r3, [pc, #216]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 800307a:	2201      	movs	r2, #1
 800307c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fe fec9 	bl	8001e14 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003086:	f7fe fec5 	bl	8001e14 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e1a1      	b.n	80033dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003098:	4b2d      	ldr	r3, [pc, #180]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a4:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4927      	ldr	r1, [pc, #156]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	600b      	str	r3, [r1, #0]
 80030b8:	e015      	b.n	80030e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ba:	4b26      	ldr	r3, [pc, #152]	; (8003154 <HAL_RCC_OscConfig+0x270>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe fea8 	bl	8001e14 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c8:	f7fe fea4 	bl	8001e14 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e180      	b.n	80033dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030da:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d03a      	beq.n	8003168 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d019      	beq.n	800312e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fa:	4b17      	ldr	r3, [pc, #92]	; (8003158 <HAL_RCC_OscConfig+0x274>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003100:	f7fe fe88 	bl	8001e14 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003108:	f7fe fe84 	bl	8001e14 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e160      	b.n	80033dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <HAL_RCC_OscConfig+0x26c>)
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003126:	2001      	movs	r0, #1
 8003128:	f000 fac4 	bl	80036b4 <RCC_Delay>
 800312c:	e01c      	b.n	8003168 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <HAL_RCC_OscConfig+0x274>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003134:	f7fe fe6e 	bl	8001e14 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313a:	e00f      	b.n	800315c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800313c:	f7fe fe6a 	bl	8001e14 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d908      	bls.n	800315c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e146      	b.n	80033dc <HAL_RCC_OscConfig+0x4f8>
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000
 8003154:	42420000 	.word	0x42420000
 8003158:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315c:	4b92      	ldr	r3, [pc, #584]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e9      	bne.n	800313c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80a6 	beq.w	80032c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317a:	4b8b      	ldr	r3, [pc, #556]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10d      	bne.n	80031a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003186:	4b88      	ldr	r3, [pc, #544]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	4a87      	ldr	r2, [pc, #540]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 800318c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003190:	61d3      	str	r3, [r2, #28]
 8003192:	4b85      	ldr	r3, [pc, #532]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319e:	2301      	movs	r3, #1
 80031a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a2:	4b82      	ldr	r3, [pc, #520]	; (80033ac <HAL_RCC_OscConfig+0x4c8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d118      	bne.n	80031e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ae:	4b7f      	ldr	r3, [pc, #508]	; (80033ac <HAL_RCC_OscConfig+0x4c8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a7e      	ldr	r2, [pc, #504]	; (80033ac <HAL_RCC_OscConfig+0x4c8>)
 80031b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ba:	f7fe fe2b 	bl	8001e14 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c2:	f7fe fe27 	bl	8001e14 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b64      	cmp	r3, #100	; 0x64
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e103      	b.n	80033dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d4:	4b75      	ldr	r3, [pc, #468]	; (80033ac <HAL_RCC_OscConfig+0x4c8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d106      	bne.n	80031f6 <HAL_RCC_OscConfig+0x312>
 80031e8:	4b6f      	ldr	r3, [pc, #444]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	4a6e      	ldr	r2, [pc, #440]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6213      	str	r3, [r2, #32]
 80031f4:	e02d      	b.n	8003252 <HAL_RCC_OscConfig+0x36e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10c      	bne.n	8003218 <HAL_RCC_OscConfig+0x334>
 80031fe:	4b6a      	ldr	r3, [pc, #424]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4a69      	ldr	r2, [pc, #420]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	6213      	str	r3, [r2, #32]
 800320a:	4b67      	ldr	r3, [pc, #412]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4a66      	ldr	r2, [pc, #408]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	6213      	str	r3, [r2, #32]
 8003216:	e01c      	b.n	8003252 <HAL_RCC_OscConfig+0x36e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b05      	cmp	r3, #5
 800321e:	d10c      	bne.n	800323a <HAL_RCC_OscConfig+0x356>
 8003220:	4b61      	ldr	r3, [pc, #388]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	4a60      	ldr	r2, [pc, #384]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 8003226:	f043 0304 	orr.w	r3, r3, #4
 800322a:	6213      	str	r3, [r2, #32]
 800322c:	4b5e      	ldr	r3, [pc, #376]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	4a5d      	ldr	r2, [pc, #372]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	6213      	str	r3, [r2, #32]
 8003238:	e00b      	b.n	8003252 <HAL_RCC_OscConfig+0x36e>
 800323a:	4b5b      	ldr	r3, [pc, #364]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	4a5a      	ldr	r2, [pc, #360]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	6213      	str	r3, [r2, #32]
 8003246:	4b58      	ldr	r3, [pc, #352]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	4a57      	ldr	r2, [pc, #348]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 800324c:	f023 0304 	bic.w	r3, r3, #4
 8003250:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d015      	beq.n	8003286 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325a:	f7fe fddb 	bl	8001e14 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003260:	e00a      	b.n	8003278 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003262:	f7fe fdd7 	bl	8001e14 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003270:	4293      	cmp	r3, r2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e0b1      	b.n	80033dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003278:	4b4b      	ldr	r3, [pc, #300]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0ee      	beq.n	8003262 <HAL_RCC_OscConfig+0x37e>
 8003284:	e014      	b.n	80032b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003286:	f7fe fdc5 	bl	8001e14 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328c:	e00a      	b.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328e:	f7fe fdc1 	bl	8001e14 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f241 3288 	movw	r2, #5000	; 0x1388
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e09b      	b.n	80033dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a4:	4b40      	ldr	r3, [pc, #256]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1ee      	bne.n	800328e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d105      	bne.n	80032c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b6:	4b3c      	ldr	r3, [pc, #240]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	4a3b      	ldr	r2, [pc, #236]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8087 	beq.w	80033da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032cc:	4b36      	ldr	r3, [pc, #216]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d061      	beq.n	800339c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d146      	bne.n	800336e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e0:	4b33      	ldr	r3, [pc, #204]	; (80033b0 <HAL_RCC_OscConfig+0x4cc>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e6:	f7fe fd95 	bl	8001e14 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ee:	f7fe fd91 	bl	8001e14 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e06d      	b.n	80033dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003300:	4b29      	ldr	r3, [pc, #164]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1f0      	bne.n	80032ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003314:	d108      	bne.n	8003328 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003316:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	4921      	ldr	r1, [pc, #132]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003328:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a19      	ldr	r1, [r3, #32]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	430b      	orrs	r3, r1
 800333a:	491b      	ldr	r1, [pc, #108]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003340:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <HAL_RCC_OscConfig+0x4cc>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7fe fd65 	bl	8001e14 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334e:	f7fe fd61 	bl	8001e14 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e03d      	b.n	80033dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x46a>
 800336c:	e035      	b.n	80033da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <HAL_RCC_OscConfig+0x4cc>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe fd4e 	bl	8001e14 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337c:	f7fe fd4a 	bl	8001e14 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e026      	b.n	80033dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_RCC_OscConfig+0x4c4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x498>
 800339a:	e01e      	b.n	80033da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d107      	bne.n	80033b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e019      	b.n	80033dc <HAL_RCC_OscConfig+0x4f8>
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40007000 	.word	0x40007000
 80033b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_RCC_OscConfig+0x500>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d106      	bne.n	80033d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d001      	beq.n	80033da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000

080033e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0d0      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033fc:	4b6a      	ldr	r3, [pc, #424]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d910      	bls.n	800342c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b67      	ldr	r3, [pc, #412]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 0207 	bic.w	r2, r3, #7
 8003412:	4965      	ldr	r1, [pc, #404]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b63      	ldr	r3, [pc, #396]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0b8      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d020      	beq.n	800347a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003444:	4b59      	ldr	r3, [pc, #356]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4a58      	ldr	r2, [pc, #352]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800344e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800345c:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4a52      	ldr	r2, [pc, #328]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003466:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003468:	4b50      	ldr	r3, [pc, #320]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	494d      	ldr	r1, [pc, #308]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d040      	beq.n	8003508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	4b47      	ldr	r3, [pc, #284]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d115      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e07f      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a6:	4b41      	ldr	r3, [pc, #260]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e073      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b6:	4b3d      	ldr	r3, [pc, #244]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e06b      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034c6:	4b39      	ldr	r3, [pc, #228]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f023 0203 	bic.w	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4936      	ldr	r1, [pc, #216]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d8:	f7fe fc9c 	bl	8001e14 <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e0:	f7fe fc98 	bl	8001e14 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e053      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f6:	4b2d      	ldr	r3, [pc, #180]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 020c 	and.w	r2, r3, #12
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	429a      	cmp	r2, r3
 8003506:	d1eb      	bne.n	80034e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003508:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d210      	bcs.n	8003538 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b24      	ldr	r3, [pc, #144]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 0207 	bic.w	r2, r3, #7
 800351e:	4922      	ldr	r1, [pc, #136]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e032      	b.n	800359e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003544:	4b19      	ldr	r3, [pc, #100]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4916      	ldr	r1, [pc, #88]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	490e      	ldr	r1, [pc, #56]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003576:	f000 f821 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 800357a:	4602      	mov	r2, r0
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	490a      	ldr	r1, [pc, #40]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003588:	5ccb      	ldrb	r3, [r1, r3]
 800358a:	fa22 f303 	lsr.w	r3, r2, r3
 800358e:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003592:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe fbfa 	bl	8001d90 <HAL_InitTick>

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40022000 	.word	0x40022000
 80035ac:	40021000 	.word	0x40021000
 80035b0:	08009620 	.word	0x08009620
 80035b4:	20000008 	.word	0x20000008
 80035b8:	2000000c 	.word	0x2000000c

080035bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035bc:	b490      	push	{r4, r7}
 80035be:	b08a      	sub	sp, #40	; 0x28
 80035c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035c2:	4b29      	ldr	r3, [pc, #164]	; (8003668 <HAL_RCC_GetSysClockFreq+0xac>)
 80035c4:	1d3c      	adds	r4, r7, #4
 80035c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035cc:	f240 2301 	movw	r3, #513	; 0x201
 80035d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	2300      	movs	r3, #0
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035e6:	4b21      	ldr	r3, [pc, #132]	; (800366c <HAL_RCC_GetSysClockFreq+0xb0>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d002      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x40>
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d003      	beq.n	8003602 <HAL_RCC_GetSysClockFreq+0x46>
 80035fa:	e02b      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035fc:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035fe:	623b      	str	r3, [r7, #32]
      break;
 8003600:	e02b      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	0c9b      	lsrs	r3, r3, #18
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	3328      	adds	r3, #40	; 0x28
 800360c:	443b      	add	r3, r7
 800360e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003612:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d012      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800361e:	4b13      	ldr	r3, [pc, #76]	; (800366c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	0c5b      	lsrs	r3, r3, #17
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	3328      	adds	r3, #40	; 0x28
 800362a:	443b      	add	r3, r7
 800362c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003630:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	4a0e      	ldr	r2, [pc, #56]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003636:	fb03 f202 	mul.w	r2, r3, r2
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
 8003642:	e004      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003648:	fb02 f303 	mul.w	r3, r2, r3
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	623b      	str	r3, [r7, #32]
      break;
 8003652:	e002      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003656:	623b      	str	r3, [r7, #32]
      break;
 8003658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365a:	6a3b      	ldr	r3, [r7, #32]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3728      	adds	r7, #40	; 0x28
 8003660:	46bd      	mov	sp, r7
 8003662:	bc90      	pop	{r4, r7}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	08008ea4 	.word	0x08008ea4
 800366c:	40021000 	.word	0x40021000
 8003670:	007a1200 	.word	0x007a1200
 8003674:	003d0900 	.word	0x003d0900

08003678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800367c:	4b02      	ldr	r3, [pc, #8]	; (8003688 <HAL_RCC_GetHCLKFreq+0x10>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	20000008 	.word	0x20000008

0800368c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003690:	f7ff fff2 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 8003694:	4602      	mov	r2, r0
 8003696:	4b05      	ldr	r3, [pc, #20]	; (80036ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	0a1b      	lsrs	r3, r3, #8
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	4903      	ldr	r1, [pc, #12]	; (80036b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a2:	5ccb      	ldrb	r3, [r1, r3]
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000
 80036b0:	08009630 	.word	0x08009630

080036b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036bc:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <RCC_Delay+0x34>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <RCC_Delay+0x38>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	0a5b      	lsrs	r3, r3, #9
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036d0:	bf00      	nop
  }
  while (Delay --);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1e5a      	subs	r2, r3, #1
 80036d6:	60fa      	str	r2, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f9      	bne.n	80036d0 <RCC_Delay+0x1c>
}
 80036dc:	bf00      	nop
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr
 80036e8:	20000008 	.word	0x20000008
 80036ec:	10624dd3 	.word	0x10624dd3

080036f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e041      	b.n	8003786 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fe f990 	bl	8001a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3304      	adds	r3, #4
 800372c:	4619      	mov	r1, r3
 800372e:	4610      	mov	r0, r2
 8003730:	f000 fc9e 	bl	8004070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d001      	beq.n	80037a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e032      	b.n	800380e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a18      	ldr	r2, [pc, #96]	; (8003818 <HAL_TIM_Base_Start+0x88>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00e      	beq.n	80037d8 <HAL_TIM_Base_Start+0x48>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c2:	d009      	beq.n	80037d8 <HAL_TIM_Base_Start+0x48>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a14      	ldr	r2, [pc, #80]	; (800381c <HAL_TIM_Base_Start+0x8c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_TIM_Base_Start+0x48>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a13      	ldr	r2, [pc, #76]	; (8003820 <HAL_TIM_Base_Start+0x90>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d111      	bne.n	80037fc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b06      	cmp	r3, #6
 80037e8:	d010      	beq.n	800380c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0201 	orr.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037fa:	e007      	b.n	800380c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800

08003824 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e041      	b.n	80038ba <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f839 	bl	80038c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	4619      	mov	r1, r3
 8003862:	4610      	mov	r0, r2
 8003864:	f000 fc04 	bl	8004070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_IC_Start_IT+0x1a>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	e013      	b.n	8003916 <HAL_TIM_IC_Start_IT+0x42>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d104      	bne.n	80038fe <HAL_TIM_IC_Start_IT+0x2a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	e00b      	b.n	8003916 <HAL_TIM_IC_Start_IT+0x42>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b08      	cmp	r3, #8
 8003902:	d104      	bne.n	800390e <HAL_TIM_IC_Start_IT+0x3a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800390a:	b2db      	uxtb	r3, r3
 800390c:	e003      	b.n	8003916 <HAL_TIM_IC_Start_IT+0x42>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003914:	b2db      	uxtb	r3, r3
 8003916:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d104      	bne.n	8003928 <HAL_TIM_IC_Start_IT+0x54>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e013      	b.n	8003950 <HAL_TIM_IC_Start_IT+0x7c>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b04      	cmp	r3, #4
 800392c:	d104      	bne.n	8003938 <HAL_TIM_IC_Start_IT+0x64>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e00b      	b.n	8003950 <HAL_TIM_IC_Start_IT+0x7c>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b08      	cmp	r3, #8
 800393c:	d104      	bne.n	8003948 <HAL_TIM_IC_Start_IT+0x74>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003944:	b2db      	uxtb	r3, r3
 8003946:	e003      	b.n	8003950 <HAL_TIM_IC_Start_IT+0x7c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800394e:	b2db      	uxtb	r3, r3
 8003950:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d102      	bne.n	800395e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003958:	7bbb      	ldrb	r3, [r7, #14]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d001      	beq.n	8003962 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e0b3      	b.n	8003aca <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d104      	bne.n	8003972 <HAL_TIM_IC_Start_IT+0x9e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003970:	e013      	b.n	800399a <HAL_TIM_IC_Start_IT+0xc6>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b04      	cmp	r3, #4
 8003976:	d104      	bne.n	8003982 <HAL_TIM_IC_Start_IT+0xae>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003980:	e00b      	b.n	800399a <HAL_TIM_IC_Start_IT+0xc6>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b08      	cmp	r3, #8
 8003986:	d104      	bne.n	8003992 <HAL_TIM_IC_Start_IT+0xbe>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003990:	e003      	b.n	800399a <HAL_TIM_IC_Start_IT+0xc6>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2202      	movs	r2, #2
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <HAL_TIM_IC_Start_IT+0xd6>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a8:	e013      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0xfe>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_IC_Start_IT+0xe6>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039b8:	e00b      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0xfe>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d104      	bne.n	80039ca <HAL_TIM_IC_Start_IT+0xf6>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c8:	e003      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0xfe>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b0c      	cmp	r3, #12
 80039d6:	d841      	bhi.n	8003a5c <HAL_TIM_IC_Start_IT+0x188>
 80039d8:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <HAL_TIM_IC_Start_IT+0x10c>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	08003a15 	.word	0x08003a15
 80039e4:	08003a5d 	.word	0x08003a5d
 80039e8:	08003a5d 	.word	0x08003a5d
 80039ec:	08003a5d 	.word	0x08003a5d
 80039f0:	08003a27 	.word	0x08003a27
 80039f4:	08003a5d 	.word	0x08003a5d
 80039f8:	08003a5d 	.word	0x08003a5d
 80039fc:	08003a5d 	.word	0x08003a5d
 8003a00:	08003a39 	.word	0x08003a39
 8003a04:	08003a5d 	.word	0x08003a5d
 8003a08:	08003a5d 	.word	0x08003a5d
 8003a0c:	08003a5d 	.word	0x08003a5d
 8003a10:	08003a4b 	.word	0x08003a4b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0202 	orr.w	r2, r2, #2
 8003a22:	60da      	str	r2, [r3, #12]
      break;
 8003a24:	e01b      	b.n	8003a5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0204 	orr.w	r2, r2, #4
 8003a34:	60da      	str	r2, [r3, #12]
      break;
 8003a36:	e012      	b.n	8003a5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0208 	orr.w	r2, r2, #8
 8003a46:	60da      	str	r2, [r3, #12]
      break;
 8003a48:	e009      	b.n	8003a5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0210 	orr.w	r2, r2, #16
 8003a58:	60da      	str	r2, [r3, #12]
      break;
 8003a5a:	e000      	b.n	8003a5e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003a5c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2201      	movs	r2, #1
 8003a64:	6839      	ldr	r1, [r7, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fd07 	bl	800447a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a18      	ldr	r2, [pc, #96]	; (8003ad4 <HAL_TIM_IC_Start_IT+0x200>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00e      	beq.n	8003a94 <HAL_TIM_IC_Start_IT+0x1c0>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7e:	d009      	beq.n	8003a94 <HAL_TIM_IC_Start_IT+0x1c0>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <HAL_TIM_IC_Start_IT+0x204>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d004      	beq.n	8003a94 <HAL_TIM_IC_Start_IT+0x1c0>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a13      	ldr	r2, [pc, #76]	; (8003adc <HAL_TIM_IC_Start_IT+0x208>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d111      	bne.n	8003ab8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	d010      	beq.n	8003ac8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab6:	e007      	b.n	8003ac8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40012c00 	.word	0x40012c00
 8003ad8:	40000400 	.word	0x40000400
 8003adc:	40000800 	.word	0x40000800

08003ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d122      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d11b      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0202 	mvn.w	r2, #2
 8003b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fd f98c 	bl	8000e40 <HAL_TIM_IC_CaptureCallback>
 8003b28:	e005      	b.n	8003b36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fa85 	bl	800403a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fa8b 	bl	800404c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d122      	bne.n	8003b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d11b      	bne.n	8003b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0204 	mvn.w	r2, #4
 8003b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2202      	movs	r2, #2
 8003b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fd f962 	bl	8000e40 <HAL_TIM_IC_CaptureCallback>
 8003b7c:	e005      	b.n	8003b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fa5b 	bl	800403a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fa61 	bl	800404c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d122      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d11b      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0208 	mvn.w	r2, #8
 8003bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2204      	movs	r2, #4
 8003bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd f938 	bl	8000e40 <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e005      	b.n	8003bde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fa31 	bl	800403a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fa37 	bl	800404c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b10      	cmp	r3, #16
 8003bf0:	d122      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	2b10      	cmp	r3, #16
 8003bfe:	d11b      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0210 	mvn.w	r2, #16
 8003c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd f90e 	bl	8000e40 <HAL_TIM_IC_CaptureCallback>
 8003c24:	e005      	b.n	8003c32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fa07 	bl	800403a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fa0d 	bl	800404c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d10e      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d107      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0201 	mvn.w	r2, #1
 8003c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f9e2 	bl	8004028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6e:	2b80      	cmp	r3, #128	; 0x80
 8003c70:	d10e      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7c:	2b80      	cmp	r3, #128	; 0x80
 8003c7e:	d107      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fc81 	bl	8004592 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b40      	cmp	r3, #64	; 0x40
 8003c9c:	d10e      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d107      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f9d1 	bl	800405e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d10e      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d107      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0220 	mvn.w	r2, #32
 8003ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fc4c 	bl	8004580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_TIM_IC_ConfigChannel+0x1a>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e082      	b.n	8003e10 <HAL_TIM_IC_ConfigChannel+0x120>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d11b      	bne.n	8003d50 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6819      	ldr	r1, [r3, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f000 fa04 	bl	8004134 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 020c 	bic.w	r2, r2, #12
 8003d3a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6999      	ldr	r1, [r3, #24]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	619a      	str	r2, [r3, #24]
 8003d4e:	e05a      	b.n	8003e06 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d11c      	bne.n	8003d90 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	6819      	ldr	r1, [r3, #0]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f000 fa6d 	bl	8004244 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699a      	ldr	r2, [r3, #24]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d78:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6999      	ldr	r1, [r3, #24]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	021a      	lsls	r2, r3, #8
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	619a      	str	r2, [r3, #24]
 8003d8e:	e03a      	b.n	8003e06 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d11b      	bne.n	8003dce <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f000 fab8 	bl	800431a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 020c 	bic.w	r2, r2, #12
 8003db8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69d9      	ldr	r1, [r3, #28]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	61da      	str	r2, [r3, #28]
 8003dcc:	e01b      	b.n	8003e06 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	6819      	ldr	r1, [r3, #0]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f000 fad7 	bl	8004390 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003df0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69d9      	ldr	r1, [r3, #28]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	021a      	lsls	r2, r3, #8
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_TIM_ConfigClockSource+0x18>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e0b3      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x180>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e68:	d03e      	beq.n	8003ee8 <HAL_TIM_ConfigClockSource+0xd0>
 8003e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e6e:	f200 8087 	bhi.w	8003f80 <HAL_TIM_ConfigClockSource+0x168>
 8003e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e76:	f000 8085 	beq.w	8003f84 <HAL_TIM_ConfigClockSource+0x16c>
 8003e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7e:	d87f      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x168>
 8003e80:	2b70      	cmp	r3, #112	; 0x70
 8003e82:	d01a      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0xa2>
 8003e84:	2b70      	cmp	r3, #112	; 0x70
 8003e86:	d87b      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x168>
 8003e88:	2b60      	cmp	r3, #96	; 0x60
 8003e8a:	d050      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0x116>
 8003e8c:	2b60      	cmp	r3, #96	; 0x60
 8003e8e:	d877      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x168>
 8003e90:	2b50      	cmp	r3, #80	; 0x50
 8003e92:	d03c      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0xf6>
 8003e94:	2b50      	cmp	r3, #80	; 0x50
 8003e96:	d873      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x168>
 8003e98:	2b40      	cmp	r3, #64	; 0x40
 8003e9a:	d058      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0x136>
 8003e9c:	2b40      	cmp	r3, #64	; 0x40
 8003e9e:	d86f      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x168>
 8003ea0:	2b30      	cmp	r3, #48	; 0x30
 8003ea2:	d064      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x156>
 8003ea4:	2b30      	cmp	r3, #48	; 0x30
 8003ea6:	d86b      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x168>
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d060      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x156>
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d867      	bhi.n	8003f80 <HAL_TIM_ConfigClockSource+0x168>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d05c      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x156>
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d05a      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003eb8:	e062      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6899      	ldr	r1, [r3, #8]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f000 fab7 	bl	800443c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003edc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	609a      	str	r2, [r3, #8]
      break;
 8003ee6:	e04e      	b.n	8003f86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	6899      	ldr	r1, [r3, #8]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f000 faa0 	bl	800443c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f0a:	609a      	str	r2, [r3, #8]
      break;
 8003f0c:	e03b      	b.n	8003f86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6859      	ldr	r1, [r3, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f000 f964 	bl	80041e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2150      	movs	r1, #80	; 0x50
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fa6e 	bl	8004408 <TIM_ITRx_SetConfig>
      break;
 8003f2c:	e02b      	b.n	8003f86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6859      	ldr	r1, [r3, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f000 f9be 	bl	80042bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2160      	movs	r1, #96	; 0x60
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fa5e 	bl	8004408 <TIM_ITRx_SetConfig>
      break;
 8003f4c:	e01b      	b.n	8003f86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6859      	ldr	r1, [r3, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f000 f944 	bl	80041e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2140      	movs	r1, #64	; 0x40
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fa4e 	bl	8004408 <TIM_ITRx_SetConfig>
      break;
 8003f6c:	e00b      	b.n	8003f86 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4619      	mov	r1, r3
 8003f78:	4610      	mov	r0, r2
 8003f7a:	f000 fa45 	bl	8004408 <TIM_ITRx_SetConfig>
        break;
 8003f7e:	e002      	b.n	8003f86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f80:	bf00      	nop
 8003f82:	e000      	b.n	8003f86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b0c      	cmp	r3, #12
 8003fb2:	d831      	bhi.n	8004018 <HAL_TIM_ReadCapturedValue+0x78>
 8003fb4:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <HAL_TIM_ReadCapturedValue+0x1c>)
 8003fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fba:	bf00      	nop
 8003fbc:	08003ff1 	.word	0x08003ff1
 8003fc0:	08004019 	.word	0x08004019
 8003fc4:	08004019 	.word	0x08004019
 8003fc8:	08004019 	.word	0x08004019
 8003fcc:	08003ffb 	.word	0x08003ffb
 8003fd0:	08004019 	.word	0x08004019
 8003fd4:	08004019 	.word	0x08004019
 8003fd8:	08004019 	.word	0x08004019
 8003fdc:	08004005 	.word	0x08004005
 8003fe0:	08004019 	.word	0x08004019
 8003fe4:	08004019 	.word	0x08004019
 8003fe8:	08004019 	.word	0x08004019
 8003fec:	0800400f 	.word	0x0800400f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff6:	60fb      	str	r3, [r7, #12]

      break;
 8003ff8:	e00f      	b.n	800401a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	60fb      	str	r3, [r7, #12]

      break;
 8004002:	e00a      	b.n	800401a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400a:	60fb      	str	r3, [r7, #12]

      break;
 800400c:	e005      	b.n	800401a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	60fb      	str	r3, [r7, #12]

      break;
 8004016:	e000      	b.n	800401a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004018:	bf00      	nop
  }

  return tmpreg;
 800401a:	68fb      	ldr	r3, [r7, #12]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop

08004028 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr

0800405e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr

08004070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a29      	ldr	r2, [pc, #164]	; (8004128 <TIM_Base_SetConfig+0xb8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d00b      	beq.n	80040a0 <TIM_Base_SetConfig+0x30>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408e:	d007      	beq.n	80040a0 <TIM_Base_SetConfig+0x30>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a26      	ldr	r2, [pc, #152]	; (800412c <TIM_Base_SetConfig+0xbc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d003      	beq.n	80040a0 <TIM_Base_SetConfig+0x30>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a25      	ldr	r2, [pc, #148]	; (8004130 <TIM_Base_SetConfig+0xc0>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d108      	bne.n	80040b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a1c      	ldr	r2, [pc, #112]	; (8004128 <TIM_Base_SetConfig+0xb8>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00b      	beq.n	80040d2 <TIM_Base_SetConfig+0x62>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c0:	d007      	beq.n	80040d2 <TIM_Base_SetConfig+0x62>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a19      	ldr	r2, [pc, #100]	; (800412c <TIM_Base_SetConfig+0xbc>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d003      	beq.n	80040d2 <TIM_Base_SetConfig+0x62>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a18      	ldr	r2, [pc, #96]	; (8004130 <TIM_Base_SetConfig+0xc0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d108      	bne.n	80040e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a07      	ldr	r2, [pc, #28]	; (8004128 <TIM_Base_SetConfig+0xb8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d103      	bne.n	8004118 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	615a      	str	r2, [r3, #20]
}
 800411e:	bf00      	nop
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	40012c00 	.word	0x40012c00
 800412c:	40000400 	.word	0x40000400
 8004130:	40000800 	.word	0x40000800

08004134 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0201 	bic.w	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4a1f      	ldr	r2, [pc, #124]	; (80041dc <TIM_TI1_SetConfig+0xa8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00b      	beq.n	800417a <TIM_TI1_SetConfig+0x46>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004168:	d007      	beq.n	800417a <TIM_TI1_SetConfig+0x46>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4a1c      	ldr	r2, [pc, #112]	; (80041e0 <TIM_TI1_SetConfig+0xac>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d003      	beq.n	800417a <TIM_TI1_SetConfig+0x46>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4a1b      	ldr	r2, [pc, #108]	; (80041e4 <TIM_TI1_SetConfig+0xb0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d101      	bne.n	800417e <TIM_TI1_SetConfig+0x4a>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <TIM_TI1_SetConfig+0x4c>
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f023 0303 	bic.w	r3, r3, #3
 800418a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	e003      	b.n	800419e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f023 030a 	bic.w	r3, r3, #10
 80041b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f003 030a 	and.w	r3, r3, #10
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	621a      	str	r2, [r3, #32]
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr
 80041dc:	40012c00 	.word	0x40012c00
 80041e0:	40000400 	.word	0x40000400
 80041e4:	40000800 	.word	0x40000800

080041e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	f023 0201 	bic.w	r2, r3, #1
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f023 030a 	bic.w	r3, r3, #10
 8004224:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	621a      	str	r2, [r3, #32]
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f023 0210 	bic.w	r2, r3, #16
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004270:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004282:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	031b      	lsls	r3, r3, #12
 8004288:	b29b      	uxth	r3, r3
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004296:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	f023 0210 	bic.w	r2, r3, #16
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	031b      	lsls	r3, r3, #12
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	621a      	str	r2, [r3, #32]
}
 8004310:	bf00      	nop
 8004312:	371c      	adds	r7, #28
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr

0800431a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800431a:	b480      	push	{r7}
 800431c:	b087      	sub	sp, #28
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f023 0303 	bic.w	r3, r3, #3
 8004346:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004356:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	b2db      	uxtb	r3, r3
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800436a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	621a      	str	r2, [r3, #32]
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr

08004390 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	031b      	lsls	r3, r3, #12
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	031b      	lsls	r3, r3, #12
 80043e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	f043 0307 	orr.w	r3, r3, #7
 800442a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	609a      	str	r2, [r3, #8]
}
 8004432:	bf00      	nop
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004456:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	021a      	lsls	r2, r3, #8
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	431a      	orrs	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4313      	orrs	r3, r2
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	609a      	str	r2, [r3, #8]
}
 8004470:	bf00      	nop
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr

0800447a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800447a:	b480      	push	{r7}
 800447c:	b087      	sub	sp, #28
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f003 031f 	and.w	r3, r3, #31
 800448c:	2201      	movs	r2, #1
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1a      	ldr	r2, [r3, #32]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	43db      	mvns	r3, r3
 800449c:	401a      	ands	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a1a      	ldr	r2, [r3, #32]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	431a      	orrs	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	621a      	str	r2, [r3, #32]
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr
	...

080044c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044d8:	2302      	movs	r3, #2
 80044da:	e046      	b.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004502:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a16      	ldr	r2, [pc, #88]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00e      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004528:	d009      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a12      	ldr	r2, [pc, #72]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d004      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a10      	ldr	r2, [pc, #64]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d10c      	bne.n	8004558 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004544:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	4313      	orrs	r3, r2
 800454e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr
 8004574:	40012c00 	.word	0x40012c00
 8004578:	40000400 	.word	0x40000400
 800457c:	40000800 	.word	0x40000800

08004580 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr

08004592 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr

080045a4 <__errno>:
 80045a4:	4b01      	ldr	r3, [pc, #4]	; (80045ac <__errno+0x8>)
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20000014 	.word	0x20000014

080045b0 <__libc_init_array>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	2600      	movs	r6, #0
 80045b4:	4d0c      	ldr	r5, [pc, #48]	; (80045e8 <__libc_init_array+0x38>)
 80045b6:	4c0d      	ldr	r4, [pc, #52]	; (80045ec <__libc_init_array+0x3c>)
 80045b8:	1b64      	subs	r4, r4, r5
 80045ba:	10a4      	asrs	r4, r4, #2
 80045bc:	42a6      	cmp	r6, r4
 80045be:	d109      	bne.n	80045d4 <__libc_init_array+0x24>
 80045c0:	f004 fc50 	bl	8008e64 <_init>
 80045c4:	2600      	movs	r6, #0
 80045c6:	4d0a      	ldr	r5, [pc, #40]	; (80045f0 <__libc_init_array+0x40>)
 80045c8:	4c0a      	ldr	r4, [pc, #40]	; (80045f4 <__libc_init_array+0x44>)
 80045ca:	1b64      	subs	r4, r4, r5
 80045cc:	10a4      	asrs	r4, r4, #2
 80045ce:	42a6      	cmp	r6, r4
 80045d0:	d105      	bne.n	80045de <__libc_init_array+0x2e>
 80045d2:	bd70      	pop	{r4, r5, r6, pc}
 80045d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d8:	4798      	blx	r3
 80045da:	3601      	adds	r6, #1
 80045dc:	e7ee      	b.n	80045bc <__libc_init_array+0xc>
 80045de:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e2:	4798      	blx	r3
 80045e4:	3601      	adds	r6, #1
 80045e6:	e7f2      	b.n	80045ce <__libc_init_array+0x1e>
 80045e8:	08009adc 	.word	0x08009adc
 80045ec:	08009adc 	.word	0x08009adc
 80045f0:	08009adc 	.word	0x08009adc
 80045f4:	08009ae0 	.word	0x08009ae0

080045f8 <memset>:
 80045f8:	4603      	mov	r3, r0
 80045fa:	4402      	add	r2, r0
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d100      	bne.n	8004602 <memset+0xa>
 8004600:	4770      	bx	lr
 8004602:	f803 1b01 	strb.w	r1, [r3], #1
 8004606:	e7f9      	b.n	80045fc <memset+0x4>

08004608 <__cvt>:
 8004608:	2b00      	cmp	r3, #0
 800460a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800460e:	461f      	mov	r7, r3
 8004610:	bfbb      	ittet	lt
 8004612:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004616:	461f      	movlt	r7, r3
 8004618:	2300      	movge	r3, #0
 800461a:	232d      	movlt	r3, #45	; 0x2d
 800461c:	b088      	sub	sp, #32
 800461e:	4614      	mov	r4, r2
 8004620:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004622:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004624:	7013      	strb	r3, [r2, #0]
 8004626:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004628:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800462c:	f023 0820 	bic.w	r8, r3, #32
 8004630:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004634:	d005      	beq.n	8004642 <__cvt+0x3a>
 8004636:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800463a:	d100      	bne.n	800463e <__cvt+0x36>
 800463c:	3501      	adds	r5, #1
 800463e:	2302      	movs	r3, #2
 8004640:	e000      	b.n	8004644 <__cvt+0x3c>
 8004642:	2303      	movs	r3, #3
 8004644:	aa07      	add	r2, sp, #28
 8004646:	9204      	str	r2, [sp, #16]
 8004648:	aa06      	add	r2, sp, #24
 800464a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800464e:	e9cd 3500 	strd	r3, r5, [sp]
 8004652:	4622      	mov	r2, r4
 8004654:	463b      	mov	r3, r7
 8004656:	f001 fd83 	bl	8006160 <_dtoa_r>
 800465a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800465e:	4606      	mov	r6, r0
 8004660:	d102      	bne.n	8004668 <__cvt+0x60>
 8004662:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004664:	07db      	lsls	r3, r3, #31
 8004666:	d522      	bpl.n	80046ae <__cvt+0xa6>
 8004668:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800466c:	eb06 0905 	add.w	r9, r6, r5
 8004670:	d110      	bne.n	8004694 <__cvt+0x8c>
 8004672:	7833      	ldrb	r3, [r6, #0]
 8004674:	2b30      	cmp	r3, #48	; 0x30
 8004676:	d10a      	bne.n	800468e <__cvt+0x86>
 8004678:	2200      	movs	r2, #0
 800467a:	2300      	movs	r3, #0
 800467c:	4620      	mov	r0, r4
 800467e:	4639      	mov	r1, r7
 8004680:	f7fc f992 	bl	80009a8 <__aeabi_dcmpeq>
 8004684:	b918      	cbnz	r0, 800468e <__cvt+0x86>
 8004686:	f1c5 0501 	rsb	r5, r5, #1
 800468a:	f8ca 5000 	str.w	r5, [sl]
 800468e:	f8da 3000 	ldr.w	r3, [sl]
 8004692:	4499      	add	r9, r3
 8004694:	2200      	movs	r2, #0
 8004696:	2300      	movs	r3, #0
 8004698:	4620      	mov	r0, r4
 800469a:	4639      	mov	r1, r7
 800469c:	f7fc f984 	bl	80009a8 <__aeabi_dcmpeq>
 80046a0:	b108      	cbz	r0, 80046a6 <__cvt+0x9e>
 80046a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80046a6:	2230      	movs	r2, #48	; 0x30
 80046a8:	9b07      	ldr	r3, [sp, #28]
 80046aa:	454b      	cmp	r3, r9
 80046ac:	d307      	bcc.n	80046be <__cvt+0xb6>
 80046ae:	4630      	mov	r0, r6
 80046b0:	9b07      	ldr	r3, [sp, #28]
 80046b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80046b4:	1b9b      	subs	r3, r3, r6
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	b008      	add	sp, #32
 80046ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046be:	1c59      	adds	r1, r3, #1
 80046c0:	9107      	str	r1, [sp, #28]
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	e7f0      	b.n	80046a8 <__cvt+0xa0>

080046c6 <__exponent>:
 80046c6:	4603      	mov	r3, r0
 80046c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ca:	2900      	cmp	r1, #0
 80046cc:	f803 2b02 	strb.w	r2, [r3], #2
 80046d0:	bfb6      	itet	lt
 80046d2:	222d      	movlt	r2, #45	; 0x2d
 80046d4:	222b      	movge	r2, #43	; 0x2b
 80046d6:	4249      	neglt	r1, r1
 80046d8:	2909      	cmp	r1, #9
 80046da:	7042      	strb	r2, [r0, #1]
 80046dc:	dd2b      	ble.n	8004736 <__exponent+0x70>
 80046de:	f10d 0407 	add.w	r4, sp, #7
 80046e2:	46a4      	mov	ip, r4
 80046e4:	270a      	movs	r7, #10
 80046e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80046ea:	460a      	mov	r2, r1
 80046ec:	46a6      	mov	lr, r4
 80046ee:	fb07 1516 	mls	r5, r7, r6, r1
 80046f2:	2a63      	cmp	r2, #99	; 0x63
 80046f4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80046f8:	4631      	mov	r1, r6
 80046fa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80046fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004702:	dcf0      	bgt.n	80046e6 <__exponent+0x20>
 8004704:	3130      	adds	r1, #48	; 0x30
 8004706:	f1ae 0502 	sub.w	r5, lr, #2
 800470a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800470e:	4629      	mov	r1, r5
 8004710:	1c44      	adds	r4, r0, #1
 8004712:	4561      	cmp	r1, ip
 8004714:	d30a      	bcc.n	800472c <__exponent+0x66>
 8004716:	f10d 0209 	add.w	r2, sp, #9
 800471a:	eba2 020e 	sub.w	r2, r2, lr
 800471e:	4565      	cmp	r5, ip
 8004720:	bf88      	it	hi
 8004722:	2200      	movhi	r2, #0
 8004724:	4413      	add	r3, r2
 8004726:	1a18      	subs	r0, r3, r0
 8004728:	b003      	add	sp, #12
 800472a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800472c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004730:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004734:	e7ed      	b.n	8004712 <__exponent+0x4c>
 8004736:	2330      	movs	r3, #48	; 0x30
 8004738:	3130      	adds	r1, #48	; 0x30
 800473a:	7083      	strb	r3, [r0, #2]
 800473c:	70c1      	strb	r1, [r0, #3]
 800473e:	1d03      	adds	r3, r0, #4
 8004740:	e7f1      	b.n	8004726 <__exponent+0x60>
	...

08004744 <_printf_float>:
 8004744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004748:	b091      	sub	sp, #68	; 0x44
 800474a:	460c      	mov	r4, r1
 800474c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004750:	4616      	mov	r6, r2
 8004752:	461f      	mov	r7, r3
 8004754:	4605      	mov	r5, r0
 8004756:	f002 fe57 	bl	8007408 <_localeconv_r>
 800475a:	6803      	ldr	r3, [r0, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	9309      	str	r3, [sp, #36]	; 0x24
 8004760:	f7fb fcf6 	bl	8000150 <strlen>
 8004764:	2300      	movs	r3, #0
 8004766:	930e      	str	r3, [sp, #56]	; 0x38
 8004768:	f8d8 3000 	ldr.w	r3, [r8]
 800476c:	900a      	str	r0, [sp, #40]	; 0x28
 800476e:	3307      	adds	r3, #7
 8004770:	f023 0307 	bic.w	r3, r3, #7
 8004774:	f103 0208 	add.w	r2, r3, #8
 8004778:	f894 9018 	ldrb.w	r9, [r4, #24]
 800477c:	f8d4 b000 	ldr.w	fp, [r4]
 8004780:	f8c8 2000 	str.w	r2, [r8]
 8004784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004788:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800478c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004790:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004794:	930b      	str	r3, [sp, #44]	; 0x2c
 8004796:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800479a:	4640      	mov	r0, r8
 800479c:	4b9c      	ldr	r3, [pc, #624]	; (8004a10 <_printf_float+0x2cc>)
 800479e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047a0:	f7fc f934 	bl	8000a0c <__aeabi_dcmpun>
 80047a4:	bb70      	cbnz	r0, 8004804 <_printf_float+0xc0>
 80047a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047aa:	4640      	mov	r0, r8
 80047ac:	4b98      	ldr	r3, [pc, #608]	; (8004a10 <_printf_float+0x2cc>)
 80047ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047b0:	f7fc f90e 	bl	80009d0 <__aeabi_dcmple>
 80047b4:	bb30      	cbnz	r0, 8004804 <_printf_float+0xc0>
 80047b6:	2200      	movs	r2, #0
 80047b8:	2300      	movs	r3, #0
 80047ba:	4640      	mov	r0, r8
 80047bc:	4651      	mov	r1, sl
 80047be:	f7fc f8fd 	bl	80009bc <__aeabi_dcmplt>
 80047c2:	b110      	cbz	r0, 80047ca <_printf_float+0x86>
 80047c4:	232d      	movs	r3, #45	; 0x2d
 80047c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ca:	4b92      	ldr	r3, [pc, #584]	; (8004a14 <_printf_float+0x2d0>)
 80047cc:	4892      	ldr	r0, [pc, #584]	; (8004a18 <_printf_float+0x2d4>)
 80047ce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80047d2:	bf94      	ite	ls
 80047d4:	4698      	movls	r8, r3
 80047d6:	4680      	movhi	r8, r0
 80047d8:	2303      	movs	r3, #3
 80047da:	f04f 0a00 	mov.w	sl, #0
 80047de:	6123      	str	r3, [r4, #16]
 80047e0:	f02b 0304 	bic.w	r3, fp, #4
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	4633      	mov	r3, r6
 80047e8:	4621      	mov	r1, r4
 80047ea:	4628      	mov	r0, r5
 80047ec:	9700      	str	r7, [sp, #0]
 80047ee:	aa0f      	add	r2, sp, #60	; 0x3c
 80047f0:	f000 f9d4 	bl	8004b9c <_printf_common>
 80047f4:	3001      	adds	r0, #1
 80047f6:	f040 8090 	bne.w	800491a <_printf_float+0x1d6>
 80047fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047fe:	b011      	add	sp, #68	; 0x44
 8004800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004804:	4642      	mov	r2, r8
 8004806:	4653      	mov	r3, sl
 8004808:	4640      	mov	r0, r8
 800480a:	4651      	mov	r1, sl
 800480c:	f7fc f8fe 	bl	8000a0c <__aeabi_dcmpun>
 8004810:	b148      	cbz	r0, 8004826 <_printf_float+0xe2>
 8004812:	f1ba 0f00 	cmp.w	sl, #0
 8004816:	bfb8      	it	lt
 8004818:	232d      	movlt	r3, #45	; 0x2d
 800481a:	4880      	ldr	r0, [pc, #512]	; (8004a1c <_printf_float+0x2d8>)
 800481c:	bfb8      	it	lt
 800481e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004822:	4b7f      	ldr	r3, [pc, #508]	; (8004a20 <_printf_float+0x2dc>)
 8004824:	e7d3      	b.n	80047ce <_printf_float+0x8a>
 8004826:	6863      	ldr	r3, [r4, #4]
 8004828:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	d142      	bne.n	80048b6 <_printf_float+0x172>
 8004830:	2306      	movs	r3, #6
 8004832:	6063      	str	r3, [r4, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	9206      	str	r2, [sp, #24]
 8004838:	aa0e      	add	r2, sp, #56	; 0x38
 800483a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800483e:	aa0d      	add	r2, sp, #52	; 0x34
 8004840:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004844:	9203      	str	r2, [sp, #12]
 8004846:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800484a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800484e:	6023      	str	r3, [r4, #0]
 8004850:	6863      	ldr	r3, [r4, #4]
 8004852:	4642      	mov	r2, r8
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	4628      	mov	r0, r5
 8004858:	4653      	mov	r3, sl
 800485a:	910b      	str	r1, [sp, #44]	; 0x2c
 800485c:	f7ff fed4 	bl	8004608 <__cvt>
 8004860:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004862:	4680      	mov	r8, r0
 8004864:	2947      	cmp	r1, #71	; 0x47
 8004866:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004868:	d108      	bne.n	800487c <_printf_float+0x138>
 800486a:	1cc8      	adds	r0, r1, #3
 800486c:	db02      	blt.n	8004874 <_printf_float+0x130>
 800486e:	6863      	ldr	r3, [r4, #4]
 8004870:	4299      	cmp	r1, r3
 8004872:	dd40      	ble.n	80048f6 <_printf_float+0x1b2>
 8004874:	f1a9 0902 	sub.w	r9, r9, #2
 8004878:	fa5f f989 	uxtb.w	r9, r9
 800487c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004880:	d81f      	bhi.n	80048c2 <_printf_float+0x17e>
 8004882:	464a      	mov	r2, r9
 8004884:	3901      	subs	r1, #1
 8004886:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800488a:	910d      	str	r1, [sp, #52]	; 0x34
 800488c:	f7ff ff1b 	bl	80046c6 <__exponent>
 8004890:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004892:	4682      	mov	sl, r0
 8004894:	1813      	adds	r3, r2, r0
 8004896:	2a01      	cmp	r2, #1
 8004898:	6123      	str	r3, [r4, #16]
 800489a:	dc02      	bgt.n	80048a2 <_printf_float+0x15e>
 800489c:	6822      	ldr	r2, [r4, #0]
 800489e:	07d2      	lsls	r2, r2, #31
 80048a0:	d501      	bpl.n	80048a6 <_printf_float+0x162>
 80048a2:	3301      	adds	r3, #1
 80048a4:	6123      	str	r3, [r4, #16]
 80048a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d09b      	beq.n	80047e6 <_printf_float+0xa2>
 80048ae:	232d      	movs	r3, #45	; 0x2d
 80048b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b4:	e797      	b.n	80047e6 <_printf_float+0xa2>
 80048b6:	2947      	cmp	r1, #71	; 0x47
 80048b8:	d1bc      	bne.n	8004834 <_printf_float+0xf0>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1ba      	bne.n	8004834 <_printf_float+0xf0>
 80048be:	2301      	movs	r3, #1
 80048c0:	e7b7      	b.n	8004832 <_printf_float+0xee>
 80048c2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80048c6:	d118      	bne.n	80048fa <_printf_float+0x1b6>
 80048c8:	2900      	cmp	r1, #0
 80048ca:	6863      	ldr	r3, [r4, #4]
 80048cc:	dd0b      	ble.n	80048e6 <_printf_float+0x1a2>
 80048ce:	6121      	str	r1, [r4, #16]
 80048d0:	b913      	cbnz	r3, 80048d8 <_printf_float+0x194>
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	07d0      	lsls	r0, r2, #31
 80048d6:	d502      	bpl.n	80048de <_printf_float+0x19a>
 80048d8:	3301      	adds	r3, #1
 80048da:	440b      	add	r3, r1
 80048dc:	6123      	str	r3, [r4, #16]
 80048de:	f04f 0a00 	mov.w	sl, #0
 80048e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80048e4:	e7df      	b.n	80048a6 <_printf_float+0x162>
 80048e6:	b913      	cbnz	r3, 80048ee <_printf_float+0x1aa>
 80048e8:	6822      	ldr	r2, [r4, #0]
 80048ea:	07d2      	lsls	r2, r2, #31
 80048ec:	d501      	bpl.n	80048f2 <_printf_float+0x1ae>
 80048ee:	3302      	adds	r3, #2
 80048f0:	e7f4      	b.n	80048dc <_printf_float+0x198>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e7f2      	b.n	80048dc <_printf_float+0x198>
 80048f6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80048fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048fc:	4299      	cmp	r1, r3
 80048fe:	db05      	blt.n	800490c <_printf_float+0x1c8>
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	6121      	str	r1, [r4, #16]
 8004904:	07d8      	lsls	r0, r3, #31
 8004906:	d5ea      	bpl.n	80048de <_printf_float+0x19a>
 8004908:	1c4b      	adds	r3, r1, #1
 800490a:	e7e7      	b.n	80048dc <_printf_float+0x198>
 800490c:	2900      	cmp	r1, #0
 800490e:	bfcc      	ite	gt
 8004910:	2201      	movgt	r2, #1
 8004912:	f1c1 0202 	rsble	r2, r1, #2
 8004916:	4413      	add	r3, r2
 8004918:	e7e0      	b.n	80048dc <_printf_float+0x198>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	055a      	lsls	r2, r3, #21
 800491e:	d407      	bmi.n	8004930 <_printf_float+0x1ec>
 8004920:	6923      	ldr	r3, [r4, #16]
 8004922:	4642      	mov	r2, r8
 8004924:	4631      	mov	r1, r6
 8004926:	4628      	mov	r0, r5
 8004928:	47b8      	blx	r7
 800492a:	3001      	adds	r0, #1
 800492c:	d12b      	bne.n	8004986 <_printf_float+0x242>
 800492e:	e764      	b.n	80047fa <_printf_float+0xb6>
 8004930:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004934:	f240 80dd 	bls.w	8004af2 <_printf_float+0x3ae>
 8004938:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800493c:	2200      	movs	r2, #0
 800493e:	2300      	movs	r3, #0
 8004940:	f7fc f832 	bl	80009a8 <__aeabi_dcmpeq>
 8004944:	2800      	cmp	r0, #0
 8004946:	d033      	beq.n	80049b0 <_printf_float+0x26c>
 8004948:	2301      	movs	r3, #1
 800494a:	4631      	mov	r1, r6
 800494c:	4628      	mov	r0, r5
 800494e:	4a35      	ldr	r2, [pc, #212]	; (8004a24 <_printf_float+0x2e0>)
 8004950:	47b8      	blx	r7
 8004952:	3001      	adds	r0, #1
 8004954:	f43f af51 	beq.w	80047fa <_printf_float+0xb6>
 8004958:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800495c:	429a      	cmp	r2, r3
 800495e:	db02      	blt.n	8004966 <_printf_float+0x222>
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	07d8      	lsls	r0, r3, #31
 8004964:	d50f      	bpl.n	8004986 <_printf_float+0x242>
 8004966:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800496a:	4631      	mov	r1, r6
 800496c:	4628      	mov	r0, r5
 800496e:	47b8      	blx	r7
 8004970:	3001      	adds	r0, #1
 8004972:	f43f af42 	beq.w	80047fa <_printf_float+0xb6>
 8004976:	f04f 0800 	mov.w	r8, #0
 800497a:	f104 091a 	add.w	r9, r4, #26
 800497e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004980:	3b01      	subs	r3, #1
 8004982:	4543      	cmp	r3, r8
 8004984:	dc09      	bgt.n	800499a <_printf_float+0x256>
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	079b      	lsls	r3, r3, #30
 800498a:	f100 8102 	bmi.w	8004b92 <_printf_float+0x44e>
 800498e:	68e0      	ldr	r0, [r4, #12]
 8004990:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004992:	4298      	cmp	r0, r3
 8004994:	bfb8      	it	lt
 8004996:	4618      	movlt	r0, r3
 8004998:	e731      	b.n	80047fe <_printf_float+0xba>
 800499a:	2301      	movs	r3, #1
 800499c:	464a      	mov	r2, r9
 800499e:	4631      	mov	r1, r6
 80049a0:	4628      	mov	r0, r5
 80049a2:	47b8      	blx	r7
 80049a4:	3001      	adds	r0, #1
 80049a6:	f43f af28 	beq.w	80047fa <_printf_float+0xb6>
 80049aa:	f108 0801 	add.w	r8, r8, #1
 80049ae:	e7e6      	b.n	800497e <_printf_float+0x23a>
 80049b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	dc38      	bgt.n	8004a28 <_printf_float+0x2e4>
 80049b6:	2301      	movs	r3, #1
 80049b8:	4631      	mov	r1, r6
 80049ba:	4628      	mov	r0, r5
 80049bc:	4a19      	ldr	r2, [pc, #100]	; (8004a24 <_printf_float+0x2e0>)
 80049be:	47b8      	blx	r7
 80049c0:	3001      	adds	r0, #1
 80049c2:	f43f af1a 	beq.w	80047fa <_printf_float+0xb6>
 80049c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049ca:	4313      	orrs	r3, r2
 80049cc:	d102      	bne.n	80049d4 <_printf_float+0x290>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	07d9      	lsls	r1, r3, #31
 80049d2:	d5d8      	bpl.n	8004986 <_printf_float+0x242>
 80049d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049d8:	4631      	mov	r1, r6
 80049da:	4628      	mov	r0, r5
 80049dc:	47b8      	blx	r7
 80049de:	3001      	adds	r0, #1
 80049e0:	f43f af0b 	beq.w	80047fa <_printf_float+0xb6>
 80049e4:	f04f 0900 	mov.w	r9, #0
 80049e8:	f104 0a1a 	add.w	sl, r4, #26
 80049ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049ee:	425b      	negs	r3, r3
 80049f0:	454b      	cmp	r3, r9
 80049f2:	dc01      	bgt.n	80049f8 <_printf_float+0x2b4>
 80049f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049f6:	e794      	b.n	8004922 <_printf_float+0x1de>
 80049f8:	2301      	movs	r3, #1
 80049fa:	4652      	mov	r2, sl
 80049fc:	4631      	mov	r1, r6
 80049fe:	4628      	mov	r0, r5
 8004a00:	47b8      	blx	r7
 8004a02:	3001      	adds	r0, #1
 8004a04:	f43f aef9 	beq.w	80047fa <_printf_float+0xb6>
 8004a08:	f109 0901 	add.w	r9, r9, #1
 8004a0c:	e7ee      	b.n	80049ec <_printf_float+0x2a8>
 8004a0e:	bf00      	nop
 8004a10:	7fefffff 	.word	0x7fefffff
 8004a14:	0800963c 	.word	0x0800963c
 8004a18:	08009640 	.word	0x08009640
 8004a1c:	08009648 	.word	0x08009648
 8004a20:	08009644 	.word	0x08009644
 8004a24:	0800964c 	.word	0x0800964c
 8004a28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	bfa8      	it	ge
 8004a30:	461a      	movge	r2, r3
 8004a32:	2a00      	cmp	r2, #0
 8004a34:	4691      	mov	r9, r2
 8004a36:	dc37      	bgt.n	8004aa8 <_printf_float+0x364>
 8004a38:	f04f 0b00 	mov.w	fp, #0
 8004a3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a40:	f104 021a 	add.w	r2, r4, #26
 8004a44:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004a48:	ebaa 0309 	sub.w	r3, sl, r9
 8004a4c:	455b      	cmp	r3, fp
 8004a4e:	dc33      	bgt.n	8004ab8 <_printf_float+0x374>
 8004a50:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a54:	429a      	cmp	r2, r3
 8004a56:	db3b      	blt.n	8004ad0 <_printf_float+0x38c>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	07da      	lsls	r2, r3, #31
 8004a5c:	d438      	bmi.n	8004ad0 <_printf_float+0x38c>
 8004a5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a60:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a62:	eba3 020a 	sub.w	r2, r3, sl
 8004a66:	eba3 0901 	sub.w	r9, r3, r1
 8004a6a:	4591      	cmp	r9, r2
 8004a6c:	bfa8      	it	ge
 8004a6e:	4691      	movge	r9, r2
 8004a70:	f1b9 0f00 	cmp.w	r9, #0
 8004a74:	dc34      	bgt.n	8004ae0 <_printf_float+0x39c>
 8004a76:	f04f 0800 	mov.w	r8, #0
 8004a7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a7e:	f104 0a1a 	add.w	sl, r4, #26
 8004a82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a86:	1a9b      	subs	r3, r3, r2
 8004a88:	eba3 0309 	sub.w	r3, r3, r9
 8004a8c:	4543      	cmp	r3, r8
 8004a8e:	f77f af7a 	ble.w	8004986 <_printf_float+0x242>
 8004a92:	2301      	movs	r3, #1
 8004a94:	4652      	mov	r2, sl
 8004a96:	4631      	mov	r1, r6
 8004a98:	4628      	mov	r0, r5
 8004a9a:	47b8      	blx	r7
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	f43f aeac 	beq.w	80047fa <_printf_float+0xb6>
 8004aa2:	f108 0801 	add.w	r8, r8, #1
 8004aa6:	e7ec      	b.n	8004a82 <_printf_float+0x33e>
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	4631      	mov	r1, r6
 8004aac:	4642      	mov	r2, r8
 8004aae:	4628      	mov	r0, r5
 8004ab0:	47b8      	blx	r7
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d1c0      	bne.n	8004a38 <_printf_float+0x2f4>
 8004ab6:	e6a0      	b.n	80047fa <_printf_float+0xb6>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	4631      	mov	r1, r6
 8004abc:	4628      	mov	r0, r5
 8004abe:	920b      	str	r2, [sp, #44]	; 0x2c
 8004ac0:	47b8      	blx	r7
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	f43f ae99 	beq.w	80047fa <_printf_float+0xb6>
 8004ac8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004aca:	f10b 0b01 	add.w	fp, fp, #1
 8004ace:	e7b9      	b.n	8004a44 <_printf_float+0x300>
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	47b8      	blx	r7
 8004ada:	3001      	adds	r0, #1
 8004adc:	d1bf      	bne.n	8004a5e <_printf_float+0x31a>
 8004ade:	e68c      	b.n	80047fa <_printf_float+0xb6>
 8004ae0:	464b      	mov	r3, r9
 8004ae2:	4631      	mov	r1, r6
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	eb08 020a 	add.w	r2, r8, sl
 8004aea:	47b8      	blx	r7
 8004aec:	3001      	adds	r0, #1
 8004aee:	d1c2      	bne.n	8004a76 <_printf_float+0x332>
 8004af0:	e683      	b.n	80047fa <_printf_float+0xb6>
 8004af2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004af4:	2a01      	cmp	r2, #1
 8004af6:	dc01      	bgt.n	8004afc <_printf_float+0x3b8>
 8004af8:	07db      	lsls	r3, r3, #31
 8004afa:	d537      	bpl.n	8004b6c <_printf_float+0x428>
 8004afc:	2301      	movs	r3, #1
 8004afe:	4642      	mov	r2, r8
 8004b00:	4631      	mov	r1, r6
 8004b02:	4628      	mov	r0, r5
 8004b04:	47b8      	blx	r7
 8004b06:	3001      	adds	r0, #1
 8004b08:	f43f ae77 	beq.w	80047fa <_printf_float+0xb6>
 8004b0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b10:	4631      	mov	r1, r6
 8004b12:	4628      	mov	r0, r5
 8004b14:	47b8      	blx	r7
 8004b16:	3001      	adds	r0, #1
 8004b18:	f43f ae6f 	beq.w	80047fa <_printf_float+0xb6>
 8004b1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b20:	2200      	movs	r2, #0
 8004b22:	2300      	movs	r3, #0
 8004b24:	f7fb ff40 	bl	80009a8 <__aeabi_dcmpeq>
 8004b28:	b9d8      	cbnz	r0, 8004b62 <_printf_float+0x41e>
 8004b2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b2c:	f108 0201 	add.w	r2, r8, #1
 8004b30:	3b01      	subs	r3, #1
 8004b32:	4631      	mov	r1, r6
 8004b34:	4628      	mov	r0, r5
 8004b36:	47b8      	blx	r7
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d10e      	bne.n	8004b5a <_printf_float+0x416>
 8004b3c:	e65d      	b.n	80047fa <_printf_float+0xb6>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	464a      	mov	r2, r9
 8004b42:	4631      	mov	r1, r6
 8004b44:	4628      	mov	r0, r5
 8004b46:	47b8      	blx	r7
 8004b48:	3001      	adds	r0, #1
 8004b4a:	f43f ae56 	beq.w	80047fa <_printf_float+0xb6>
 8004b4e:	f108 0801 	add.w	r8, r8, #1
 8004b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b54:	3b01      	subs	r3, #1
 8004b56:	4543      	cmp	r3, r8
 8004b58:	dcf1      	bgt.n	8004b3e <_printf_float+0x3fa>
 8004b5a:	4653      	mov	r3, sl
 8004b5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b60:	e6e0      	b.n	8004924 <_printf_float+0x1e0>
 8004b62:	f04f 0800 	mov.w	r8, #0
 8004b66:	f104 091a 	add.w	r9, r4, #26
 8004b6a:	e7f2      	b.n	8004b52 <_printf_float+0x40e>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	4642      	mov	r2, r8
 8004b70:	e7df      	b.n	8004b32 <_printf_float+0x3ee>
 8004b72:	2301      	movs	r3, #1
 8004b74:	464a      	mov	r2, r9
 8004b76:	4631      	mov	r1, r6
 8004b78:	4628      	mov	r0, r5
 8004b7a:	47b8      	blx	r7
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	f43f ae3c 	beq.w	80047fa <_printf_float+0xb6>
 8004b82:	f108 0801 	add.w	r8, r8, #1
 8004b86:	68e3      	ldr	r3, [r4, #12]
 8004b88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b8a:	1a5b      	subs	r3, r3, r1
 8004b8c:	4543      	cmp	r3, r8
 8004b8e:	dcf0      	bgt.n	8004b72 <_printf_float+0x42e>
 8004b90:	e6fd      	b.n	800498e <_printf_float+0x24a>
 8004b92:	f04f 0800 	mov.w	r8, #0
 8004b96:	f104 0919 	add.w	r9, r4, #25
 8004b9a:	e7f4      	b.n	8004b86 <_printf_float+0x442>

08004b9c <_printf_common>:
 8004b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba0:	4616      	mov	r6, r2
 8004ba2:	4699      	mov	r9, r3
 8004ba4:	688a      	ldr	r2, [r1, #8]
 8004ba6:	690b      	ldr	r3, [r1, #16]
 8004ba8:	4607      	mov	r7, r0
 8004baa:	4293      	cmp	r3, r2
 8004bac:	bfb8      	it	lt
 8004bae:	4613      	movlt	r3, r2
 8004bb0:	6033      	str	r3, [r6, #0]
 8004bb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bbc:	b10a      	cbz	r2, 8004bc2 <_printf_common+0x26>
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	6033      	str	r3, [r6, #0]
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	0699      	lsls	r1, r3, #26
 8004bc6:	bf42      	ittt	mi
 8004bc8:	6833      	ldrmi	r3, [r6, #0]
 8004bca:	3302      	addmi	r3, #2
 8004bcc:	6033      	strmi	r3, [r6, #0]
 8004bce:	6825      	ldr	r5, [r4, #0]
 8004bd0:	f015 0506 	ands.w	r5, r5, #6
 8004bd4:	d106      	bne.n	8004be4 <_printf_common+0x48>
 8004bd6:	f104 0a19 	add.w	sl, r4, #25
 8004bda:	68e3      	ldr	r3, [r4, #12]
 8004bdc:	6832      	ldr	r2, [r6, #0]
 8004bde:	1a9b      	subs	r3, r3, r2
 8004be0:	42ab      	cmp	r3, r5
 8004be2:	dc28      	bgt.n	8004c36 <_printf_common+0x9a>
 8004be4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004be8:	1e13      	subs	r3, r2, #0
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	bf18      	it	ne
 8004bee:	2301      	movne	r3, #1
 8004bf0:	0692      	lsls	r2, r2, #26
 8004bf2:	d42d      	bmi.n	8004c50 <_printf_common+0xb4>
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	4638      	mov	r0, r7
 8004bf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bfc:	47c0      	blx	r8
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d020      	beq.n	8004c44 <_printf_common+0xa8>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	68e5      	ldr	r5, [r4, #12]
 8004c06:	f003 0306 	and.w	r3, r3, #6
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	bf18      	it	ne
 8004c0e:	2500      	movne	r5, #0
 8004c10:	6832      	ldr	r2, [r6, #0]
 8004c12:	f04f 0600 	mov.w	r6, #0
 8004c16:	68a3      	ldr	r3, [r4, #8]
 8004c18:	bf08      	it	eq
 8004c1a:	1aad      	subeq	r5, r5, r2
 8004c1c:	6922      	ldr	r2, [r4, #16]
 8004c1e:	bf08      	it	eq
 8004c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c24:	4293      	cmp	r3, r2
 8004c26:	bfc4      	itt	gt
 8004c28:	1a9b      	subgt	r3, r3, r2
 8004c2a:	18ed      	addgt	r5, r5, r3
 8004c2c:	341a      	adds	r4, #26
 8004c2e:	42b5      	cmp	r5, r6
 8004c30:	d11a      	bne.n	8004c68 <_printf_common+0xcc>
 8004c32:	2000      	movs	r0, #0
 8004c34:	e008      	b.n	8004c48 <_printf_common+0xac>
 8004c36:	2301      	movs	r3, #1
 8004c38:	4652      	mov	r2, sl
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	47c0      	blx	r8
 8004c40:	3001      	adds	r0, #1
 8004c42:	d103      	bne.n	8004c4c <_printf_common+0xb0>
 8004c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c4c:	3501      	adds	r5, #1
 8004c4e:	e7c4      	b.n	8004bda <_printf_common+0x3e>
 8004c50:	2030      	movs	r0, #48	; 0x30
 8004c52:	18e1      	adds	r1, r4, r3
 8004c54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c5e:	4422      	add	r2, r4
 8004c60:	3302      	adds	r3, #2
 8004c62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c66:	e7c5      	b.n	8004bf4 <_printf_common+0x58>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	4649      	mov	r1, r9
 8004c6e:	4638      	mov	r0, r7
 8004c70:	47c0      	blx	r8
 8004c72:	3001      	adds	r0, #1
 8004c74:	d0e6      	beq.n	8004c44 <_printf_common+0xa8>
 8004c76:	3601      	adds	r6, #1
 8004c78:	e7d9      	b.n	8004c2e <_printf_common+0x92>
	...

08004c7c <_printf_i>:
 8004c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c80:	7e0f      	ldrb	r7, [r1, #24]
 8004c82:	4691      	mov	r9, r2
 8004c84:	2f78      	cmp	r7, #120	; 0x78
 8004c86:	4680      	mov	r8, r0
 8004c88:	460c      	mov	r4, r1
 8004c8a:	469a      	mov	sl, r3
 8004c8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c92:	d807      	bhi.n	8004ca4 <_printf_i+0x28>
 8004c94:	2f62      	cmp	r7, #98	; 0x62
 8004c96:	d80a      	bhi.n	8004cae <_printf_i+0x32>
 8004c98:	2f00      	cmp	r7, #0
 8004c9a:	f000 80d9 	beq.w	8004e50 <_printf_i+0x1d4>
 8004c9e:	2f58      	cmp	r7, #88	; 0x58
 8004ca0:	f000 80a4 	beq.w	8004dec <_printf_i+0x170>
 8004ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cac:	e03a      	b.n	8004d24 <_printf_i+0xa8>
 8004cae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cb2:	2b15      	cmp	r3, #21
 8004cb4:	d8f6      	bhi.n	8004ca4 <_printf_i+0x28>
 8004cb6:	a101      	add	r1, pc, #4	; (adr r1, 8004cbc <_printf_i+0x40>)
 8004cb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cbc:	08004d15 	.word	0x08004d15
 8004cc0:	08004d29 	.word	0x08004d29
 8004cc4:	08004ca5 	.word	0x08004ca5
 8004cc8:	08004ca5 	.word	0x08004ca5
 8004ccc:	08004ca5 	.word	0x08004ca5
 8004cd0:	08004ca5 	.word	0x08004ca5
 8004cd4:	08004d29 	.word	0x08004d29
 8004cd8:	08004ca5 	.word	0x08004ca5
 8004cdc:	08004ca5 	.word	0x08004ca5
 8004ce0:	08004ca5 	.word	0x08004ca5
 8004ce4:	08004ca5 	.word	0x08004ca5
 8004ce8:	08004e37 	.word	0x08004e37
 8004cec:	08004d59 	.word	0x08004d59
 8004cf0:	08004e19 	.word	0x08004e19
 8004cf4:	08004ca5 	.word	0x08004ca5
 8004cf8:	08004ca5 	.word	0x08004ca5
 8004cfc:	08004e59 	.word	0x08004e59
 8004d00:	08004ca5 	.word	0x08004ca5
 8004d04:	08004d59 	.word	0x08004d59
 8004d08:	08004ca5 	.word	0x08004ca5
 8004d0c:	08004ca5 	.word	0x08004ca5
 8004d10:	08004e21 	.word	0x08004e21
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	1d1a      	adds	r2, r3, #4
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	602a      	str	r2, [r5, #0]
 8004d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0a4      	b.n	8004e72 <_printf_i+0x1f6>
 8004d28:	6820      	ldr	r0, [r4, #0]
 8004d2a:	6829      	ldr	r1, [r5, #0]
 8004d2c:	0606      	lsls	r6, r0, #24
 8004d2e:	f101 0304 	add.w	r3, r1, #4
 8004d32:	d50a      	bpl.n	8004d4a <_printf_i+0xce>
 8004d34:	680e      	ldr	r6, [r1, #0]
 8004d36:	602b      	str	r3, [r5, #0]
 8004d38:	2e00      	cmp	r6, #0
 8004d3a:	da03      	bge.n	8004d44 <_printf_i+0xc8>
 8004d3c:	232d      	movs	r3, #45	; 0x2d
 8004d3e:	4276      	negs	r6, r6
 8004d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d44:	230a      	movs	r3, #10
 8004d46:	485e      	ldr	r0, [pc, #376]	; (8004ec0 <_printf_i+0x244>)
 8004d48:	e019      	b.n	8004d7e <_printf_i+0x102>
 8004d4a:	680e      	ldr	r6, [r1, #0]
 8004d4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d50:	602b      	str	r3, [r5, #0]
 8004d52:	bf18      	it	ne
 8004d54:	b236      	sxthne	r6, r6
 8004d56:	e7ef      	b.n	8004d38 <_printf_i+0xbc>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	6820      	ldr	r0, [r4, #0]
 8004d5c:	1d19      	adds	r1, r3, #4
 8004d5e:	6029      	str	r1, [r5, #0]
 8004d60:	0601      	lsls	r1, r0, #24
 8004d62:	d501      	bpl.n	8004d68 <_printf_i+0xec>
 8004d64:	681e      	ldr	r6, [r3, #0]
 8004d66:	e002      	b.n	8004d6e <_printf_i+0xf2>
 8004d68:	0646      	lsls	r6, r0, #25
 8004d6a:	d5fb      	bpl.n	8004d64 <_printf_i+0xe8>
 8004d6c:	881e      	ldrh	r6, [r3, #0]
 8004d6e:	2f6f      	cmp	r7, #111	; 0x6f
 8004d70:	bf0c      	ite	eq
 8004d72:	2308      	moveq	r3, #8
 8004d74:	230a      	movne	r3, #10
 8004d76:	4852      	ldr	r0, [pc, #328]	; (8004ec0 <_printf_i+0x244>)
 8004d78:	2100      	movs	r1, #0
 8004d7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d7e:	6865      	ldr	r5, [r4, #4]
 8004d80:	2d00      	cmp	r5, #0
 8004d82:	bfa8      	it	ge
 8004d84:	6821      	ldrge	r1, [r4, #0]
 8004d86:	60a5      	str	r5, [r4, #8]
 8004d88:	bfa4      	itt	ge
 8004d8a:	f021 0104 	bicge.w	r1, r1, #4
 8004d8e:	6021      	strge	r1, [r4, #0]
 8004d90:	b90e      	cbnz	r6, 8004d96 <_printf_i+0x11a>
 8004d92:	2d00      	cmp	r5, #0
 8004d94:	d04d      	beq.n	8004e32 <_printf_i+0x1b6>
 8004d96:	4615      	mov	r5, r2
 8004d98:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d9c:	fb03 6711 	mls	r7, r3, r1, r6
 8004da0:	5dc7      	ldrb	r7, [r0, r7]
 8004da2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004da6:	4637      	mov	r7, r6
 8004da8:	42bb      	cmp	r3, r7
 8004daa:	460e      	mov	r6, r1
 8004dac:	d9f4      	bls.n	8004d98 <_printf_i+0x11c>
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	d10b      	bne.n	8004dca <_printf_i+0x14e>
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	07de      	lsls	r6, r3, #31
 8004db6:	d508      	bpl.n	8004dca <_printf_i+0x14e>
 8004db8:	6923      	ldr	r3, [r4, #16]
 8004dba:	6861      	ldr	r1, [r4, #4]
 8004dbc:	4299      	cmp	r1, r3
 8004dbe:	bfde      	ittt	le
 8004dc0:	2330      	movle	r3, #48	; 0x30
 8004dc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004dc6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004dca:	1b52      	subs	r2, r2, r5
 8004dcc:	6122      	str	r2, [r4, #16]
 8004dce:	464b      	mov	r3, r9
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	f8cd a000 	str.w	sl, [sp]
 8004dd8:	aa03      	add	r2, sp, #12
 8004dda:	f7ff fedf 	bl	8004b9c <_printf_common>
 8004dde:	3001      	adds	r0, #1
 8004de0:	d14c      	bne.n	8004e7c <_printf_i+0x200>
 8004de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004de6:	b004      	add	sp, #16
 8004de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dec:	4834      	ldr	r0, [pc, #208]	; (8004ec0 <_printf_i+0x244>)
 8004dee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004df2:	6829      	ldr	r1, [r5, #0]
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	f851 6b04 	ldr.w	r6, [r1], #4
 8004dfa:	6029      	str	r1, [r5, #0]
 8004dfc:	061d      	lsls	r5, r3, #24
 8004dfe:	d514      	bpl.n	8004e2a <_printf_i+0x1ae>
 8004e00:	07df      	lsls	r7, r3, #31
 8004e02:	bf44      	itt	mi
 8004e04:	f043 0320 	orrmi.w	r3, r3, #32
 8004e08:	6023      	strmi	r3, [r4, #0]
 8004e0a:	b91e      	cbnz	r6, 8004e14 <_printf_i+0x198>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	f023 0320 	bic.w	r3, r3, #32
 8004e12:	6023      	str	r3, [r4, #0]
 8004e14:	2310      	movs	r3, #16
 8004e16:	e7af      	b.n	8004d78 <_printf_i+0xfc>
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	f043 0320 	orr.w	r3, r3, #32
 8004e1e:	6023      	str	r3, [r4, #0]
 8004e20:	2378      	movs	r3, #120	; 0x78
 8004e22:	4828      	ldr	r0, [pc, #160]	; (8004ec4 <_printf_i+0x248>)
 8004e24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e28:	e7e3      	b.n	8004df2 <_printf_i+0x176>
 8004e2a:	0659      	lsls	r1, r3, #25
 8004e2c:	bf48      	it	mi
 8004e2e:	b2b6      	uxthmi	r6, r6
 8004e30:	e7e6      	b.n	8004e00 <_printf_i+0x184>
 8004e32:	4615      	mov	r5, r2
 8004e34:	e7bb      	b.n	8004dae <_printf_i+0x132>
 8004e36:	682b      	ldr	r3, [r5, #0]
 8004e38:	6826      	ldr	r6, [r4, #0]
 8004e3a:	1d18      	adds	r0, r3, #4
 8004e3c:	6961      	ldr	r1, [r4, #20]
 8004e3e:	6028      	str	r0, [r5, #0]
 8004e40:	0635      	lsls	r5, r6, #24
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	d501      	bpl.n	8004e4a <_printf_i+0x1ce>
 8004e46:	6019      	str	r1, [r3, #0]
 8004e48:	e002      	b.n	8004e50 <_printf_i+0x1d4>
 8004e4a:	0670      	lsls	r0, r6, #25
 8004e4c:	d5fb      	bpl.n	8004e46 <_printf_i+0x1ca>
 8004e4e:	8019      	strh	r1, [r3, #0]
 8004e50:	2300      	movs	r3, #0
 8004e52:	4615      	mov	r5, r2
 8004e54:	6123      	str	r3, [r4, #16]
 8004e56:	e7ba      	b.n	8004dce <_printf_i+0x152>
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	1d1a      	adds	r2, r3, #4
 8004e5e:	602a      	str	r2, [r5, #0]
 8004e60:	681d      	ldr	r5, [r3, #0]
 8004e62:	6862      	ldr	r2, [r4, #4]
 8004e64:	4628      	mov	r0, r5
 8004e66:	f002 faed 	bl	8007444 <memchr>
 8004e6a:	b108      	cbz	r0, 8004e70 <_printf_i+0x1f4>
 8004e6c:	1b40      	subs	r0, r0, r5
 8004e6e:	6060      	str	r0, [r4, #4]
 8004e70:	6863      	ldr	r3, [r4, #4]
 8004e72:	6123      	str	r3, [r4, #16]
 8004e74:	2300      	movs	r3, #0
 8004e76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e7a:	e7a8      	b.n	8004dce <_printf_i+0x152>
 8004e7c:	462a      	mov	r2, r5
 8004e7e:	4649      	mov	r1, r9
 8004e80:	4640      	mov	r0, r8
 8004e82:	6923      	ldr	r3, [r4, #16]
 8004e84:	47d0      	blx	sl
 8004e86:	3001      	adds	r0, #1
 8004e88:	d0ab      	beq.n	8004de2 <_printf_i+0x166>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	079b      	lsls	r3, r3, #30
 8004e8e:	d413      	bmi.n	8004eb8 <_printf_i+0x23c>
 8004e90:	68e0      	ldr	r0, [r4, #12]
 8004e92:	9b03      	ldr	r3, [sp, #12]
 8004e94:	4298      	cmp	r0, r3
 8004e96:	bfb8      	it	lt
 8004e98:	4618      	movlt	r0, r3
 8004e9a:	e7a4      	b.n	8004de6 <_printf_i+0x16a>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	4632      	mov	r2, r6
 8004ea0:	4649      	mov	r1, r9
 8004ea2:	4640      	mov	r0, r8
 8004ea4:	47d0      	blx	sl
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d09b      	beq.n	8004de2 <_printf_i+0x166>
 8004eaa:	3501      	adds	r5, #1
 8004eac:	68e3      	ldr	r3, [r4, #12]
 8004eae:	9903      	ldr	r1, [sp, #12]
 8004eb0:	1a5b      	subs	r3, r3, r1
 8004eb2:	42ab      	cmp	r3, r5
 8004eb4:	dcf2      	bgt.n	8004e9c <_printf_i+0x220>
 8004eb6:	e7eb      	b.n	8004e90 <_printf_i+0x214>
 8004eb8:	2500      	movs	r5, #0
 8004eba:	f104 0619 	add.w	r6, r4, #25
 8004ebe:	e7f5      	b.n	8004eac <_printf_i+0x230>
 8004ec0:	0800964e 	.word	0x0800964e
 8004ec4:	0800965f 	.word	0x0800965f

08004ec8 <_scanf_float>:
 8004ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ecc:	b087      	sub	sp, #28
 8004ece:	9303      	str	r3, [sp, #12]
 8004ed0:	688b      	ldr	r3, [r1, #8]
 8004ed2:	4617      	mov	r7, r2
 8004ed4:	1e5a      	subs	r2, r3, #1
 8004ed6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004eda:	bf85      	ittet	hi
 8004edc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004ee0:	195b      	addhi	r3, r3, r5
 8004ee2:	2300      	movls	r3, #0
 8004ee4:	9302      	strhi	r3, [sp, #8]
 8004ee6:	bf88      	it	hi
 8004ee8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004eec:	468b      	mov	fp, r1
 8004eee:	f04f 0500 	mov.w	r5, #0
 8004ef2:	bf8c      	ite	hi
 8004ef4:	608b      	strhi	r3, [r1, #8]
 8004ef6:	9302      	strls	r3, [sp, #8]
 8004ef8:	680b      	ldr	r3, [r1, #0]
 8004efa:	4680      	mov	r8, r0
 8004efc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004f00:	f84b 3b1c 	str.w	r3, [fp], #28
 8004f04:	460c      	mov	r4, r1
 8004f06:	465e      	mov	r6, fp
 8004f08:	46aa      	mov	sl, r5
 8004f0a:	46a9      	mov	r9, r5
 8004f0c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004f10:	9501      	str	r5, [sp, #4]
 8004f12:	68a2      	ldr	r2, [r4, #8]
 8004f14:	b152      	cbz	r2, 8004f2c <_scanf_float+0x64>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b4e      	cmp	r3, #78	; 0x4e
 8004f1c:	d864      	bhi.n	8004fe8 <_scanf_float+0x120>
 8004f1e:	2b40      	cmp	r3, #64	; 0x40
 8004f20:	d83c      	bhi.n	8004f9c <_scanf_float+0xd4>
 8004f22:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004f26:	b2c8      	uxtb	r0, r1
 8004f28:	280e      	cmp	r0, #14
 8004f2a:	d93a      	bls.n	8004fa2 <_scanf_float+0xda>
 8004f2c:	f1b9 0f00 	cmp.w	r9, #0
 8004f30:	d003      	beq.n	8004f3a <_scanf_float+0x72>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004f3e:	f1ba 0f01 	cmp.w	sl, #1
 8004f42:	f200 8113 	bhi.w	800516c <_scanf_float+0x2a4>
 8004f46:	455e      	cmp	r6, fp
 8004f48:	f200 8105 	bhi.w	8005156 <_scanf_float+0x28e>
 8004f4c:	2501      	movs	r5, #1
 8004f4e:	4628      	mov	r0, r5
 8004f50:	b007      	add	sp, #28
 8004f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f56:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004f5a:	2a0d      	cmp	r2, #13
 8004f5c:	d8e6      	bhi.n	8004f2c <_scanf_float+0x64>
 8004f5e:	a101      	add	r1, pc, #4	; (adr r1, 8004f64 <_scanf_float+0x9c>)
 8004f60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004f64:	080050a3 	.word	0x080050a3
 8004f68:	08004f2d 	.word	0x08004f2d
 8004f6c:	08004f2d 	.word	0x08004f2d
 8004f70:	08004f2d 	.word	0x08004f2d
 8004f74:	08005103 	.word	0x08005103
 8004f78:	080050db 	.word	0x080050db
 8004f7c:	08004f2d 	.word	0x08004f2d
 8004f80:	08004f2d 	.word	0x08004f2d
 8004f84:	080050b1 	.word	0x080050b1
 8004f88:	08004f2d 	.word	0x08004f2d
 8004f8c:	08004f2d 	.word	0x08004f2d
 8004f90:	08004f2d 	.word	0x08004f2d
 8004f94:	08004f2d 	.word	0x08004f2d
 8004f98:	08005069 	.word	0x08005069
 8004f9c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004fa0:	e7db      	b.n	8004f5a <_scanf_float+0x92>
 8004fa2:	290e      	cmp	r1, #14
 8004fa4:	d8c2      	bhi.n	8004f2c <_scanf_float+0x64>
 8004fa6:	a001      	add	r0, pc, #4	; (adr r0, 8004fac <_scanf_float+0xe4>)
 8004fa8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004fac:	0800505b 	.word	0x0800505b
 8004fb0:	08004f2d 	.word	0x08004f2d
 8004fb4:	0800505b 	.word	0x0800505b
 8004fb8:	080050ef 	.word	0x080050ef
 8004fbc:	08004f2d 	.word	0x08004f2d
 8004fc0:	08005009 	.word	0x08005009
 8004fc4:	08005045 	.word	0x08005045
 8004fc8:	08005045 	.word	0x08005045
 8004fcc:	08005045 	.word	0x08005045
 8004fd0:	08005045 	.word	0x08005045
 8004fd4:	08005045 	.word	0x08005045
 8004fd8:	08005045 	.word	0x08005045
 8004fdc:	08005045 	.word	0x08005045
 8004fe0:	08005045 	.word	0x08005045
 8004fe4:	08005045 	.word	0x08005045
 8004fe8:	2b6e      	cmp	r3, #110	; 0x6e
 8004fea:	d809      	bhi.n	8005000 <_scanf_float+0x138>
 8004fec:	2b60      	cmp	r3, #96	; 0x60
 8004fee:	d8b2      	bhi.n	8004f56 <_scanf_float+0x8e>
 8004ff0:	2b54      	cmp	r3, #84	; 0x54
 8004ff2:	d077      	beq.n	80050e4 <_scanf_float+0x21c>
 8004ff4:	2b59      	cmp	r3, #89	; 0x59
 8004ff6:	d199      	bne.n	8004f2c <_scanf_float+0x64>
 8004ff8:	2d07      	cmp	r5, #7
 8004ffa:	d197      	bne.n	8004f2c <_scanf_float+0x64>
 8004ffc:	2508      	movs	r5, #8
 8004ffe:	e029      	b.n	8005054 <_scanf_float+0x18c>
 8005000:	2b74      	cmp	r3, #116	; 0x74
 8005002:	d06f      	beq.n	80050e4 <_scanf_float+0x21c>
 8005004:	2b79      	cmp	r3, #121	; 0x79
 8005006:	e7f6      	b.n	8004ff6 <_scanf_float+0x12e>
 8005008:	6821      	ldr	r1, [r4, #0]
 800500a:	05c8      	lsls	r0, r1, #23
 800500c:	d51a      	bpl.n	8005044 <_scanf_float+0x17c>
 800500e:	9b02      	ldr	r3, [sp, #8]
 8005010:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005014:	6021      	str	r1, [r4, #0]
 8005016:	f109 0901 	add.w	r9, r9, #1
 800501a:	b11b      	cbz	r3, 8005024 <_scanf_float+0x15c>
 800501c:	3b01      	subs	r3, #1
 800501e:	3201      	adds	r2, #1
 8005020:	9302      	str	r3, [sp, #8]
 8005022:	60a2      	str	r2, [r4, #8]
 8005024:	68a3      	ldr	r3, [r4, #8]
 8005026:	3b01      	subs	r3, #1
 8005028:	60a3      	str	r3, [r4, #8]
 800502a:	6923      	ldr	r3, [r4, #16]
 800502c:	3301      	adds	r3, #1
 800502e:	6123      	str	r3, [r4, #16]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3b01      	subs	r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	607b      	str	r3, [r7, #4]
 8005038:	f340 8084 	ble.w	8005144 <_scanf_float+0x27c>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	3301      	adds	r3, #1
 8005040:	603b      	str	r3, [r7, #0]
 8005042:	e766      	b.n	8004f12 <_scanf_float+0x4a>
 8005044:	eb1a 0f05 	cmn.w	sl, r5
 8005048:	f47f af70 	bne.w	8004f2c <_scanf_float+0x64>
 800504c:	6822      	ldr	r2, [r4, #0]
 800504e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005052:	6022      	str	r2, [r4, #0]
 8005054:	f806 3b01 	strb.w	r3, [r6], #1
 8005058:	e7e4      	b.n	8005024 <_scanf_float+0x15c>
 800505a:	6822      	ldr	r2, [r4, #0]
 800505c:	0610      	lsls	r0, r2, #24
 800505e:	f57f af65 	bpl.w	8004f2c <_scanf_float+0x64>
 8005062:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005066:	e7f4      	b.n	8005052 <_scanf_float+0x18a>
 8005068:	f1ba 0f00 	cmp.w	sl, #0
 800506c:	d10e      	bne.n	800508c <_scanf_float+0x1c4>
 800506e:	f1b9 0f00 	cmp.w	r9, #0
 8005072:	d10e      	bne.n	8005092 <_scanf_float+0x1ca>
 8005074:	6822      	ldr	r2, [r4, #0]
 8005076:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800507a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800507e:	d108      	bne.n	8005092 <_scanf_float+0x1ca>
 8005080:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005084:	f04f 0a01 	mov.w	sl, #1
 8005088:	6022      	str	r2, [r4, #0]
 800508a:	e7e3      	b.n	8005054 <_scanf_float+0x18c>
 800508c:	f1ba 0f02 	cmp.w	sl, #2
 8005090:	d055      	beq.n	800513e <_scanf_float+0x276>
 8005092:	2d01      	cmp	r5, #1
 8005094:	d002      	beq.n	800509c <_scanf_float+0x1d4>
 8005096:	2d04      	cmp	r5, #4
 8005098:	f47f af48 	bne.w	8004f2c <_scanf_float+0x64>
 800509c:	3501      	adds	r5, #1
 800509e:	b2ed      	uxtb	r5, r5
 80050a0:	e7d8      	b.n	8005054 <_scanf_float+0x18c>
 80050a2:	f1ba 0f01 	cmp.w	sl, #1
 80050a6:	f47f af41 	bne.w	8004f2c <_scanf_float+0x64>
 80050aa:	f04f 0a02 	mov.w	sl, #2
 80050ae:	e7d1      	b.n	8005054 <_scanf_float+0x18c>
 80050b0:	b97d      	cbnz	r5, 80050d2 <_scanf_float+0x20a>
 80050b2:	f1b9 0f00 	cmp.w	r9, #0
 80050b6:	f47f af3c 	bne.w	8004f32 <_scanf_float+0x6a>
 80050ba:	6822      	ldr	r2, [r4, #0]
 80050bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80050c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80050c4:	f47f af39 	bne.w	8004f3a <_scanf_float+0x72>
 80050c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80050cc:	2501      	movs	r5, #1
 80050ce:	6022      	str	r2, [r4, #0]
 80050d0:	e7c0      	b.n	8005054 <_scanf_float+0x18c>
 80050d2:	2d03      	cmp	r5, #3
 80050d4:	d0e2      	beq.n	800509c <_scanf_float+0x1d4>
 80050d6:	2d05      	cmp	r5, #5
 80050d8:	e7de      	b.n	8005098 <_scanf_float+0x1d0>
 80050da:	2d02      	cmp	r5, #2
 80050dc:	f47f af26 	bne.w	8004f2c <_scanf_float+0x64>
 80050e0:	2503      	movs	r5, #3
 80050e2:	e7b7      	b.n	8005054 <_scanf_float+0x18c>
 80050e4:	2d06      	cmp	r5, #6
 80050e6:	f47f af21 	bne.w	8004f2c <_scanf_float+0x64>
 80050ea:	2507      	movs	r5, #7
 80050ec:	e7b2      	b.n	8005054 <_scanf_float+0x18c>
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	0591      	lsls	r1, r2, #22
 80050f2:	f57f af1b 	bpl.w	8004f2c <_scanf_float+0x64>
 80050f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80050fa:	6022      	str	r2, [r4, #0]
 80050fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005100:	e7a8      	b.n	8005054 <_scanf_float+0x18c>
 8005102:	6822      	ldr	r2, [r4, #0]
 8005104:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005108:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800510c:	d006      	beq.n	800511c <_scanf_float+0x254>
 800510e:	0550      	lsls	r0, r2, #21
 8005110:	f57f af0c 	bpl.w	8004f2c <_scanf_float+0x64>
 8005114:	f1b9 0f00 	cmp.w	r9, #0
 8005118:	f43f af0f 	beq.w	8004f3a <_scanf_float+0x72>
 800511c:	0591      	lsls	r1, r2, #22
 800511e:	bf58      	it	pl
 8005120:	9901      	ldrpl	r1, [sp, #4]
 8005122:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005126:	bf58      	it	pl
 8005128:	eba9 0101 	subpl.w	r1, r9, r1
 800512c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005130:	f04f 0900 	mov.w	r9, #0
 8005134:	bf58      	it	pl
 8005136:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800513a:	6022      	str	r2, [r4, #0]
 800513c:	e78a      	b.n	8005054 <_scanf_float+0x18c>
 800513e:	f04f 0a03 	mov.w	sl, #3
 8005142:	e787      	b.n	8005054 <_scanf_float+0x18c>
 8005144:	4639      	mov	r1, r7
 8005146:	4640      	mov	r0, r8
 8005148:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800514c:	4798      	blx	r3
 800514e:	2800      	cmp	r0, #0
 8005150:	f43f aedf 	beq.w	8004f12 <_scanf_float+0x4a>
 8005154:	e6ea      	b.n	8004f2c <_scanf_float+0x64>
 8005156:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800515a:	463a      	mov	r2, r7
 800515c:	4640      	mov	r0, r8
 800515e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005162:	4798      	blx	r3
 8005164:	6923      	ldr	r3, [r4, #16]
 8005166:	3b01      	subs	r3, #1
 8005168:	6123      	str	r3, [r4, #16]
 800516a:	e6ec      	b.n	8004f46 <_scanf_float+0x7e>
 800516c:	1e6b      	subs	r3, r5, #1
 800516e:	2b06      	cmp	r3, #6
 8005170:	d825      	bhi.n	80051be <_scanf_float+0x2f6>
 8005172:	2d02      	cmp	r5, #2
 8005174:	d836      	bhi.n	80051e4 <_scanf_float+0x31c>
 8005176:	455e      	cmp	r6, fp
 8005178:	f67f aee8 	bls.w	8004f4c <_scanf_float+0x84>
 800517c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005180:	463a      	mov	r2, r7
 8005182:	4640      	mov	r0, r8
 8005184:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005188:	4798      	blx	r3
 800518a:	6923      	ldr	r3, [r4, #16]
 800518c:	3b01      	subs	r3, #1
 800518e:	6123      	str	r3, [r4, #16]
 8005190:	e7f1      	b.n	8005176 <_scanf_float+0x2ae>
 8005192:	9802      	ldr	r0, [sp, #8]
 8005194:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005198:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800519c:	463a      	mov	r2, r7
 800519e:	9002      	str	r0, [sp, #8]
 80051a0:	4640      	mov	r0, r8
 80051a2:	4798      	blx	r3
 80051a4:	6923      	ldr	r3, [r4, #16]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	6123      	str	r3, [r4, #16]
 80051aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80051ae:	fa5f fa8a 	uxtb.w	sl, sl
 80051b2:	f1ba 0f02 	cmp.w	sl, #2
 80051b6:	d1ec      	bne.n	8005192 <_scanf_float+0x2ca>
 80051b8:	3d03      	subs	r5, #3
 80051ba:	b2ed      	uxtb	r5, r5
 80051bc:	1b76      	subs	r6, r6, r5
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	05da      	lsls	r2, r3, #23
 80051c2:	d52f      	bpl.n	8005224 <_scanf_float+0x35c>
 80051c4:	055b      	lsls	r3, r3, #21
 80051c6:	d510      	bpl.n	80051ea <_scanf_float+0x322>
 80051c8:	455e      	cmp	r6, fp
 80051ca:	f67f aebf 	bls.w	8004f4c <_scanf_float+0x84>
 80051ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051d2:	463a      	mov	r2, r7
 80051d4:	4640      	mov	r0, r8
 80051d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80051da:	4798      	blx	r3
 80051dc:	6923      	ldr	r3, [r4, #16]
 80051de:	3b01      	subs	r3, #1
 80051e0:	6123      	str	r3, [r4, #16]
 80051e2:	e7f1      	b.n	80051c8 <_scanf_float+0x300>
 80051e4:	46aa      	mov	sl, r5
 80051e6:	9602      	str	r6, [sp, #8]
 80051e8:	e7df      	b.n	80051aa <_scanf_float+0x2e2>
 80051ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80051ee:	6923      	ldr	r3, [r4, #16]
 80051f0:	2965      	cmp	r1, #101	; 0x65
 80051f2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80051f6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80051fa:	6123      	str	r3, [r4, #16]
 80051fc:	d00c      	beq.n	8005218 <_scanf_float+0x350>
 80051fe:	2945      	cmp	r1, #69	; 0x45
 8005200:	d00a      	beq.n	8005218 <_scanf_float+0x350>
 8005202:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005206:	463a      	mov	r2, r7
 8005208:	4640      	mov	r0, r8
 800520a:	4798      	blx	r3
 800520c:	6923      	ldr	r3, [r4, #16]
 800520e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005212:	3b01      	subs	r3, #1
 8005214:	1eb5      	subs	r5, r6, #2
 8005216:	6123      	str	r3, [r4, #16]
 8005218:	463a      	mov	r2, r7
 800521a:	4640      	mov	r0, r8
 800521c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005220:	4798      	blx	r3
 8005222:	462e      	mov	r6, r5
 8005224:	6825      	ldr	r5, [r4, #0]
 8005226:	f015 0510 	ands.w	r5, r5, #16
 800522a:	d155      	bne.n	80052d8 <_scanf_float+0x410>
 800522c:	7035      	strb	r5, [r6, #0]
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005238:	d11b      	bne.n	8005272 <_scanf_float+0x3aa>
 800523a:	9b01      	ldr	r3, [sp, #4]
 800523c:	454b      	cmp	r3, r9
 800523e:	eba3 0209 	sub.w	r2, r3, r9
 8005242:	d123      	bne.n	800528c <_scanf_float+0x3c4>
 8005244:	2200      	movs	r2, #0
 8005246:	4659      	mov	r1, fp
 8005248:	4640      	mov	r0, r8
 800524a:	f000 fe79 	bl	8005f40 <_strtod_r>
 800524e:	6822      	ldr	r2, [r4, #0]
 8005250:	9b03      	ldr	r3, [sp, #12]
 8005252:	f012 0f02 	tst.w	r2, #2
 8005256:	4606      	mov	r6, r0
 8005258:	460f      	mov	r7, r1
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	d021      	beq.n	80052a2 <_scanf_float+0x3da>
 800525e:	1d1a      	adds	r2, r3, #4
 8005260:	9903      	ldr	r1, [sp, #12]
 8005262:	600a      	str	r2, [r1, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	e9c3 6700 	strd	r6, r7, [r3]
 800526a:	68e3      	ldr	r3, [r4, #12]
 800526c:	3301      	adds	r3, #1
 800526e:	60e3      	str	r3, [r4, #12]
 8005270:	e66d      	b.n	8004f4e <_scanf_float+0x86>
 8005272:	9b04      	ldr	r3, [sp, #16]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0e5      	beq.n	8005244 <_scanf_float+0x37c>
 8005278:	9905      	ldr	r1, [sp, #20]
 800527a:	230a      	movs	r3, #10
 800527c:	462a      	mov	r2, r5
 800527e:	4640      	mov	r0, r8
 8005280:	3101      	adds	r1, #1
 8005282:	f000 fedf 	bl	8006044 <_strtol_r>
 8005286:	9b04      	ldr	r3, [sp, #16]
 8005288:	9e05      	ldr	r6, [sp, #20]
 800528a:	1ac2      	subs	r2, r0, r3
 800528c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005290:	429e      	cmp	r6, r3
 8005292:	bf28      	it	cs
 8005294:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005298:	4630      	mov	r0, r6
 800529a:	4910      	ldr	r1, [pc, #64]	; (80052dc <_scanf_float+0x414>)
 800529c:	f000 f826 	bl	80052ec <siprintf>
 80052a0:	e7d0      	b.n	8005244 <_scanf_float+0x37c>
 80052a2:	f012 0f04 	tst.w	r2, #4
 80052a6:	f103 0204 	add.w	r2, r3, #4
 80052aa:	d1d9      	bne.n	8005260 <_scanf_float+0x398>
 80052ac:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80052b0:	f8cc 2000 	str.w	r2, [ip]
 80052b4:	f8d3 8000 	ldr.w	r8, [r3]
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	f7fb fba6 	bl	8000a0c <__aeabi_dcmpun>
 80052c0:	b128      	cbz	r0, 80052ce <_scanf_float+0x406>
 80052c2:	4807      	ldr	r0, [pc, #28]	; (80052e0 <_scanf_float+0x418>)
 80052c4:	f000 f80e 	bl	80052e4 <nanf>
 80052c8:	f8c8 0000 	str.w	r0, [r8]
 80052cc:	e7cd      	b.n	800526a <_scanf_float+0x3a2>
 80052ce:	4630      	mov	r0, r6
 80052d0:	4639      	mov	r1, r7
 80052d2:	f7fb fbf9 	bl	8000ac8 <__aeabi_d2f>
 80052d6:	e7f7      	b.n	80052c8 <_scanf_float+0x400>
 80052d8:	2500      	movs	r5, #0
 80052da:	e638      	b.n	8004f4e <_scanf_float+0x86>
 80052dc:	08009670 	.word	0x08009670
 80052e0:	08009a78 	.word	0x08009a78

080052e4 <nanf>:
 80052e4:	4800      	ldr	r0, [pc, #0]	; (80052e8 <nanf+0x4>)
 80052e6:	4770      	bx	lr
 80052e8:	7fc00000 	.word	0x7fc00000

080052ec <siprintf>:
 80052ec:	b40e      	push	{r1, r2, r3}
 80052ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052f2:	b500      	push	{lr}
 80052f4:	b09c      	sub	sp, #112	; 0x70
 80052f6:	ab1d      	add	r3, sp, #116	; 0x74
 80052f8:	9002      	str	r0, [sp, #8]
 80052fa:	9006      	str	r0, [sp, #24]
 80052fc:	9107      	str	r1, [sp, #28]
 80052fe:	9104      	str	r1, [sp, #16]
 8005300:	4808      	ldr	r0, [pc, #32]	; (8005324 <siprintf+0x38>)
 8005302:	4909      	ldr	r1, [pc, #36]	; (8005328 <siprintf+0x3c>)
 8005304:	f853 2b04 	ldr.w	r2, [r3], #4
 8005308:	9105      	str	r1, [sp, #20]
 800530a:	6800      	ldr	r0, [r0, #0]
 800530c:	a902      	add	r1, sp, #8
 800530e:	9301      	str	r3, [sp, #4]
 8005310:	f002 feb8 	bl	8008084 <_svfiprintf_r>
 8005314:	2200      	movs	r2, #0
 8005316:	9b02      	ldr	r3, [sp, #8]
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	b01c      	add	sp, #112	; 0x70
 800531c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005320:	b003      	add	sp, #12
 8005322:	4770      	bx	lr
 8005324:	20000014 	.word	0x20000014
 8005328:	ffff0208 	.word	0xffff0208

0800532c <sulp>:
 800532c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005330:	460f      	mov	r7, r1
 8005332:	4690      	mov	r8, r2
 8005334:	f002 fc12 	bl	8007b5c <__ulp>
 8005338:	4604      	mov	r4, r0
 800533a:	460d      	mov	r5, r1
 800533c:	f1b8 0f00 	cmp.w	r8, #0
 8005340:	d011      	beq.n	8005366 <sulp+0x3a>
 8005342:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005346:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800534a:	2b00      	cmp	r3, #0
 800534c:	dd0b      	ble.n	8005366 <sulp+0x3a>
 800534e:	2400      	movs	r4, #0
 8005350:	051b      	lsls	r3, r3, #20
 8005352:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005356:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800535a:	4622      	mov	r2, r4
 800535c:	462b      	mov	r3, r5
 800535e:	f7fb f8bb 	bl	80004d8 <__aeabi_dmul>
 8005362:	4604      	mov	r4, r0
 8005364:	460d      	mov	r5, r1
 8005366:	4620      	mov	r0, r4
 8005368:	4629      	mov	r1, r5
 800536a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005370 <_strtod_l>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	469b      	mov	fp, r3
 8005376:	2300      	movs	r3, #0
 8005378:	b09f      	sub	sp, #124	; 0x7c
 800537a:	931a      	str	r3, [sp, #104]	; 0x68
 800537c:	4b9e      	ldr	r3, [pc, #632]	; (80055f8 <_strtod_l+0x288>)
 800537e:	4682      	mov	sl, r0
 8005380:	681f      	ldr	r7, [r3, #0]
 8005382:	460e      	mov	r6, r1
 8005384:	4638      	mov	r0, r7
 8005386:	9215      	str	r2, [sp, #84]	; 0x54
 8005388:	f7fa fee2 	bl	8000150 <strlen>
 800538c:	f04f 0800 	mov.w	r8, #0
 8005390:	4604      	mov	r4, r0
 8005392:	f04f 0900 	mov.w	r9, #0
 8005396:	9619      	str	r6, [sp, #100]	; 0x64
 8005398:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800539a:	781a      	ldrb	r2, [r3, #0]
 800539c:	2a2b      	cmp	r2, #43	; 0x2b
 800539e:	d04c      	beq.n	800543a <_strtod_l+0xca>
 80053a0:	d83a      	bhi.n	8005418 <_strtod_l+0xa8>
 80053a2:	2a0d      	cmp	r2, #13
 80053a4:	d833      	bhi.n	800540e <_strtod_l+0x9e>
 80053a6:	2a08      	cmp	r2, #8
 80053a8:	d833      	bhi.n	8005412 <_strtod_l+0xa2>
 80053aa:	2a00      	cmp	r2, #0
 80053ac:	d03d      	beq.n	800542a <_strtod_l+0xba>
 80053ae:	2300      	movs	r3, #0
 80053b0:	930a      	str	r3, [sp, #40]	; 0x28
 80053b2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80053b4:	782b      	ldrb	r3, [r5, #0]
 80053b6:	2b30      	cmp	r3, #48	; 0x30
 80053b8:	f040 80aa 	bne.w	8005510 <_strtod_l+0x1a0>
 80053bc:	786b      	ldrb	r3, [r5, #1]
 80053be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80053c2:	2b58      	cmp	r3, #88	; 0x58
 80053c4:	d166      	bne.n	8005494 <_strtod_l+0x124>
 80053c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053c8:	4650      	mov	r0, sl
 80053ca:	9301      	str	r3, [sp, #4]
 80053cc:	ab1a      	add	r3, sp, #104	; 0x68
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	4a8a      	ldr	r2, [pc, #552]	; (80055fc <_strtod_l+0x28c>)
 80053d2:	f8cd b008 	str.w	fp, [sp, #8]
 80053d6:	ab1b      	add	r3, sp, #108	; 0x6c
 80053d8:	a919      	add	r1, sp, #100	; 0x64
 80053da:	f001 fd17 	bl	8006e0c <__gethex>
 80053de:	f010 0607 	ands.w	r6, r0, #7
 80053e2:	4604      	mov	r4, r0
 80053e4:	d005      	beq.n	80053f2 <_strtod_l+0x82>
 80053e6:	2e06      	cmp	r6, #6
 80053e8:	d129      	bne.n	800543e <_strtod_l+0xce>
 80053ea:	2300      	movs	r3, #0
 80053ec:	3501      	adds	r5, #1
 80053ee:	9519      	str	r5, [sp, #100]	; 0x64
 80053f0:	930a      	str	r3, [sp, #40]	; 0x28
 80053f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f040 858a 	bne.w	8005f0e <_strtod_l+0xb9e>
 80053fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053fc:	b1d3      	cbz	r3, 8005434 <_strtod_l+0xc4>
 80053fe:	4642      	mov	r2, r8
 8005400:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005404:	4610      	mov	r0, r2
 8005406:	4619      	mov	r1, r3
 8005408:	b01f      	add	sp, #124	; 0x7c
 800540a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800540e:	2a20      	cmp	r2, #32
 8005410:	d1cd      	bne.n	80053ae <_strtod_l+0x3e>
 8005412:	3301      	adds	r3, #1
 8005414:	9319      	str	r3, [sp, #100]	; 0x64
 8005416:	e7bf      	b.n	8005398 <_strtod_l+0x28>
 8005418:	2a2d      	cmp	r2, #45	; 0x2d
 800541a:	d1c8      	bne.n	80053ae <_strtod_l+0x3e>
 800541c:	2201      	movs	r2, #1
 800541e:	920a      	str	r2, [sp, #40]	; 0x28
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	9219      	str	r2, [sp, #100]	; 0x64
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1c3      	bne.n	80053b2 <_strtod_l+0x42>
 800542a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800542c:	9619      	str	r6, [sp, #100]	; 0x64
 800542e:	2b00      	cmp	r3, #0
 8005430:	f040 856b 	bne.w	8005f0a <_strtod_l+0xb9a>
 8005434:	4642      	mov	r2, r8
 8005436:	464b      	mov	r3, r9
 8005438:	e7e4      	b.n	8005404 <_strtod_l+0x94>
 800543a:	2200      	movs	r2, #0
 800543c:	e7ef      	b.n	800541e <_strtod_l+0xae>
 800543e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005440:	b13a      	cbz	r2, 8005452 <_strtod_l+0xe2>
 8005442:	2135      	movs	r1, #53	; 0x35
 8005444:	a81c      	add	r0, sp, #112	; 0x70
 8005446:	f002 fc8d 	bl	8007d64 <__copybits>
 800544a:	4650      	mov	r0, sl
 800544c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800544e:	f002 f855 	bl	80074fc <_Bfree>
 8005452:	3e01      	subs	r6, #1
 8005454:	2e04      	cmp	r6, #4
 8005456:	d806      	bhi.n	8005466 <_strtod_l+0xf6>
 8005458:	e8df f006 	tbb	[pc, r6]
 800545c:	1714030a 	.word	0x1714030a
 8005460:	0a          	.byte	0x0a
 8005461:	00          	.byte	0x00
 8005462:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005466:	0721      	lsls	r1, r4, #28
 8005468:	d5c3      	bpl.n	80053f2 <_strtod_l+0x82>
 800546a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800546e:	e7c0      	b.n	80053f2 <_strtod_l+0x82>
 8005470:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005472:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005476:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800547a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800547e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005482:	e7f0      	b.n	8005466 <_strtod_l+0xf6>
 8005484:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005600 <_strtod_l+0x290>
 8005488:	e7ed      	b.n	8005466 <_strtod_l+0xf6>
 800548a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800548e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005492:	e7e8      	b.n	8005466 <_strtod_l+0xf6>
 8005494:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	9219      	str	r2, [sp, #100]	; 0x64
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	2b30      	cmp	r3, #48	; 0x30
 800549e:	d0f9      	beq.n	8005494 <_strtod_l+0x124>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0a6      	beq.n	80053f2 <_strtod_l+0x82>
 80054a4:	2301      	movs	r3, #1
 80054a6:	9307      	str	r3, [sp, #28]
 80054a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80054aa:	220a      	movs	r2, #10
 80054ac:	9308      	str	r3, [sp, #32]
 80054ae:	2300      	movs	r3, #0
 80054b0:	469b      	mov	fp, r3
 80054b2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80054b6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80054b8:	7805      	ldrb	r5, [r0, #0]
 80054ba:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80054be:	b2d9      	uxtb	r1, r3
 80054c0:	2909      	cmp	r1, #9
 80054c2:	d927      	bls.n	8005514 <_strtod_l+0x1a4>
 80054c4:	4622      	mov	r2, r4
 80054c6:	4639      	mov	r1, r7
 80054c8:	f002 fef2 	bl	80082b0 <strncmp>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	d033      	beq.n	8005538 <_strtod_l+0x1c8>
 80054d0:	2000      	movs	r0, #0
 80054d2:	462a      	mov	r2, r5
 80054d4:	465c      	mov	r4, fp
 80054d6:	4603      	mov	r3, r0
 80054d8:	9004      	str	r0, [sp, #16]
 80054da:	2a65      	cmp	r2, #101	; 0x65
 80054dc:	d001      	beq.n	80054e2 <_strtod_l+0x172>
 80054de:	2a45      	cmp	r2, #69	; 0x45
 80054e0:	d114      	bne.n	800550c <_strtod_l+0x19c>
 80054e2:	b91c      	cbnz	r4, 80054ec <_strtod_l+0x17c>
 80054e4:	9a07      	ldr	r2, [sp, #28]
 80054e6:	4302      	orrs	r2, r0
 80054e8:	d09f      	beq.n	800542a <_strtod_l+0xba>
 80054ea:	2400      	movs	r4, #0
 80054ec:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80054ee:	1c72      	adds	r2, r6, #1
 80054f0:	9219      	str	r2, [sp, #100]	; 0x64
 80054f2:	7872      	ldrb	r2, [r6, #1]
 80054f4:	2a2b      	cmp	r2, #43	; 0x2b
 80054f6:	d079      	beq.n	80055ec <_strtod_l+0x27c>
 80054f8:	2a2d      	cmp	r2, #45	; 0x2d
 80054fa:	f000 8083 	beq.w	8005604 <_strtod_l+0x294>
 80054fe:	2700      	movs	r7, #0
 8005500:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005504:	2909      	cmp	r1, #9
 8005506:	f240 8083 	bls.w	8005610 <_strtod_l+0x2a0>
 800550a:	9619      	str	r6, [sp, #100]	; 0x64
 800550c:	2500      	movs	r5, #0
 800550e:	e09f      	b.n	8005650 <_strtod_l+0x2e0>
 8005510:	2300      	movs	r3, #0
 8005512:	e7c8      	b.n	80054a6 <_strtod_l+0x136>
 8005514:	f1bb 0f08 	cmp.w	fp, #8
 8005518:	bfd5      	itete	le
 800551a:	9906      	ldrle	r1, [sp, #24]
 800551c:	9905      	ldrgt	r1, [sp, #20]
 800551e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005522:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005526:	f100 0001 	add.w	r0, r0, #1
 800552a:	bfd4      	ite	le
 800552c:	9306      	strle	r3, [sp, #24]
 800552e:	9305      	strgt	r3, [sp, #20]
 8005530:	f10b 0b01 	add.w	fp, fp, #1
 8005534:	9019      	str	r0, [sp, #100]	; 0x64
 8005536:	e7be      	b.n	80054b6 <_strtod_l+0x146>
 8005538:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800553a:	191a      	adds	r2, r3, r4
 800553c:	9219      	str	r2, [sp, #100]	; 0x64
 800553e:	5d1a      	ldrb	r2, [r3, r4]
 8005540:	f1bb 0f00 	cmp.w	fp, #0
 8005544:	d036      	beq.n	80055b4 <_strtod_l+0x244>
 8005546:	465c      	mov	r4, fp
 8005548:	9004      	str	r0, [sp, #16]
 800554a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800554e:	2b09      	cmp	r3, #9
 8005550:	d912      	bls.n	8005578 <_strtod_l+0x208>
 8005552:	2301      	movs	r3, #1
 8005554:	e7c1      	b.n	80054da <_strtod_l+0x16a>
 8005556:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005558:	3001      	adds	r0, #1
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	9219      	str	r2, [sp, #100]	; 0x64
 800555e:	785a      	ldrb	r2, [r3, #1]
 8005560:	2a30      	cmp	r2, #48	; 0x30
 8005562:	d0f8      	beq.n	8005556 <_strtod_l+0x1e6>
 8005564:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005568:	2b08      	cmp	r3, #8
 800556a:	f200 84d5 	bhi.w	8005f18 <_strtod_l+0xba8>
 800556e:	9004      	str	r0, [sp, #16]
 8005570:	2000      	movs	r0, #0
 8005572:	4604      	mov	r4, r0
 8005574:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005576:	9308      	str	r3, [sp, #32]
 8005578:	3a30      	subs	r2, #48	; 0x30
 800557a:	f100 0301 	add.w	r3, r0, #1
 800557e:	d013      	beq.n	80055a8 <_strtod_l+0x238>
 8005580:	9904      	ldr	r1, [sp, #16]
 8005582:	1905      	adds	r5, r0, r4
 8005584:	4419      	add	r1, r3
 8005586:	9104      	str	r1, [sp, #16]
 8005588:	4623      	mov	r3, r4
 800558a:	210a      	movs	r1, #10
 800558c:	42ab      	cmp	r3, r5
 800558e:	d113      	bne.n	80055b8 <_strtod_l+0x248>
 8005590:	1823      	adds	r3, r4, r0
 8005592:	2b08      	cmp	r3, #8
 8005594:	f104 0401 	add.w	r4, r4, #1
 8005598:	4404      	add	r4, r0
 800559a:	dc1b      	bgt.n	80055d4 <_strtod_l+0x264>
 800559c:	230a      	movs	r3, #10
 800559e:	9906      	ldr	r1, [sp, #24]
 80055a0:	fb03 2301 	mla	r3, r3, r1, r2
 80055a4:	9306      	str	r3, [sp, #24]
 80055a6:	2300      	movs	r3, #0
 80055a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80055aa:	4618      	mov	r0, r3
 80055ac:	1c51      	adds	r1, r2, #1
 80055ae:	9119      	str	r1, [sp, #100]	; 0x64
 80055b0:	7852      	ldrb	r2, [r2, #1]
 80055b2:	e7ca      	b.n	800554a <_strtod_l+0x1da>
 80055b4:	4658      	mov	r0, fp
 80055b6:	e7d3      	b.n	8005560 <_strtod_l+0x1f0>
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	dc04      	bgt.n	80055c6 <_strtod_l+0x256>
 80055bc:	9f06      	ldr	r7, [sp, #24]
 80055be:	434f      	muls	r7, r1
 80055c0:	9706      	str	r7, [sp, #24]
 80055c2:	3301      	adds	r3, #1
 80055c4:	e7e2      	b.n	800558c <_strtod_l+0x21c>
 80055c6:	1c5f      	adds	r7, r3, #1
 80055c8:	2f10      	cmp	r7, #16
 80055ca:	bfde      	ittt	le
 80055cc:	9f05      	ldrle	r7, [sp, #20]
 80055ce:	434f      	mulle	r7, r1
 80055d0:	9705      	strle	r7, [sp, #20]
 80055d2:	e7f6      	b.n	80055c2 <_strtod_l+0x252>
 80055d4:	2c10      	cmp	r4, #16
 80055d6:	bfdf      	itttt	le
 80055d8:	230a      	movle	r3, #10
 80055da:	9905      	ldrle	r1, [sp, #20]
 80055dc:	fb03 2301 	mlale	r3, r3, r1, r2
 80055e0:	9305      	strle	r3, [sp, #20]
 80055e2:	e7e0      	b.n	80055a6 <_strtod_l+0x236>
 80055e4:	2300      	movs	r3, #0
 80055e6:	9304      	str	r3, [sp, #16]
 80055e8:	2301      	movs	r3, #1
 80055ea:	e77b      	b.n	80054e4 <_strtod_l+0x174>
 80055ec:	2700      	movs	r7, #0
 80055ee:	1cb2      	adds	r2, r6, #2
 80055f0:	9219      	str	r2, [sp, #100]	; 0x64
 80055f2:	78b2      	ldrb	r2, [r6, #2]
 80055f4:	e784      	b.n	8005500 <_strtod_l+0x190>
 80055f6:	bf00      	nop
 80055f8:	080098c0 	.word	0x080098c0
 80055fc:	08009678 	.word	0x08009678
 8005600:	7ff00000 	.word	0x7ff00000
 8005604:	2701      	movs	r7, #1
 8005606:	e7f2      	b.n	80055ee <_strtod_l+0x27e>
 8005608:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800560a:	1c51      	adds	r1, r2, #1
 800560c:	9119      	str	r1, [sp, #100]	; 0x64
 800560e:	7852      	ldrb	r2, [r2, #1]
 8005610:	2a30      	cmp	r2, #48	; 0x30
 8005612:	d0f9      	beq.n	8005608 <_strtod_l+0x298>
 8005614:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005618:	2908      	cmp	r1, #8
 800561a:	f63f af77 	bhi.w	800550c <_strtod_l+0x19c>
 800561e:	f04f 0e0a 	mov.w	lr, #10
 8005622:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005626:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005628:	9209      	str	r2, [sp, #36]	; 0x24
 800562a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800562c:	1c51      	adds	r1, r2, #1
 800562e:	9119      	str	r1, [sp, #100]	; 0x64
 8005630:	7852      	ldrb	r2, [r2, #1]
 8005632:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005636:	2d09      	cmp	r5, #9
 8005638:	d935      	bls.n	80056a6 <_strtod_l+0x336>
 800563a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800563c:	1b49      	subs	r1, r1, r5
 800563e:	2908      	cmp	r1, #8
 8005640:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005644:	dc02      	bgt.n	800564c <_strtod_l+0x2dc>
 8005646:	4565      	cmp	r5, ip
 8005648:	bfa8      	it	ge
 800564a:	4665      	movge	r5, ip
 800564c:	b107      	cbz	r7, 8005650 <_strtod_l+0x2e0>
 800564e:	426d      	negs	r5, r5
 8005650:	2c00      	cmp	r4, #0
 8005652:	d14c      	bne.n	80056ee <_strtod_l+0x37e>
 8005654:	9907      	ldr	r1, [sp, #28]
 8005656:	4301      	orrs	r1, r0
 8005658:	f47f aecb 	bne.w	80053f2 <_strtod_l+0x82>
 800565c:	2b00      	cmp	r3, #0
 800565e:	f47f aee4 	bne.w	800542a <_strtod_l+0xba>
 8005662:	2a69      	cmp	r2, #105	; 0x69
 8005664:	d026      	beq.n	80056b4 <_strtod_l+0x344>
 8005666:	dc23      	bgt.n	80056b0 <_strtod_l+0x340>
 8005668:	2a49      	cmp	r2, #73	; 0x49
 800566a:	d023      	beq.n	80056b4 <_strtod_l+0x344>
 800566c:	2a4e      	cmp	r2, #78	; 0x4e
 800566e:	f47f aedc 	bne.w	800542a <_strtod_l+0xba>
 8005672:	499d      	ldr	r1, [pc, #628]	; (80058e8 <_strtod_l+0x578>)
 8005674:	a819      	add	r0, sp, #100	; 0x64
 8005676:	f001 fe17 	bl	80072a8 <__match>
 800567a:	2800      	cmp	r0, #0
 800567c:	f43f aed5 	beq.w	800542a <_strtod_l+0xba>
 8005680:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b28      	cmp	r3, #40	; 0x28
 8005686:	d12c      	bne.n	80056e2 <_strtod_l+0x372>
 8005688:	4998      	ldr	r1, [pc, #608]	; (80058ec <_strtod_l+0x57c>)
 800568a:	aa1c      	add	r2, sp, #112	; 0x70
 800568c:	a819      	add	r0, sp, #100	; 0x64
 800568e:	f001 fe1f 	bl	80072d0 <__hexnan>
 8005692:	2805      	cmp	r0, #5
 8005694:	d125      	bne.n	80056e2 <_strtod_l+0x372>
 8005696:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005698:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800569c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80056a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80056a4:	e6a5      	b.n	80053f2 <_strtod_l+0x82>
 80056a6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80056aa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80056ae:	e7bc      	b.n	800562a <_strtod_l+0x2ba>
 80056b0:	2a6e      	cmp	r2, #110	; 0x6e
 80056b2:	e7dc      	b.n	800566e <_strtod_l+0x2fe>
 80056b4:	498e      	ldr	r1, [pc, #568]	; (80058f0 <_strtod_l+0x580>)
 80056b6:	a819      	add	r0, sp, #100	; 0x64
 80056b8:	f001 fdf6 	bl	80072a8 <__match>
 80056bc:	2800      	cmp	r0, #0
 80056be:	f43f aeb4 	beq.w	800542a <_strtod_l+0xba>
 80056c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80056c4:	498b      	ldr	r1, [pc, #556]	; (80058f4 <_strtod_l+0x584>)
 80056c6:	3b01      	subs	r3, #1
 80056c8:	a819      	add	r0, sp, #100	; 0x64
 80056ca:	9319      	str	r3, [sp, #100]	; 0x64
 80056cc:	f001 fdec 	bl	80072a8 <__match>
 80056d0:	b910      	cbnz	r0, 80056d8 <_strtod_l+0x368>
 80056d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80056d4:	3301      	adds	r3, #1
 80056d6:	9319      	str	r3, [sp, #100]	; 0x64
 80056d8:	f04f 0800 	mov.w	r8, #0
 80056dc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80058f8 <_strtod_l+0x588>
 80056e0:	e687      	b.n	80053f2 <_strtod_l+0x82>
 80056e2:	4886      	ldr	r0, [pc, #536]	; (80058fc <_strtod_l+0x58c>)
 80056e4:	f002 fdce 	bl	8008284 <nan>
 80056e8:	4680      	mov	r8, r0
 80056ea:	4689      	mov	r9, r1
 80056ec:	e681      	b.n	80053f2 <_strtod_l+0x82>
 80056ee:	9b04      	ldr	r3, [sp, #16]
 80056f0:	f1bb 0f00 	cmp.w	fp, #0
 80056f4:	bf08      	it	eq
 80056f6:	46a3      	moveq	fp, r4
 80056f8:	1aeb      	subs	r3, r5, r3
 80056fa:	2c10      	cmp	r4, #16
 80056fc:	9806      	ldr	r0, [sp, #24]
 80056fe:	4626      	mov	r6, r4
 8005700:	9307      	str	r3, [sp, #28]
 8005702:	bfa8      	it	ge
 8005704:	2610      	movge	r6, #16
 8005706:	f7fa fe6d 	bl	80003e4 <__aeabi_ui2d>
 800570a:	2c09      	cmp	r4, #9
 800570c:	4680      	mov	r8, r0
 800570e:	4689      	mov	r9, r1
 8005710:	dd13      	ble.n	800573a <_strtod_l+0x3ca>
 8005712:	4b7b      	ldr	r3, [pc, #492]	; (8005900 <_strtod_l+0x590>)
 8005714:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005718:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800571c:	f7fa fedc 	bl	80004d8 <__aeabi_dmul>
 8005720:	4680      	mov	r8, r0
 8005722:	9805      	ldr	r0, [sp, #20]
 8005724:	4689      	mov	r9, r1
 8005726:	f7fa fe5d 	bl	80003e4 <__aeabi_ui2d>
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	4640      	mov	r0, r8
 8005730:	4649      	mov	r1, r9
 8005732:	f7fa fd1b 	bl	800016c <__adddf3>
 8005736:	4680      	mov	r8, r0
 8005738:	4689      	mov	r9, r1
 800573a:	2c0f      	cmp	r4, #15
 800573c:	dc36      	bgt.n	80057ac <_strtod_l+0x43c>
 800573e:	9b07      	ldr	r3, [sp, #28]
 8005740:	2b00      	cmp	r3, #0
 8005742:	f43f ae56 	beq.w	80053f2 <_strtod_l+0x82>
 8005746:	dd22      	ble.n	800578e <_strtod_l+0x41e>
 8005748:	2b16      	cmp	r3, #22
 800574a:	dc09      	bgt.n	8005760 <_strtod_l+0x3f0>
 800574c:	496c      	ldr	r1, [pc, #432]	; (8005900 <_strtod_l+0x590>)
 800574e:	4642      	mov	r2, r8
 8005750:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005754:	464b      	mov	r3, r9
 8005756:	e9d1 0100 	ldrd	r0, r1, [r1]
 800575a:	f7fa febd 	bl	80004d8 <__aeabi_dmul>
 800575e:	e7c3      	b.n	80056e8 <_strtod_l+0x378>
 8005760:	9a07      	ldr	r2, [sp, #28]
 8005762:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005766:	4293      	cmp	r3, r2
 8005768:	db20      	blt.n	80057ac <_strtod_l+0x43c>
 800576a:	4d65      	ldr	r5, [pc, #404]	; (8005900 <_strtod_l+0x590>)
 800576c:	f1c4 040f 	rsb	r4, r4, #15
 8005770:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005774:	4642      	mov	r2, r8
 8005776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800577a:	464b      	mov	r3, r9
 800577c:	f7fa feac 	bl	80004d8 <__aeabi_dmul>
 8005780:	9b07      	ldr	r3, [sp, #28]
 8005782:	1b1c      	subs	r4, r3, r4
 8005784:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005788:	e9d5 2300 	ldrd	r2, r3, [r5]
 800578c:	e7e5      	b.n	800575a <_strtod_l+0x3ea>
 800578e:	9b07      	ldr	r3, [sp, #28]
 8005790:	3316      	adds	r3, #22
 8005792:	db0b      	blt.n	80057ac <_strtod_l+0x43c>
 8005794:	9b04      	ldr	r3, [sp, #16]
 8005796:	4640      	mov	r0, r8
 8005798:	1b5d      	subs	r5, r3, r5
 800579a:	4b59      	ldr	r3, [pc, #356]	; (8005900 <_strtod_l+0x590>)
 800579c:	4649      	mov	r1, r9
 800579e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80057a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80057a6:	f7fa ffc1 	bl	800072c <__aeabi_ddiv>
 80057aa:	e79d      	b.n	80056e8 <_strtod_l+0x378>
 80057ac:	9b07      	ldr	r3, [sp, #28]
 80057ae:	1ba6      	subs	r6, r4, r6
 80057b0:	441e      	add	r6, r3
 80057b2:	2e00      	cmp	r6, #0
 80057b4:	dd74      	ble.n	80058a0 <_strtod_l+0x530>
 80057b6:	f016 030f 	ands.w	r3, r6, #15
 80057ba:	d00a      	beq.n	80057d2 <_strtod_l+0x462>
 80057bc:	4950      	ldr	r1, [pc, #320]	; (8005900 <_strtod_l+0x590>)
 80057be:	4642      	mov	r2, r8
 80057c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80057c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057c8:	464b      	mov	r3, r9
 80057ca:	f7fa fe85 	bl	80004d8 <__aeabi_dmul>
 80057ce:	4680      	mov	r8, r0
 80057d0:	4689      	mov	r9, r1
 80057d2:	f036 060f 	bics.w	r6, r6, #15
 80057d6:	d052      	beq.n	800587e <_strtod_l+0x50e>
 80057d8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80057dc:	dd27      	ble.n	800582e <_strtod_l+0x4be>
 80057de:	f04f 0b00 	mov.w	fp, #0
 80057e2:	f8cd b010 	str.w	fp, [sp, #16]
 80057e6:	f8cd b020 	str.w	fp, [sp, #32]
 80057ea:	f8cd b018 	str.w	fp, [sp, #24]
 80057ee:	2322      	movs	r3, #34	; 0x22
 80057f0:	f04f 0800 	mov.w	r8, #0
 80057f4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80058f8 <_strtod_l+0x588>
 80057f8:	f8ca 3000 	str.w	r3, [sl]
 80057fc:	9b08      	ldr	r3, [sp, #32]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f43f adf7 	beq.w	80053f2 <_strtod_l+0x82>
 8005804:	4650      	mov	r0, sl
 8005806:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005808:	f001 fe78 	bl	80074fc <_Bfree>
 800580c:	4650      	mov	r0, sl
 800580e:	9906      	ldr	r1, [sp, #24]
 8005810:	f001 fe74 	bl	80074fc <_Bfree>
 8005814:	4650      	mov	r0, sl
 8005816:	9904      	ldr	r1, [sp, #16]
 8005818:	f001 fe70 	bl	80074fc <_Bfree>
 800581c:	4650      	mov	r0, sl
 800581e:	9908      	ldr	r1, [sp, #32]
 8005820:	f001 fe6c 	bl	80074fc <_Bfree>
 8005824:	4659      	mov	r1, fp
 8005826:	4650      	mov	r0, sl
 8005828:	f001 fe68 	bl	80074fc <_Bfree>
 800582c:	e5e1      	b.n	80053f2 <_strtod_l+0x82>
 800582e:	4b35      	ldr	r3, [pc, #212]	; (8005904 <_strtod_l+0x594>)
 8005830:	4640      	mov	r0, r8
 8005832:	9305      	str	r3, [sp, #20]
 8005834:	2300      	movs	r3, #0
 8005836:	4649      	mov	r1, r9
 8005838:	461f      	mov	r7, r3
 800583a:	1136      	asrs	r6, r6, #4
 800583c:	2e01      	cmp	r6, #1
 800583e:	dc21      	bgt.n	8005884 <_strtod_l+0x514>
 8005840:	b10b      	cbz	r3, 8005846 <_strtod_l+0x4d6>
 8005842:	4680      	mov	r8, r0
 8005844:	4689      	mov	r9, r1
 8005846:	4b2f      	ldr	r3, [pc, #188]	; (8005904 <_strtod_l+0x594>)
 8005848:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800584c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005850:	4642      	mov	r2, r8
 8005852:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005856:	464b      	mov	r3, r9
 8005858:	f7fa fe3e 	bl	80004d8 <__aeabi_dmul>
 800585c:	4b26      	ldr	r3, [pc, #152]	; (80058f8 <_strtod_l+0x588>)
 800585e:	460a      	mov	r2, r1
 8005860:	400b      	ands	r3, r1
 8005862:	4929      	ldr	r1, [pc, #164]	; (8005908 <_strtod_l+0x598>)
 8005864:	4680      	mov	r8, r0
 8005866:	428b      	cmp	r3, r1
 8005868:	d8b9      	bhi.n	80057de <_strtod_l+0x46e>
 800586a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800586e:	428b      	cmp	r3, r1
 8005870:	bf86      	itte	hi
 8005872:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8005876:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800590c <_strtod_l+0x59c>
 800587a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800587e:	2300      	movs	r3, #0
 8005880:	9305      	str	r3, [sp, #20]
 8005882:	e07f      	b.n	8005984 <_strtod_l+0x614>
 8005884:	07f2      	lsls	r2, r6, #31
 8005886:	d505      	bpl.n	8005894 <_strtod_l+0x524>
 8005888:	9b05      	ldr	r3, [sp, #20]
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	f7fa fe23 	bl	80004d8 <__aeabi_dmul>
 8005892:	2301      	movs	r3, #1
 8005894:	9a05      	ldr	r2, [sp, #20]
 8005896:	3701      	adds	r7, #1
 8005898:	3208      	adds	r2, #8
 800589a:	1076      	asrs	r6, r6, #1
 800589c:	9205      	str	r2, [sp, #20]
 800589e:	e7cd      	b.n	800583c <_strtod_l+0x4cc>
 80058a0:	d0ed      	beq.n	800587e <_strtod_l+0x50e>
 80058a2:	4276      	negs	r6, r6
 80058a4:	f016 020f 	ands.w	r2, r6, #15
 80058a8:	d00a      	beq.n	80058c0 <_strtod_l+0x550>
 80058aa:	4b15      	ldr	r3, [pc, #84]	; (8005900 <_strtod_l+0x590>)
 80058ac:	4640      	mov	r0, r8
 80058ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058b2:	4649      	mov	r1, r9
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	f7fa ff38 	bl	800072c <__aeabi_ddiv>
 80058bc:	4680      	mov	r8, r0
 80058be:	4689      	mov	r9, r1
 80058c0:	1136      	asrs	r6, r6, #4
 80058c2:	d0dc      	beq.n	800587e <_strtod_l+0x50e>
 80058c4:	2e1f      	cmp	r6, #31
 80058c6:	dd23      	ble.n	8005910 <_strtod_l+0x5a0>
 80058c8:	f04f 0b00 	mov.w	fp, #0
 80058cc:	f8cd b010 	str.w	fp, [sp, #16]
 80058d0:	f8cd b020 	str.w	fp, [sp, #32]
 80058d4:	f8cd b018 	str.w	fp, [sp, #24]
 80058d8:	2322      	movs	r3, #34	; 0x22
 80058da:	f04f 0800 	mov.w	r8, #0
 80058de:	f04f 0900 	mov.w	r9, #0
 80058e2:	f8ca 3000 	str.w	r3, [sl]
 80058e6:	e789      	b.n	80057fc <_strtod_l+0x48c>
 80058e8:	08009649 	.word	0x08009649
 80058ec:	0800968c 	.word	0x0800968c
 80058f0:	08009641 	.word	0x08009641
 80058f4:	080097cc 	.word	0x080097cc
 80058f8:	7ff00000 	.word	0x7ff00000
 80058fc:	08009a78 	.word	0x08009a78
 8005900:	08009958 	.word	0x08009958
 8005904:	08009930 	.word	0x08009930
 8005908:	7ca00000 	.word	0x7ca00000
 800590c:	7fefffff 	.word	0x7fefffff
 8005910:	f016 0310 	ands.w	r3, r6, #16
 8005914:	bf18      	it	ne
 8005916:	236a      	movne	r3, #106	; 0x6a
 8005918:	4640      	mov	r0, r8
 800591a:	9305      	str	r3, [sp, #20]
 800591c:	4649      	mov	r1, r9
 800591e:	2300      	movs	r3, #0
 8005920:	4fb0      	ldr	r7, [pc, #704]	; (8005be4 <_strtod_l+0x874>)
 8005922:	07f2      	lsls	r2, r6, #31
 8005924:	d504      	bpl.n	8005930 <_strtod_l+0x5c0>
 8005926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800592a:	f7fa fdd5 	bl	80004d8 <__aeabi_dmul>
 800592e:	2301      	movs	r3, #1
 8005930:	1076      	asrs	r6, r6, #1
 8005932:	f107 0708 	add.w	r7, r7, #8
 8005936:	d1f4      	bne.n	8005922 <_strtod_l+0x5b2>
 8005938:	b10b      	cbz	r3, 800593e <_strtod_l+0x5ce>
 800593a:	4680      	mov	r8, r0
 800593c:	4689      	mov	r9, r1
 800593e:	9b05      	ldr	r3, [sp, #20]
 8005940:	b1c3      	cbz	r3, 8005974 <_strtod_l+0x604>
 8005942:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005946:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800594a:	2b00      	cmp	r3, #0
 800594c:	4649      	mov	r1, r9
 800594e:	dd11      	ble.n	8005974 <_strtod_l+0x604>
 8005950:	2b1f      	cmp	r3, #31
 8005952:	f340 8127 	ble.w	8005ba4 <_strtod_l+0x834>
 8005956:	2b34      	cmp	r3, #52	; 0x34
 8005958:	bfd8      	it	le
 800595a:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800595e:	f04f 0800 	mov.w	r8, #0
 8005962:	bfcf      	iteee	gt
 8005964:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005968:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800596c:	fa03 f202 	lslle.w	r2, r3, r2
 8005970:	ea02 0901 	andle.w	r9, r2, r1
 8005974:	2200      	movs	r2, #0
 8005976:	2300      	movs	r3, #0
 8005978:	4640      	mov	r0, r8
 800597a:	4649      	mov	r1, r9
 800597c:	f7fb f814 	bl	80009a8 <__aeabi_dcmpeq>
 8005980:	2800      	cmp	r0, #0
 8005982:	d1a1      	bne.n	80058c8 <_strtod_l+0x558>
 8005984:	9b06      	ldr	r3, [sp, #24]
 8005986:	465a      	mov	r2, fp
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	4650      	mov	r0, sl
 800598c:	4623      	mov	r3, r4
 800598e:	9908      	ldr	r1, [sp, #32]
 8005990:	f001 fe1c 	bl	80075cc <__s2b>
 8005994:	9008      	str	r0, [sp, #32]
 8005996:	2800      	cmp	r0, #0
 8005998:	f43f af21 	beq.w	80057de <_strtod_l+0x46e>
 800599c:	9b04      	ldr	r3, [sp, #16]
 800599e:	f04f 0b00 	mov.w	fp, #0
 80059a2:	1b5d      	subs	r5, r3, r5
 80059a4:	9b07      	ldr	r3, [sp, #28]
 80059a6:	f8cd b010 	str.w	fp, [sp, #16]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	bfb4      	ite	lt
 80059ae:	462b      	movlt	r3, r5
 80059b0:	2300      	movge	r3, #0
 80059b2:	930e      	str	r3, [sp, #56]	; 0x38
 80059b4:	9b07      	ldr	r3, [sp, #28]
 80059b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80059ba:	9314      	str	r3, [sp, #80]	; 0x50
 80059bc:	9b08      	ldr	r3, [sp, #32]
 80059be:	4650      	mov	r0, sl
 80059c0:	6859      	ldr	r1, [r3, #4]
 80059c2:	f001 fd5b 	bl	800747c <_Balloc>
 80059c6:	9006      	str	r0, [sp, #24]
 80059c8:	2800      	cmp	r0, #0
 80059ca:	f43f af10 	beq.w	80057ee <_strtod_l+0x47e>
 80059ce:	9b08      	ldr	r3, [sp, #32]
 80059d0:	300c      	adds	r0, #12
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	f103 010c 	add.w	r1, r3, #12
 80059d8:	3202      	adds	r2, #2
 80059da:	0092      	lsls	r2, r2, #2
 80059dc:	f001 fd40 	bl	8007460 <memcpy>
 80059e0:	ab1c      	add	r3, sp, #112	; 0x70
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	ab1b      	add	r3, sp, #108	; 0x6c
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	4642      	mov	r2, r8
 80059ea:	464b      	mov	r3, r9
 80059ec:	4650      	mov	r0, sl
 80059ee:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80059f2:	f002 f92d 	bl	8007c50 <__d2b>
 80059f6:	901a      	str	r0, [sp, #104]	; 0x68
 80059f8:	2800      	cmp	r0, #0
 80059fa:	f43f aef8 	beq.w	80057ee <_strtod_l+0x47e>
 80059fe:	2101      	movs	r1, #1
 8005a00:	4650      	mov	r0, sl
 8005a02:	f001 fe7b 	bl	80076fc <__i2b>
 8005a06:	4603      	mov	r3, r0
 8005a08:	9004      	str	r0, [sp, #16]
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	f43f aeef 	beq.w	80057ee <_strtod_l+0x47e>
 8005a10:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005a12:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005a14:	2d00      	cmp	r5, #0
 8005a16:	bfab      	itete	ge
 8005a18:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005a1a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8005a1c:	18ee      	addge	r6, r5, r3
 8005a1e:	1b5c      	sublt	r4, r3, r5
 8005a20:	9b05      	ldr	r3, [sp, #20]
 8005a22:	bfa8      	it	ge
 8005a24:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005a26:	eba5 0503 	sub.w	r5, r5, r3
 8005a2a:	4415      	add	r5, r2
 8005a2c:	4b6e      	ldr	r3, [pc, #440]	; (8005be8 <_strtod_l+0x878>)
 8005a2e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8005a32:	bfb8      	it	lt
 8005a34:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005a36:	429d      	cmp	r5, r3
 8005a38:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005a3c:	f280 80c4 	bge.w	8005bc8 <_strtod_l+0x858>
 8005a40:	1b5b      	subs	r3, r3, r5
 8005a42:	2b1f      	cmp	r3, #31
 8005a44:	f04f 0701 	mov.w	r7, #1
 8005a48:	eba2 0203 	sub.w	r2, r2, r3
 8005a4c:	f300 80b1 	bgt.w	8005bb2 <_strtod_l+0x842>
 8005a50:	2500      	movs	r5, #0
 8005a52:	fa07 f303 	lsl.w	r3, r7, r3
 8005a56:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a58:	18b7      	adds	r7, r6, r2
 8005a5a:	9b05      	ldr	r3, [sp, #20]
 8005a5c:	42be      	cmp	r6, r7
 8005a5e:	4414      	add	r4, r2
 8005a60:	441c      	add	r4, r3
 8005a62:	4633      	mov	r3, r6
 8005a64:	bfa8      	it	ge
 8005a66:	463b      	movge	r3, r7
 8005a68:	42a3      	cmp	r3, r4
 8005a6a:	bfa8      	it	ge
 8005a6c:	4623      	movge	r3, r4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	bfc2      	ittt	gt
 8005a72:	1aff      	subgt	r7, r7, r3
 8005a74:	1ae4      	subgt	r4, r4, r3
 8005a76:	1af6      	subgt	r6, r6, r3
 8005a78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	dd17      	ble.n	8005aae <_strtod_l+0x73e>
 8005a7e:	461a      	mov	r2, r3
 8005a80:	4650      	mov	r0, sl
 8005a82:	9904      	ldr	r1, [sp, #16]
 8005a84:	f001 fef8 	bl	8007878 <__pow5mult>
 8005a88:	9004      	str	r0, [sp, #16]
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	f43f aeaf 	beq.w	80057ee <_strtod_l+0x47e>
 8005a90:	4601      	mov	r1, r0
 8005a92:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005a94:	4650      	mov	r0, sl
 8005a96:	f001 fe47 	bl	8007728 <__multiply>
 8005a9a:	9009      	str	r0, [sp, #36]	; 0x24
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	f43f aea6 	beq.w	80057ee <_strtod_l+0x47e>
 8005aa2:	4650      	mov	r0, sl
 8005aa4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005aa6:	f001 fd29 	bl	80074fc <_Bfree>
 8005aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aac:	931a      	str	r3, [sp, #104]	; 0x68
 8005aae:	2f00      	cmp	r7, #0
 8005ab0:	f300 808e 	bgt.w	8005bd0 <_strtod_l+0x860>
 8005ab4:	9b07      	ldr	r3, [sp, #28]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	dd08      	ble.n	8005acc <_strtod_l+0x75c>
 8005aba:	4650      	mov	r0, sl
 8005abc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005abe:	9906      	ldr	r1, [sp, #24]
 8005ac0:	f001 feda 	bl	8007878 <__pow5mult>
 8005ac4:	9006      	str	r0, [sp, #24]
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	f43f ae91 	beq.w	80057ee <_strtod_l+0x47e>
 8005acc:	2c00      	cmp	r4, #0
 8005ace:	dd08      	ble.n	8005ae2 <_strtod_l+0x772>
 8005ad0:	4622      	mov	r2, r4
 8005ad2:	4650      	mov	r0, sl
 8005ad4:	9906      	ldr	r1, [sp, #24]
 8005ad6:	f001 ff29 	bl	800792c <__lshift>
 8005ada:	9006      	str	r0, [sp, #24]
 8005adc:	2800      	cmp	r0, #0
 8005ade:	f43f ae86 	beq.w	80057ee <_strtod_l+0x47e>
 8005ae2:	2e00      	cmp	r6, #0
 8005ae4:	dd08      	ble.n	8005af8 <_strtod_l+0x788>
 8005ae6:	4632      	mov	r2, r6
 8005ae8:	4650      	mov	r0, sl
 8005aea:	9904      	ldr	r1, [sp, #16]
 8005aec:	f001 ff1e 	bl	800792c <__lshift>
 8005af0:	9004      	str	r0, [sp, #16]
 8005af2:	2800      	cmp	r0, #0
 8005af4:	f43f ae7b 	beq.w	80057ee <_strtod_l+0x47e>
 8005af8:	4650      	mov	r0, sl
 8005afa:	9a06      	ldr	r2, [sp, #24]
 8005afc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005afe:	f001 ffa1 	bl	8007a44 <__mdiff>
 8005b02:	4683      	mov	fp, r0
 8005b04:	2800      	cmp	r0, #0
 8005b06:	f43f ae72 	beq.w	80057ee <_strtod_l+0x47e>
 8005b0a:	2400      	movs	r4, #0
 8005b0c:	68c3      	ldr	r3, [r0, #12]
 8005b0e:	9904      	ldr	r1, [sp, #16]
 8005b10:	60c4      	str	r4, [r0, #12]
 8005b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b14:	f001 ff7a 	bl	8007a0c <__mcmp>
 8005b18:	42a0      	cmp	r0, r4
 8005b1a:	da6b      	bge.n	8005bf4 <_strtod_l+0x884>
 8005b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b1e:	ea53 0308 	orrs.w	r3, r3, r8
 8005b22:	f040 8091 	bne.w	8005c48 <_strtod_l+0x8d8>
 8005b26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f040 808c 	bne.w	8005c48 <_strtod_l+0x8d8>
 8005b30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b34:	0d1b      	lsrs	r3, r3, #20
 8005b36:	051b      	lsls	r3, r3, #20
 8005b38:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005b3c:	f240 8084 	bls.w	8005c48 <_strtod_l+0x8d8>
 8005b40:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005b44:	b91b      	cbnz	r3, 8005b4e <_strtod_l+0x7de>
 8005b46:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	dd7c      	ble.n	8005c48 <_strtod_l+0x8d8>
 8005b4e:	4659      	mov	r1, fp
 8005b50:	2201      	movs	r2, #1
 8005b52:	4650      	mov	r0, sl
 8005b54:	f001 feea 	bl	800792c <__lshift>
 8005b58:	9904      	ldr	r1, [sp, #16]
 8005b5a:	4683      	mov	fp, r0
 8005b5c:	f001 ff56 	bl	8007a0c <__mcmp>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	dd71      	ble.n	8005c48 <_strtod_l+0x8d8>
 8005b64:	9905      	ldr	r1, [sp, #20]
 8005b66:	464b      	mov	r3, r9
 8005b68:	4a20      	ldr	r2, [pc, #128]	; (8005bec <_strtod_l+0x87c>)
 8005b6a:	2900      	cmp	r1, #0
 8005b6c:	f000 808c 	beq.w	8005c88 <_strtod_l+0x918>
 8005b70:	ea02 0109 	and.w	r1, r2, r9
 8005b74:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005b78:	f300 8086 	bgt.w	8005c88 <_strtod_l+0x918>
 8005b7c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005b80:	f77f aeaa 	ble.w	80058d8 <_strtod_l+0x568>
 8005b84:	4640      	mov	r0, r8
 8005b86:	4649      	mov	r1, r9
 8005b88:	4b19      	ldr	r3, [pc, #100]	; (8005bf0 <_strtod_l+0x880>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f7fa fca4 	bl	80004d8 <__aeabi_dmul>
 8005b90:	460b      	mov	r3, r1
 8005b92:	4303      	orrs	r3, r0
 8005b94:	bf08      	it	eq
 8005b96:	2322      	moveq	r3, #34	; 0x22
 8005b98:	4680      	mov	r8, r0
 8005b9a:	4689      	mov	r9, r1
 8005b9c:	bf08      	it	eq
 8005b9e:	f8ca 3000 	streq.w	r3, [sl]
 8005ba2:	e62f      	b.n	8005804 <_strtod_l+0x494>
 8005ba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	ea03 0808 	and.w	r8, r3, r8
 8005bb0:	e6e0      	b.n	8005974 <_strtod_l+0x604>
 8005bb2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005bb6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005bba:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005bbe:	35e2      	adds	r5, #226	; 0xe2
 8005bc0:	fa07 f505 	lsl.w	r5, r7, r5
 8005bc4:	970f      	str	r7, [sp, #60]	; 0x3c
 8005bc6:	e747      	b.n	8005a58 <_strtod_l+0x6e8>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	2500      	movs	r5, #0
 8005bcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bce:	e743      	b.n	8005a58 <_strtod_l+0x6e8>
 8005bd0:	463a      	mov	r2, r7
 8005bd2:	4650      	mov	r0, sl
 8005bd4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005bd6:	f001 fea9 	bl	800792c <__lshift>
 8005bda:	901a      	str	r0, [sp, #104]	; 0x68
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	f47f af69 	bne.w	8005ab4 <_strtod_l+0x744>
 8005be2:	e604      	b.n	80057ee <_strtod_l+0x47e>
 8005be4:	080096a0 	.word	0x080096a0
 8005be8:	fffffc02 	.word	0xfffffc02
 8005bec:	7ff00000 	.word	0x7ff00000
 8005bf0:	39500000 	.word	0x39500000
 8005bf4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005bf8:	d165      	bne.n	8005cc6 <_strtod_l+0x956>
 8005bfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c00:	b35a      	cbz	r2, 8005c5a <_strtod_l+0x8ea>
 8005c02:	4a99      	ldr	r2, [pc, #612]	; (8005e68 <_strtod_l+0xaf8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d12b      	bne.n	8005c60 <_strtod_l+0x8f0>
 8005c08:	9b05      	ldr	r3, [sp, #20]
 8005c0a:	4641      	mov	r1, r8
 8005c0c:	b303      	cbz	r3, 8005c50 <_strtod_l+0x8e0>
 8005c0e:	464a      	mov	r2, r9
 8005c10:	4b96      	ldr	r3, [pc, #600]	; (8005e6c <_strtod_l+0xafc>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c1c:	d81b      	bhi.n	8005c56 <_strtod_l+0x8e6>
 8005c1e:	0d1b      	lsrs	r3, r3, #20
 8005c20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	4299      	cmp	r1, r3
 8005c2a:	d119      	bne.n	8005c60 <_strtod_l+0x8f0>
 8005c2c:	4b90      	ldr	r3, [pc, #576]	; (8005e70 <_strtod_l+0xb00>)
 8005c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d102      	bne.n	8005c3a <_strtod_l+0x8ca>
 8005c34:	3101      	adds	r1, #1
 8005c36:	f43f adda 	beq.w	80057ee <_strtod_l+0x47e>
 8005c3a:	f04f 0800 	mov.w	r8, #0
 8005c3e:	4b8b      	ldr	r3, [pc, #556]	; (8005e6c <_strtod_l+0xafc>)
 8005c40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c42:	401a      	ands	r2, r3
 8005c44:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005c48:	9b05      	ldr	r3, [sp, #20]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d19a      	bne.n	8005b84 <_strtod_l+0x814>
 8005c4e:	e5d9      	b.n	8005804 <_strtod_l+0x494>
 8005c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c54:	e7e8      	b.n	8005c28 <_strtod_l+0x8b8>
 8005c56:	4613      	mov	r3, r2
 8005c58:	e7e6      	b.n	8005c28 <_strtod_l+0x8b8>
 8005c5a:	ea53 0308 	orrs.w	r3, r3, r8
 8005c5e:	d081      	beq.n	8005b64 <_strtod_l+0x7f4>
 8005c60:	b1e5      	cbz	r5, 8005c9c <_strtod_l+0x92c>
 8005c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c64:	421d      	tst	r5, r3
 8005c66:	d0ef      	beq.n	8005c48 <_strtod_l+0x8d8>
 8005c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	9a05      	ldr	r2, [sp, #20]
 8005c70:	b1c3      	cbz	r3, 8005ca4 <_strtod_l+0x934>
 8005c72:	f7ff fb5b 	bl	800532c <sulp>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c7e:	f7fa fa75 	bl	800016c <__adddf3>
 8005c82:	4680      	mov	r8, r0
 8005c84:	4689      	mov	r9, r1
 8005c86:	e7df      	b.n	8005c48 <_strtod_l+0x8d8>
 8005c88:	4013      	ands	r3, r2
 8005c8a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005c8e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005c92:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005c96:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005c9a:	e7d5      	b.n	8005c48 <_strtod_l+0x8d8>
 8005c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c9e:	ea13 0f08 	tst.w	r3, r8
 8005ca2:	e7e0      	b.n	8005c66 <_strtod_l+0x8f6>
 8005ca4:	f7ff fb42 	bl	800532c <sulp>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cb0:	f7fa fa5a 	bl	8000168 <__aeabi_dsub>
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	4680      	mov	r8, r0
 8005cba:	4689      	mov	r9, r1
 8005cbc:	f7fa fe74 	bl	80009a8 <__aeabi_dcmpeq>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d0c1      	beq.n	8005c48 <_strtod_l+0x8d8>
 8005cc4:	e608      	b.n	80058d8 <_strtod_l+0x568>
 8005cc6:	4658      	mov	r0, fp
 8005cc8:	9904      	ldr	r1, [sp, #16]
 8005cca:	f002 f81d 	bl	8007d08 <__ratio>
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	460f      	mov	r7, r1
 8005cd8:	f7fa fe7a 	bl	80009d0 <__aeabi_dcmple>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d070      	beq.n	8005dc2 <_strtod_l+0xa52>
 8005ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d042      	beq.n	8005d6c <_strtod_l+0x9fc>
 8005ce6:	2600      	movs	r6, #0
 8005ce8:	4f62      	ldr	r7, [pc, #392]	; (8005e74 <_strtod_l+0xb04>)
 8005cea:	4d62      	ldr	r5, [pc, #392]	; (8005e74 <_strtod_l+0xb04>)
 8005cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cf2:	0d1b      	lsrs	r3, r3, #20
 8005cf4:	051b      	lsls	r3, r3, #20
 8005cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cfa:	4b5f      	ldr	r3, [pc, #380]	; (8005e78 <_strtod_l+0xb08>)
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	f040 80c3 	bne.w	8005e88 <_strtod_l+0xb18>
 8005d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d04:	4640      	mov	r0, r8
 8005d06:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	f001 ff26 	bl	8007b5c <__ulp>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4630      	mov	r0, r6
 8005d16:	4639      	mov	r1, r7
 8005d18:	f7fa fbde 	bl	80004d8 <__aeabi_dmul>
 8005d1c:	4642      	mov	r2, r8
 8005d1e:	464b      	mov	r3, r9
 8005d20:	f7fa fa24 	bl	800016c <__adddf3>
 8005d24:	460b      	mov	r3, r1
 8005d26:	4951      	ldr	r1, [pc, #324]	; (8005e6c <_strtod_l+0xafc>)
 8005d28:	4a54      	ldr	r2, [pc, #336]	; (8005e7c <_strtod_l+0xb0c>)
 8005d2a:	4019      	ands	r1, r3
 8005d2c:	4291      	cmp	r1, r2
 8005d2e:	4680      	mov	r8, r0
 8005d30:	d95d      	bls.n	8005dee <_strtod_l+0xa7e>
 8005d32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d34:	4b4e      	ldr	r3, [pc, #312]	; (8005e70 <_strtod_l+0xb00>)
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d103      	bne.n	8005d42 <_strtod_l+0x9d2>
 8005d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	f43f ad56 	beq.w	80057ee <_strtod_l+0x47e>
 8005d42:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005d46:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005e70 <_strtod_l+0xb00>
 8005d4a:	4650      	mov	r0, sl
 8005d4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005d4e:	f001 fbd5 	bl	80074fc <_Bfree>
 8005d52:	4650      	mov	r0, sl
 8005d54:	9906      	ldr	r1, [sp, #24]
 8005d56:	f001 fbd1 	bl	80074fc <_Bfree>
 8005d5a:	4650      	mov	r0, sl
 8005d5c:	9904      	ldr	r1, [sp, #16]
 8005d5e:	f001 fbcd 	bl	80074fc <_Bfree>
 8005d62:	4659      	mov	r1, fp
 8005d64:	4650      	mov	r0, sl
 8005d66:	f001 fbc9 	bl	80074fc <_Bfree>
 8005d6a:	e627      	b.n	80059bc <_strtod_l+0x64c>
 8005d6c:	f1b8 0f00 	cmp.w	r8, #0
 8005d70:	d119      	bne.n	8005da6 <_strtod_l+0xa36>
 8005d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d78:	b9e3      	cbnz	r3, 8005db4 <_strtod_l+0xa44>
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	4639      	mov	r1, r7
 8005d80:	4b3c      	ldr	r3, [pc, #240]	; (8005e74 <_strtod_l+0xb04>)
 8005d82:	f7fa fe1b 	bl	80009bc <__aeabi_dcmplt>
 8005d86:	b9c8      	cbnz	r0, 8005dbc <_strtod_l+0xa4c>
 8005d88:	2200      	movs	r2, #0
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	4639      	mov	r1, r7
 8005d8e:	4b3c      	ldr	r3, [pc, #240]	; (8005e80 <_strtod_l+0xb10>)
 8005d90:	f7fa fba2 	bl	80004d8 <__aeabi_dmul>
 8005d94:	4604      	mov	r4, r0
 8005d96:	460d      	mov	r5, r1
 8005d98:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005d9c:	9416      	str	r4, [sp, #88]	; 0x58
 8005d9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005da0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005da4:	e7a2      	b.n	8005cec <_strtod_l+0x97c>
 8005da6:	f1b8 0f01 	cmp.w	r8, #1
 8005daa:	d103      	bne.n	8005db4 <_strtod_l+0xa44>
 8005dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f43f ad92 	beq.w	80058d8 <_strtod_l+0x568>
 8005db4:	2600      	movs	r6, #0
 8005db6:	2400      	movs	r4, #0
 8005db8:	4f32      	ldr	r7, [pc, #200]	; (8005e84 <_strtod_l+0xb14>)
 8005dba:	e796      	b.n	8005cea <_strtod_l+0x97a>
 8005dbc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005dbe:	4d30      	ldr	r5, [pc, #192]	; (8005e80 <_strtod_l+0xb10>)
 8005dc0:	e7ea      	b.n	8005d98 <_strtod_l+0xa28>
 8005dc2:	4b2f      	ldr	r3, [pc, #188]	; (8005e80 <_strtod_l+0xb10>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	4639      	mov	r1, r7
 8005dca:	f7fa fb85 	bl	80004d8 <__aeabi_dmul>
 8005dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	460d      	mov	r5, r1
 8005dd4:	b933      	cbnz	r3, 8005de4 <_strtod_l+0xa74>
 8005dd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dda:	9010      	str	r0, [sp, #64]	; 0x40
 8005ddc:	9311      	str	r3, [sp, #68]	; 0x44
 8005dde:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005de2:	e783      	b.n	8005cec <_strtod_l+0x97c>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005dec:	e7f7      	b.n	8005dde <_strtod_l+0xa6e>
 8005dee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005df2:	9b05      	ldr	r3, [sp, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1a8      	bne.n	8005d4a <_strtod_l+0x9da>
 8005df8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005dfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dfe:	0d1b      	lsrs	r3, r3, #20
 8005e00:	051b      	lsls	r3, r3, #20
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d1a1      	bne.n	8005d4a <_strtod_l+0x9da>
 8005e06:	4620      	mov	r0, r4
 8005e08:	4629      	mov	r1, r5
 8005e0a:	f7fa fead 	bl	8000b68 <__aeabi_d2lz>
 8005e0e:	f7fa fb35 	bl	800047c <__aeabi_l2d>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4620      	mov	r0, r4
 8005e18:	4629      	mov	r1, r5
 8005e1a:	f7fa f9a5 	bl	8000168 <__aeabi_dsub>
 8005e1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e24:	ea43 0308 	orr.w	r3, r3, r8
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	460d      	mov	r5, r1
 8005e2e:	d066      	beq.n	8005efe <_strtod_l+0xb8e>
 8005e30:	a309      	add	r3, pc, #36	; (adr r3, 8005e58 <_strtod_l+0xae8>)
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f7fa fdc1 	bl	80009bc <__aeabi_dcmplt>
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	f47f ace2 	bne.w	8005804 <_strtod_l+0x494>
 8005e40:	a307      	add	r3, pc, #28	; (adr r3, 8005e60 <_strtod_l+0xaf0>)
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	4620      	mov	r0, r4
 8005e48:	4629      	mov	r1, r5
 8005e4a:	f7fa fdd5 	bl	80009f8 <__aeabi_dcmpgt>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	f43f af7b 	beq.w	8005d4a <_strtod_l+0x9da>
 8005e54:	e4d6      	b.n	8005804 <_strtod_l+0x494>
 8005e56:	bf00      	nop
 8005e58:	94a03595 	.word	0x94a03595
 8005e5c:	3fdfffff 	.word	0x3fdfffff
 8005e60:	35afe535 	.word	0x35afe535
 8005e64:	3fe00000 	.word	0x3fe00000
 8005e68:	000fffff 	.word	0x000fffff
 8005e6c:	7ff00000 	.word	0x7ff00000
 8005e70:	7fefffff 	.word	0x7fefffff
 8005e74:	3ff00000 	.word	0x3ff00000
 8005e78:	7fe00000 	.word	0x7fe00000
 8005e7c:	7c9fffff 	.word	0x7c9fffff
 8005e80:	3fe00000 	.word	0x3fe00000
 8005e84:	bff00000 	.word	0xbff00000
 8005e88:	9b05      	ldr	r3, [sp, #20]
 8005e8a:	b313      	cbz	r3, 8005ed2 <_strtod_l+0xb62>
 8005e8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e8e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005e92:	d81e      	bhi.n	8005ed2 <_strtod_l+0xb62>
 8005e94:	a326      	add	r3, pc, #152	; (adr r3, 8005f30 <_strtod_l+0xbc0>)
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	f7fa fd97 	bl	80009d0 <__aeabi_dcmple>
 8005ea2:	b190      	cbz	r0, 8005eca <_strtod_l+0xb5a>
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f7fa fdee 	bl	8000a88 <__aeabi_d2uiz>
 8005eac:	2801      	cmp	r0, #1
 8005eae:	bf38      	it	cc
 8005eb0:	2001      	movcc	r0, #1
 8005eb2:	f7fa fa97 	bl	80003e4 <__aeabi_ui2d>
 8005eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eb8:	4604      	mov	r4, r0
 8005eba:	460d      	mov	r5, r1
 8005ebc:	b9d3      	cbnz	r3, 8005ef4 <_strtod_l+0xb84>
 8005ebe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ec2:	9012      	str	r0, [sp, #72]	; 0x48
 8005ec4:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ec6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005eca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ecc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005ed0:	1a9f      	subs	r7, r3, r2
 8005ed2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ed6:	f001 fe41 	bl	8007b5c <__ulp>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4630      	mov	r0, r6
 8005ee0:	4639      	mov	r1, r7
 8005ee2:	f7fa faf9 	bl	80004d8 <__aeabi_dmul>
 8005ee6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005eea:	f7fa f93f 	bl	800016c <__adddf3>
 8005eee:	4680      	mov	r8, r0
 8005ef0:	4689      	mov	r9, r1
 8005ef2:	e77e      	b.n	8005df2 <_strtod_l+0xa82>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005efc:	e7e3      	b.n	8005ec6 <_strtod_l+0xb56>
 8005efe:	a30e      	add	r3, pc, #56	; (adr r3, 8005f38 <_strtod_l+0xbc8>)
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	f7fa fd5a 	bl	80009bc <__aeabi_dcmplt>
 8005f08:	e7a1      	b.n	8005e4e <_strtod_l+0xade>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	930a      	str	r3, [sp, #40]	; 0x28
 8005f0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	f7ff ba71 	b.w	80053fa <_strtod_l+0x8a>
 8005f18:	2a65      	cmp	r2, #101	; 0x65
 8005f1a:	f43f ab63 	beq.w	80055e4 <_strtod_l+0x274>
 8005f1e:	2a45      	cmp	r2, #69	; 0x45
 8005f20:	f43f ab60 	beq.w	80055e4 <_strtod_l+0x274>
 8005f24:	2301      	movs	r3, #1
 8005f26:	f7ff bb95 	b.w	8005654 <_strtod_l+0x2e4>
 8005f2a:	bf00      	nop
 8005f2c:	f3af 8000 	nop.w
 8005f30:	ffc00000 	.word	0xffc00000
 8005f34:	41dfffff 	.word	0x41dfffff
 8005f38:	94a03595 	.word	0x94a03595
 8005f3c:	3fcfffff 	.word	0x3fcfffff

08005f40 <_strtod_r>:
 8005f40:	4b01      	ldr	r3, [pc, #4]	; (8005f48 <_strtod_r+0x8>)
 8005f42:	f7ff ba15 	b.w	8005370 <_strtod_l>
 8005f46:	bf00      	nop
 8005f48:	2000007c 	.word	0x2000007c

08005f4c <_strtol_l.constprop.0>:
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f52:	4680      	mov	r8, r0
 8005f54:	d001      	beq.n	8005f5a <_strtol_l.constprop.0+0xe>
 8005f56:	2b24      	cmp	r3, #36	; 0x24
 8005f58:	d906      	bls.n	8005f68 <_strtol_l.constprop.0+0x1c>
 8005f5a:	f7fe fb23 	bl	80045a4 <__errno>
 8005f5e:	2316      	movs	r3, #22
 8005f60:	6003      	str	r3, [r0, #0]
 8005f62:	2000      	movs	r0, #0
 8005f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f68:	460d      	mov	r5, r1
 8005f6a:	4f35      	ldr	r7, [pc, #212]	; (8006040 <_strtol_l.constprop.0+0xf4>)
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f72:	5de6      	ldrb	r6, [r4, r7]
 8005f74:	f016 0608 	ands.w	r6, r6, #8
 8005f78:	d1f8      	bne.n	8005f6c <_strtol_l.constprop.0+0x20>
 8005f7a:	2c2d      	cmp	r4, #45	; 0x2d
 8005f7c:	d12f      	bne.n	8005fde <_strtol_l.constprop.0+0x92>
 8005f7e:	2601      	movs	r6, #1
 8005f80:	782c      	ldrb	r4, [r5, #0]
 8005f82:	1c85      	adds	r5, r0, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d057      	beq.n	8006038 <_strtol_l.constprop.0+0xec>
 8005f88:	2b10      	cmp	r3, #16
 8005f8a:	d109      	bne.n	8005fa0 <_strtol_l.constprop.0+0x54>
 8005f8c:	2c30      	cmp	r4, #48	; 0x30
 8005f8e:	d107      	bne.n	8005fa0 <_strtol_l.constprop.0+0x54>
 8005f90:	7828      	ldrb	r0, [r5, #0]
 8005f92:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005f96:	2858      	cmp	r0, #88	; 0x58
 8005f98:	d149      	bne.n	800602e <_strtol_l.constprop.0+0xe2>
 8005f9a:	2310      	movs	r3, #16
 8005f9c:	786c      	ldrb	r4, [r5, #1]
 8005f9e:	3502      	adds	r5, #2
 8005fa0:	2700      	movs	r7, #0
 8005fa2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005fa6:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005faa:	fbbe f9f3 	udiv	r9, lr, r3
 8005fae:	4638      	mov	r0, r7
 8005fb0:	fb03 ea19 	mls	sl, r3, r9, lr
 8005fb4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005fb8:	f1bc 0f09 	cmp.w	ip, #9
 8005fbc:	d814      	bhi.n	8005fe8 <_strtol_l.constprop.0+0x9c>
 8005fbe:	4664      	mov	r4, ip
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	dd22      	ble.n	800600a <_strtol_l.constprop.0+0xbe>
 8005fc4:	2f00      	cmp	r7, #0
 8005fc6:	db1d      	blt.n	8006004 <_strtol_l.constprop.0+0xb8>
 8005fc8:	4581      	cmp	r9, r0
 8005fca:	d31b      	bcc.n	8006004 <_strtol_l.constprop.0+0xb8>
 8005fcc:	d101      	bne.n	8005fd2 <_strtol_l.constprop.0+0x86>
 8005fce:	45a2      	cmp	sl, r4
 8005fd0:	db18      	blt.n	8006004 <_strtol_l.constprop.0+0xb8>
 8005fd2:	2701      	movs	r7, #1
 8005fd4:	fb00 4003 	mla	r0, r0, r3, r4
 8005fd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fdc:	e7ea      	b.n	8005fb4 <_strtol_l.constprop.0+0x68>
 8005fde:	2c2b      	cmp	r4, #43	; 0x2b
 8005fe0:	bf04      	itt	eq
 8005fe2:	782c      	ldrbeq	r4, [r5, #0]
 8005fe4:	1c85      	addeq	r5, r0, #2
 8005fe6:	e7cd      	b.n	8005f84 <_strtol_l.constprop.0+0x38>
 8005fe8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005fec:	f1bc 0f19 	cmp.w	ip, #25
 8005ff0:	d801      	bhi.n	8005ff6 <_strtol_l.constprop.0+0xaa>
 8005ff2:	3c37      	subs	r4, #55	; 0x37
 8005ff4:	e7e4      	b.n	8005fc0 <_strtol_l.constprop.0+0x74>
 8005ff6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005ffa:	f1bc 0f19 	cmp.w	ip, #25
 8005ffe:	d804      	bhi.n	800600a <_strtol_l.constprop.0+0xbe>
 8006000:	3c57      	subs	r4, #87	; 0x57
 8006002:	e7dd      	b.n	8005fc0 <_strtol_l.constprop.0+0x74>
 8006004:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006008:	e7e6      	b.n	8005fd8 <_strtol_l.constprop.0+0x8c>
 800600a:	2f00      	cmp	r7, #0
 800600c:	da07      	bge.n	800601e <_strtol_l.constprop.0+0xd2>
 800600e:	2322      	movs	r3, #34	; 0x22
 8006010:	4670      	mov	r0, lr
 8006012:	f8c8 3000 	str.w	r3, [r8]
 8006016:	2a00      	cmp	r2, #0
 8006018:	d0a4      	beq.n	8005f64 <_strtol_l.constprop.0+0x18>
 800601a:	1e69      	subs	r1, r5, #1
 800601c:	e005      	b.n	800602a <_strtol_l.constprop.0+0xde>
 800601e:	b106      	cbz	r6, 8006022 <_strtol_l.constprop.0+0xd6>
 8006020:	4240      	negs	r0, r0
 8006022:	2a00      	cmp	r2, #0
 8006024:	d09e      	beq.n	8005f64 <_strtol_l.constprop.0+0x18>
 8006026:	2f00      	cmp	r7, #0
 8006028:	d1f7      	bne.n	800601a <_strtol_l.constprop.0+0xce>
 800602a:	6011      	str	r1, [r2, #0]
 800602c:	e79a      	b.n	8005f64 <_strtol_l.constprop.0+0x18>
 800602e:	2430      	movs	r4, #48	; 0x30
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1b5      	bne.n	8005fa0 <_strtol_l.constprop.0+0x54>
 8006034:	2308      	movs	r3, #8
 8006036:	e7b3      	b.n	8005fa0 <_strtol_l.constprop.0+0x54>
 8006038:	2c30      	cmp	r4, #48	; 0x30
 800603a:	d0a9      	beq.n	8005f90 <_strtol_l.constprop.0+0x44>
 800603c:	230a      	movs	r3, #10
 800603e:	e7af      	b.n	8005fa0 <_strtol_l.constprop.0+0x54>
 8006040:	080096c9 	.word	0x080096c9

08006044 <_strtol_r>:
 8006044:	f7ff bf82 	b.w	8005f4c <_strtol_l.constprop.0>

08006048 <quorem>:
 8006048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604c:	6903      	ldr	r3, [r0, #16]
 800604e:	690c      	ldr	r4, [r1, #16]
 8006050:	4607      	mov	r7, r0
 8006052:	42a3      	cmp	r3, r4
 8006054:	f2c0 8082 	blt.w	800615c <quorem+0x114>
 8006058:	3c01      	subs	r4, #1
 800605a:	f100 0514 	add.w	r5, r0, #20
 800605e:	f101 0814 	add.w	r8, r1, #20
 8006062:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006066:	9301      	str	r3, [sp, #4]
 8006068:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800606c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006070:	3301      	adds	r3, #1
 8006072:	429a      	cmp	r2, r3
 8006074:	fbb2 f6f3 	udiv	r6, r2, r3
 8006078:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800607c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006080:	d331      	bcc.n	80060e6 <quorem+0x9e>
 8006082:	f04f 0e00 	mov.w	lr, #0
 8006086:	4640      	mov	r0, r8
 8006088:	46ac      	mov	ip, r5
 800608a:	46f2      	mov	sl, lr
 800608c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006090:	b293      	uxth	r3, r2
 8006092:	fb06 e303 	mla	r3, r6, r3, lr
 8006096:	0c12      	lsrs	r2, r2, #16
 8006098:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800609c:	b29b      	uxth	r3, r3
 800609e:	fb06 e202 	mla	r2, r6, r2, lr
 80060a2:	ebaa 0303 	sub.w	r3, sl, r3
 80060a6:	f8dc a000 	ldr.w	sl, [ip]
 80060aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060ae:	fa1f fa8a 	uxth.w	sl, sl
 80060b2:	4453      	add	r3, sl
 80060b4:	f8dc a000 	ldr.w	sl, [ip]
 80060b8:	b292      	uxth	r2, r2
 80060ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80060be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060c8:	4581      	cmp	r9, r0
 80060ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060ce:	f84c 3b04 	str.w	r3, [ip], #4
 80060d2:	d2db      	bcs.n	800608c <quorem+0x44>
 80060d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80060d8:	b92b      	cbnz	r3, 80060e6 <quorem+0x9e>
 80060da:	9b01      	ldr	r3, [sp, #4]
 80060dc:	3b04      	subs	r3, #4
 80060de:	429d      	cmp	r5, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	d32f      	bcc.n	8006144 <quorem+0xfc>
 80060e4:	613c      	str	r4, [r7, #16]
 80060e6:	4638      	mov	r0, r7
 80060e8:	f001 fc90 	bl	8007a0c <__mcmp>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	db25      	blt.n	800613c <quorem+0xf4>
 80060f0:	4628      	mov	r0, r5
 80060f2:	f04f 0c00 	mov.w	ip, #0
 80060f6:	3601      	adds	r6, #1
 80060f8:	f858 1b04 	ldr.w	r1, [r8], #4
 80060fc:	f8d0 e000 	ldr.w	lr, [r0]
 8006100:	b28b      	uxth	r3, r1
 8006102:	ebac 0303 	sub.w	r3, ip, r3
 8006106:	fa1f f28e 	uxth.w	r2, lr
 800610a:	4413      	add	r3, r2
 800610c:	0c0a      	lsrs	r2, r1, #16
 800610e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006112:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006116:	b29b      	uxth	r3, r3
 8006118:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800611c:	45c1      	cmp	r9, r8
 800611e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006122:	f840 3b04 	str.w	r3, [r0], #4
 8006126:	d2e7      	bcs.n	80060f8 <quorem+0xb0>
 8006128:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800612c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006130:	b922      	cbnz	r2, 800613c <quorem+0xf4>
 8006132:	3b04      	subs	r3, #4
 8006134:	429d      	cmp	r5, r3
 8006136:	461a      	mov	r2, r3
 8006138:	d30a      	bcc.n	8006150 <quorem+0x108>
 800613a:	613c      	str	r4, [r7, #16]
 800613c:	4630      	mov	r0, r6
 800613e:	b003      	add	sp, #12
 8006140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006144:	6812      	ldr	r2, [r2, #0]
 8006146:	3b04      	subs	r3, #4
 8006148:	2a00      	cmp	r2, #0
 800614a:	d1cb      	bne.n	80060e4 <quorem+0x9c>
 800614c:	3c01      	subs	r4, #1
 800614e:	e7c6      	b.n	80060de <quorem+0x96>
 8006150:	6812      	ldr	r2, [r2, #0]
 8006152:	3b04      	subs	r3, #4
 8006154:	2a00      	cmp	r2, #0
 8006156:	d1f0      	bne.n	800613a <quorem+0xf2>
 8006158:	3c01      	subs	r4, #1
 800615a:	e7eb      	b.n	8006134 <quorem+0xec>
 800615c:	2000      	movs	r0, #0
 800615e:	e7ee      	b.n	800613e <quorem+0xf6>

08006160 <_dtoa_r>:
 8006160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	4616      	mov	r6, r2
 8006166:	461f      	mov	r7, r3
 8006168:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800616a:	b099      	sub	sp, #100	; 0x64
 800616c:	4605      	mov	r5, r0
 800616e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006172:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006176:	b974      	cbnz	r4, 8006196 <_dtoa_r+0x36>
 8006178:	2010      	movs	r0, #16
 800617a:	f001 f949 	bl	8007410 <malloc>
 800617e:	4602      	mov	r2, r0
 8006180:	6268      	str	r0, [r5, #36]	; 0x24
 8006182:	b920      	cbnz	r0, 800618e <_dtoa_r+0x2e>
 8006184:	21ea      	movs	r1, #234	; 0xea
 8006186:	4ba8      	ldr	r3, [pc, #672]	; (8006428 <_dtoa_r+0x2c8>)
 8006188:	48a8      	ldr	r0, [pc, #672]	; (800642c <_dtoa_r+0x2cc>)
 800618a:	f002 f8b3 	bl	80082f4 <__assert_func>
 800618e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006192:	6004      	str	r4, [r0, #0]
 8006194:	60c4      	str	r4, [r0, #12]
 8006196:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006198:	6819      	ldr	r1, [r3, #0]
 800619a:	b151      	cbz	r1, 80061b2 <_dtoa_r+0x52>
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	2301      	movs	r3, #1
 80061a0:	4093      	lsls	r3, r2
 80061a2:	604a      	str	r2, [r1, #4]
 80061a4:	608b      	str	r3, [r1, #8]
 80061a6:	4628      	mov	r0, r5
 80061a8:	f001 f9a8 	bl	80074fc <_Bfree>
 80061ac:	2200      	movs	r2, #0
 80061ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	1e3b      	subs	r3, r7, #0
 80061b4:	bfaf      	iteee	ge
 80061b6:	2300      	movge	r3, #0
 80061b8:	2201      	movlt	r2, #1
 80061ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061be:	9305      	strlt	r3, [sp, #20]
 80061c0:	bfa8      	it	ge
 80061c2:	f8c8 3000 	strge.w	r3, [r8]
 80061c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80061ca:	4b99      	ldr	r3, [pc, #612]	; (8006430 <_dtoa_r+0x2d0>)
 80061cc:	bfb8      	it	lt
 80061ce:	f8c8 2000 	strlt.w	r2, [r8]
 80061d2:	ea33 0309 	bics.w	r3, r3, r9
 80061d6:	d119      	bne.n	800620c <_dtoa_r+0xac>
 80061d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80061dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061e4:	4333      	orrs	r3, r6
 80061e6:	f000 857f 	beq.w	8006ce8 <_dtoa_r+0xb88>
 80061ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061ec:	b953      	cbnz	r3, 8006204 <_dtoa_r+0xa4>
 80061ee:	4b91      	ldr	r3, [pc, #580]	; (8006434 <_dtoa_r+0x2d4>)
 80061f0:	e022      	b.n	8006238 <_dtoa_r+0xd8>
 80061f2:	4b91      	ldr	r3, [pc, #580]	; (8006438 <_dtoa_r+0x2d8>)
 80061f4:	9303      	str	r3, [sp, #12]
 80061f6:	3308      	adds	r3, #8
 80061f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	9803      	ldr	r0, [sp, #12]
 80061fe:	b019      	add	sp, #100	; 0x64
 8006200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006204:	4b8b      	ldr	r3, [pc, #556]	; (8006434 <_dtoa_r+0x2d4>)
 8006206:	9303      	str	r3, [sp, #12]
 8006208:	3303      	adds	r3, #3
 800620a:	e7f5      	b.n	80061f8 <_dtoa_r+0x98>
 800620c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006210:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006214:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006218:	2200      	movs	r2, #0
 800621a:	2300      	movs	r3, #0
 800621c:	f7fa fbc4 	bl	80009a8 <__aeabi_dcmpeq>
 8006220:	4680      	mov	r8, r0
 8006222:	b158      	cbz	r0, 800623c <_dtoa_r+0xdc>
 8006224:	2301      	movs	r3, #1
 8006226:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 8558 	beq.w	8006ce2 <_dtoa_r+0xb82>
 8006232:	4882      	ldr	r0, [pc, #520]	; (800643c <_dtoa_r+0x2dc>)
 8006234:	6018      	str	r0, [r3, #0]
 8006236:	1e43      	subs	r3, r0, #1
 8006238:	9303      	str	r3, [sp, #12]
 800623a:	e7df      	b.n	80061fc <_dtoa_r+0x9c>
 800623c:	ab16      	add	r3, sp, #88	; 0x58
 800623e:	9301      	str	r3, [sp, #4]
 8006240:	ab17      	add	r3, sp, #92	; 0x5c
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	4628      	mov	r0, r5
 8006246:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800624a:	f001 fd01 	bl	8007c50 <__d2b>
 800624e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006252:	4683      	mov	fp, r0
 8006254:	2c00      	cmp	r4, #0
 8006256:	d07f      	beq.n	8006358 <_dtoa_r+0x1f8>
 8006258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800625c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800625e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006262:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006266:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800626a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800626e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006272:	2200      	movs	r2, #0
 8006274:	4b72      	ldr	r3, [pc, #456]	; (8006440 <_dtoa_r+0x2e0>)
 8006276:	f7f9 ff77 	bl	8000168 <__aeabi_dsub>
 800627a:	a365      	add	r3, pc, #404	; (adr r3, 8006410 <_dtoa_r+0x2b0>)
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	f7fa f92a 	bl	80004d8 <__aeabi_dmul>
 8006284:	a364      	add	r3, pc, #400	; (adr r3, 8006418 <_dtoa_r+0x2b8>)
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	f7f9 ff6f 	bl	800016c <__adddf3>
 800628e:	4606      	mov	r6, r0
 8006290:	4620      	mov	r0, r4
 8006292:	460f      	mov	r7, r1
 8006294:	f7fa f8b6 	bl	8000404 <__aeabi_i2d>
 8006298:	a361      	add	r3, pc, #388	; (adr r3, 8006420 <_dtoa_r+0x2c0>)
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	f7fa f91b 	bl	80004d8 <__aeabi_dmul>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4630      	mov	r0, r6
 80062a8:	4639      	mov	r1, r7
 80062aa:	f7f9 ff5f 	bl	800016c <__adddf3>
 80062ae:	4606      	mov	r6, r0
 80062b0:	460f      	mov	r7, r1
 80062b2:	f7fa fbc1 	bl	8000a38 <__aeabi_d2iz>
 80062b6:	2200      	movs	r2, #0
 80062b8:	4682      	mov	sl, r0
 80062ba:	2300      	movs	r3, #0
 80062bc:	4630      	mov	r0, r6
 80062be:	4639      	mov	r1, r7
 80062c0:	f7fa fb7c 	bl	80009bc <__aeabi_dcmplt>
 80062c4:	b148      	cbz	r0, 80062da <_dtoa_r+0x17a>
 80062c6:	4650      	mov	r0, sl
 80062c8:	f7fa f89c 	bl	8000404 <__aeabi_i2d>
 80062cc:	4632      	mov	r2, r6
 80062ce:	463b      	mov	r3, r7
 80062d0:	f7fa fb6a 	bl	80009a8 <__aeabi_dcmpeq>
 80062d4:	b908      	cbnz	r0, 80062da <_dtoa_r+0x17a>
 80062d6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80062da:	f1ba 0f16 	cmp.w	sl, #22
 80062de:	d858      	bhi.n	8006392 <_dtoa_r+0x232>
 80062e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062e4:	4b57      	ldr	r3, [pc, #348]	; (8006444 <_dtoa_r+0x2e4>)
 80062e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80062ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ee:	f7fa fb65 	bl	80009bc <__aeabi_dcmplt>
 80062f2:	2800      	cmp	r0, #0
 80062f4:	d04f      	beq.n	8006396 <_dtoa_r+0x236>
 80062f6:	2300      	movs	r3, #0
 80062f8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80062fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80062fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006300:	1b1c      	subs	r4, r3, r4
 8006302:	1e63      	subs	r3, r4, #1
 8006304:	9309      	str	r3, [sp, #36]	; 0x24
 8006306:	bf49      	itett	mi
 8006308:	f1c4 0301 	rsbmi	r3, r4, #1
 800630c:	2300      	movpl	r3, #0
 800630e:	9306      	strmi	r3, [sp, #24]
 8006310:	2300      	movmi	r3, #0
 8006312:	bf54      	ite	pl
 8006314:	9306      	strpl	r3, [sp, #24]
 8006316:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006318:	f1ba 0f00 	cmp.w	sl, #0
 800631c:	db3d      	blt.n	800639a <_dtoa_r+0x23a>
 800631e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006320:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006324:	4453      	add	r3, sl
 8006326:	9309      	str	r3, [sp, #36]	; 0x24
 8006328:	2300      	movs	r3, #0
 800632a:	930a      	str	r3, [sp, #40]	; 0x28
 800632c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800632e:	2b09      	cmp	r3, #9
 8006330:	f200 808c 	bhi.w	800644c <_dtoa_r+0x2ec>
 8006334:	2b05      	cmp	r3, #5
 8006336:	bfc4      	itt	gt
 8006338:	3b04      	subgt	r3, #4
 800633a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800633c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800633e:	bfc8      	it	gt
 8006340:	2400      	movgt	r4, #0
 8006342:	f1a3 0302 	sub.w	r3, r3, #2
 8006346:	bfd8      	it	le
 8006348:	2401      	movle	r4, #1
 800634a:	2b03      	cmp	r3, #3
 800634c:	f200 808a 	bhi.w	8006464 <_dtoa_r+0x304>
 8006350:	e8df f003 	tbb	[pc, r3]
 8006354:	5b4d4f2d 	.word	0x5b4d4f2d
 8006358:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800635c:	441c      	add	r4, r3
 800635e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006362:	2b20      	cmp	r3, #32
 8006364:	bfc3      	ittte	gt
 8006366:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800636a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800636e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006372:	f1c3 0320 	rsble	r3, r3, #32
 8006376:	bfc6      	itte	gt
 8006378:	fa26 f000 	lsrgt.w	r0, r6, r0
 800637c:	4318      	orrgt	r0, r3
 800637e:	fa06 f003 	lslle.w	r0, r6, r3
 8006382:	f7fa f82f 	bl	80003e4 <__aeabi_ui2d>
 8006386:	2301      	movs	r3, #1
 8006388:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800638c:	3c01      	subs	r4, #1
 800638e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006390:	e76f      	b.n	8006272 <_dtoa_r+0x112>
 8006392:	2301      	movs	r3, #1
 8006394:	e7b2      	b.n	80062fc <_dtoa_r+0x19c>
 8006396:	900f      	str	r0, [sp, #60]	; 0x3c
 8006398:	e7b1      	b.n	80062fe <_dtoa_r+0x19e>
 800639a:	9b06      	ldr	r3, [sp, #24]
 800639c:	eba3 030a 	sub.w	r3, r3, sl
 80063a0:	9306      	str	r3, [sp, #24]
 80063a2:	f1ca 0300 	rsb	r3, sl, #0
 80063a6:	930a      	str	r3, [sp, #40]	; 0x28
 80063a8:	2300      	movs	r3, #0
 80063aa:	930e      	str	r3, [sp, #56]	; 0x38
 80063ac:	e7be      	b.n	800632c <_dtoa_r+0x1cc>
 80063ae:	2300      	movs	r3, #0
 80063b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80063b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	dc58      	bgt.n	800646a <_dtoa_r+0x30a>
 80063b8:	f04f 0901 	mov.w	r9, #1
 80063bc:	464b      	mov	r3, r9
 80063be:	f8cd 9020 	str.w	r9, [sp, #32]
 80063c2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80063c6:	2200      	movs	r2, #0
 80063c8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80063ca:	6042      	str	r2, [r0, #4]
 80063cc:	2204      	movs	r2, #4
 80063ce:	f102 0614 	add.w	r6, r2, #20
 80063d2:	429e      	cmp	r6, r3
 80063d4:	6841      	ldr	r1, [r0, #4]
 80063d6:	d94e      	bls.n	8006476 <_dtoa_r+0x316>
 80063d8:	4628      	mov	r0, r5
 80063da:	f001 f84f 	bl	800747c <_Balloc>
 80063de:	9003      	str	r0, [sp, #12]
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d14c      	bne.n	800647e <_dtoa_r+0x31e>
 80063e4:	4602      	mov	r2, r0
 80063e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063ea:	4b17      	ldr	r3, [pc, #92]	; (8006448 <_dtoa_r+0x2e8>)
 80063ec:	e6cc      	b.n	8006188 <_dtoa_r+0x28>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e7de      	b.n	80063b0 <_dtoa_r+0x250>
 80063f2:	2300      	movs	r3, #0
 80063f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80063f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063f8:	eb0a 0903 	add.w	r9, sl, r3
 80063fc:	f109 0301 	add.w	r3, r9, #1
 8006400:	2b01      	cmp	r3, #1
 8006402:	9308      	str	r3, [sp, #32]
 8006404:	bfb8      	it	lt
 8006406:	2301      	movlt	r3, #1
 8006408:	e7dd      	b.n	80063c6 <_dtoa_r+0x266>
 800640a:	2301      	movs	r3, #1
 800640c:	e7f2      	b.n	80063f4 <_dtoa_r+0x294>
 800640e:	bf00      	nop
 8006410:	636f4361 	.word	0x636f4361
 8006414:	3fd287a7 	.word	0x3fd287a7
 8006418:	8b60c8b3 	.word	0x8b60c8b3
 800641c:	3fc68a28 	.word	0x3fc68a28
 8006420:	509f79fb 	.word	0x509f79fb
 8006424:	3fd34413 	.word	0x3fd34413
 8006428:	080097d6 	.word	0x080097d6
 800642c:	080097ed 	.word	0x080097ed
 8006430:	7ff00000 	.word	0x7ff00000
 8006434:	080097d2 	.word	0x080097d2
 8006438:	080097c9 	.word	0x080097c9
 800643c:	0800964d 	.word	0x0800964d
 8006440:	3ff80000 	.word	0x3ff80000
 8006444:	08009958 	.word	0x08009958
 8006448:	08009848 	.word	0x08009848
 800644c:	2401      	movs	r4, #1
 800644e:	2300      	movs	r3, #0
 8006450:	940b      	str	r4, [sp, #44]	; 0x2c
 8006452:	9322      	str	r3, [sp, #136]	; 0x88
 8006454:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006458:	2200      	movs	r2, #0
 800645a:	2312      	movs	r3, #18
 800645c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006460:	9223      	str	r2, [sp, #140]	; 0x8c
 8006462:	e7b0      	b.n	80063c6 <_dtoa_r+0x266>
 8006464:	2301      	movs	r3, #1
 8006466:	930b      	str	r3, [sp, #44]	; 0x2c
 8006468:	e7f4      	b.n	8006454 <_dtoa_r+0x2f4>
 800646a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800646e:	464b      	mov	r3, r9
 8006470:	f8cd 9020 	str.w	r9, [sp, #32]
 8006474:	e7a7      	b.n	80063c6 <_dtoa_r+0x266>
 8006476:	3101      	adds	r1, #1
 8006478:	6041      	str	r1, [r0, #4]
 800647a:	0052      	lsls	r2, r2, #1
 800647c:	e7a7      	b.n	80063ce <_dtoa_r+0x26e>
 800647e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006480:	9a03      	ldr	r2, [sp, #12]
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	9b08      	ldr	r3, [sp, #32]
 8006486:	2b0e      	cmp	r3, #14
 8006488:	f200 80a8 	bhi.w	80065dc <_dtoa_r+0x47c>
 800648c:	2c00      	cmp	r4, #0
 800648e:	f000 80a5 	beq.w	80065dc <_dtoa_r+0x47c>
 8006492:	f1ba 0f00 	cmp.w	sl, #0
 8006496:	dd34      	ble.n	8006502 <_dtoa_r+0x3a2>
 8006498:	4a9a      	ldr	r2, [pc, #616]	; (8006704 <_dtoa_r+0x5a4>)
 800649a:	f00a 030f 	and.w	r3, sl, #15
 800649e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80064a2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80064a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80064ae:	ea4f 142a 	mov.w	r4, sl, asr #4
 80064b2:	d016      	beq.n	80064e2 <_dtoa_r+0x382>
 80064b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064b8:	4b93      	ldr	r3, [pc, #588]	; (8006708 <_dtoa_r+0x5a8>)
 80064ba:	2703      	movs	r7, #3
 80064bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064c0:	f7fa f934 	bl	800072c <__aeabi_ddiv>
 80064c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064c8:	f004 040f 	and.w	r4, r4, #15
 80064cc:	4e8e      	ldr	r6, [pc, #568]	; (8006708 <_dtoa_r+0x5a8>)
 80064ce:	b954      	cbnz	r4, 80064e6 <_dtoa_r+0x386>
 80064d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064d8:	f7fa f928 	bl	800072c <__aeabi_ddiv>
 80064dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064e0:	e029      	b.n	8006536 <_dtoa_r+0x3d6>
 80064e2:	2702      	movs	r7, #2
 80064e4:	e7f2      	b.n	80064cc <_dtoa_r+0x36c>
 80064e6:	07e1      	lsls	r1, r4, #31
 80064e8:	d508      	bpl.n	80064fc <_dtoa_r+0x39c>
 80064ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064f2:	f7f9 fff1 	bl	80004d8 <__aeabi_dmul>
 80064f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064fa:	3701      	adds	r7, #1
 80064fc:	1064      	asrs	r4, r4, #1
 80064fe:	3608      	adds	r6, #8
 8006500:	e7e5      	b.n	80064ce <_dtoa_r+0x36e>
 8006502:	f000 80a5 	beq.w	8006650 <_dtoa_r+0x4f0>
 8006506:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800650a:	f1ca 0400 	rsb	r4, sl, #0
 800650e:	4b7d      	ldr	r3, [pc, #500]	; (8006704 <_dtoa_r+0x5a4>)
 8006510:	f004 020f 	and.w	r2, r4, #15
 8006514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651c:	f7f9 ffdc 	bl	80004d8 <__aeabi_dmul>
 8006520:	2702      	movs	r7, #2
 8006522:	2300      	movs	r3, #0
 8006524:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006528:	4e77      	ldr	r6, [pc, #476]	; (8006708 <_dtoa_r+0x5a8>)
 800652a:	1124      	asrs	r4, r4, #4
 800652c:	2c00      	cmp	r4, #0
 800652e:	f040 8084 	bne.w	800663a <_dtoa_r+0x4da>
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1d2      	bne.n	80064dc <_dtoa_r+0x37c>
 8006536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 808b 	beq.w	8006654 <_dtoa_r+0x4f4>
 800653e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006542:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006546:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800654a:	2200      	movs	r2, #0
 800654c:	4b6f      	ldr	r3, [pc, #444]	; (800670c <_dtoa_r+0x5ac>)
 800654e:	f7fa fa35 	bl	80009bc <__aeabi_dcmplt>
 8006552:	2800      	cmp	r0, #0
 8006554:	d07e      	beq.n	8006654 <_dtoa_r+0x4f4>
 8006556:	9b08      	ldr	r3, [sp, #32]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d07b      	beq.n	8006654 <_dtoa_r+0x4f4>
 800655c:	f1b9 0f00 	cmp.w	r9, #0
 8006560:	dd38      	ble.n	80065d4 <_dtoa_r+0x474>
 8006562:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006566:	2200      	movs	r2, #0
 8006568:	4b69      	ldr	r3, [pc, #420]	; (8006710 <_dtoa_r+0x5b0>)
 800656a:	f7f9 ffb5 	bl	80004d8 <__aeabi_dmul>
 800656e:	464c      	mov	r4, r9
 8006570:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006574:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8006578:	3701      	adds	r7, #1
 800657a:	4638      	mov	r0, r7
 800657c:	f7f9 ff42 	bl	8000404 <__aeabi_i2d>
 8006580:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006584:	f7f9 ffa8 	bl	80004d8 <__aeabi_dmul>
 8006588:	2200      	movs	r2, #0
 800658a:	4b62      	ldr	r3, [pc, #392]	; (8006714 <_dtoa_r+0x5b4>)
 800658c:	f7f9 fdee 	bl	800016c <__adddf3>
 8006590:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006594:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006598:	9611      	str	r6, [sp, #68]	; 0x44
 800659a:	2c00      	cmp	r4, #0
 800659c:	d15d      	bne.n	800665a <_dtoa_r+0x4fa>
 800659e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065a2:	2200      	movs	r2, #0
 80065a4:	4b5c      	ldr	r3, [pc, #368]	; (8006718 <_dtoa_r+0x5b8>)
 80065a6:	f7f9 fddf 	bl	8000168 <__aeabi_dsub>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065b2:	4633      	mov	r3, r6
 80065b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80065b6:	f7fa fa1f 	bl	80009f8 <__aeabi_dcmpgt>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	f040 829c 	bne.w	8006af8 <_dtoa_r+0x998>
 80065c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80065c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80065ca:	f7fa f9f7 	bl	80009bc <__aeabi_dcmplt>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	f040 8290 	bne.w	8006af4 <_dtoa_r+0x994>
 80065d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80065d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80065dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f2c0 8152 	blt.w	8006888 <_dtoa_r+0x728>
 80065e4:	f1ba 0f0e 	cmp.w	sl, #14
 80065e8:	f300 814e 	bgt.w	8006888 <_dtoa_r+0x728>
 80065ec:	4b45      	ldr	r3, [pc, #276]	; (8006704 <_dtoa_r+0x5a4>)
 80065ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80065f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80065fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f280 80db 	bge.w	80067b8 <_dtoa_r+0x658>
 8006602:	9b08      	ldr	r3, [sp, #32]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f300 80d7 	bgt.w	80067b8 <_dtoa_r+0x658>
 800660a:	f040 8272 	bne.w	8006af2 <_dtoa_r+0x992>
 800660e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006612:	2200      	movs	r2, #0
 8006614:	4b40      	ldr	r3, [pc, #256]	; (8006718 <_dtoa_r+0x5b8>)
 8006616:	f7f9 ff5f 	bl	80004d8 <__aeabi_dmul>
 800661a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800661e:	f7fa f9e1 	bl	80009e4 <__aeabi_dcmpge>
 8006622:	9c08      	ldr	r4, [sp, #32]
 8006624:	4626      	mov	r6, r4
 8006626:	2800      	cmp	r0, #0
 8006628:	f040 8248 	bne.w	8006abc <_dtoa_r+0x95c>
 800662c:	2331      	movs	r3, #49	; 0x31
 800662e:	9f03      	ldr	r7, [sp, #12]
 8006630:	f10a 0a01 	add.w	sl, sl, #1
 8006634:	f807 3b01 	strb.w	r3, [r7], #1
 8006638:	e244      	b.n	8006ac4 <_dtoa_r+0x964>
 800663a:	07e2      	lsls	r2, r4, #31
 800663c:	d505      	bpl.n	800664a <_dtoa_r+0x4ea>
 800663e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006642:	f7f9 ff49 	bl	80004d8 <__aeabi_dmul>
 8006646:	2301      	movs	r3, #1
 8006648:	3701      	adds	r7, #1
 800664a:	1064      	asrs	r4, r4, #1
 800664c:	3608      	adds	r6, #8
 800664e:	e76d      	b.n	800652c <_dtoa_r+0x3cc>
 8006650:	2702      	movs	r7, #2
 8006652:	e770      	b.n	8006536 <_dtoa_r+0x3d6>
 8006654:	46d0      	mov	r8, sl
 8006656:	9c08      	ldr	r4, [sp, #32]
 8006658:	e78f      	b.n	800657a <_dtoa_r+0x41a>
 800665a:	9903      	ldr	r1, [sp, #12]
 800665c:	4b29      	ldr	r3, [pc, #164]	; (8006704 <_dtoa_r+0x5a4>)
 800665e:	4421      	add	r1, r4
 8006660:	9112      	str	r1, [sp, #72]	; 0x48
 8006662:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006664:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006668:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800666c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006670:	2900      	cmp	r1, #0
 8006672:	d055      	beq.n	8006720 <_dtoa_r+0x5c0>
 8006674:	2000      	movs	r0, #0
 8006676:	4929      	ldr	r1, [pc, #164]	; (800671c <_dtoa_r+0x5bc>)
 8006678:	f7fa f858 	bl	800072c <__aeabi_ddiv>
 800667c:	463b      	mov	r3, r7
 800667e:	4632      	mov	r2, r6
 8006680:	f7f9 fd72 	bl	8000168 <__aeabi_dsub>
 8006684:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006688:	9f03      	ldr	r7, [sp, #12]
 800668a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800668e:	f7fa f9d3 	bl	8000a38 <__aeabi_d2iz>
 8006692:	4604      	mov	r4, r0
 8006694:	f7f9 feb6 	bl	8000404 <__aeabi_i2d>
 8006698:	4602      	mov	r2, r0
 800669a:	460b      	mov	r3, r1
 800669c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066a0:	f7f9 fd62 	bl	8000168 <__aeabi_dsub>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	3430      	adds	r4, #48	; 0x30
 80066aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066b2:	f807 4b01 	strb.w	r4, [r7], #1
 80066b6:	f7fa f981 	bl	80009bc <__aeabi_dcmplt>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	d174      	bne.n	80067a8 <_dtoa_r+0x648>
 80066be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066c2:	2000      	movs	r0, #0
 80066c4:	4911      	ldr	r1, [pc, #68]	; (800670c <_dtoa_r+0x5ac>)
 80066c6:	f7f9 fd4f 	bl	8000168 <__aeabi_dsub>
 80066ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066ce:	f7fa f975 	bl	80009bc <__aeabi_dcmplt>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	f040 80b7 	bne.w	8006846 <_dtoa_r+0x6e6>
 80066d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066da:	429f      	cmp	r7, r3
 80066dc:	f43f af7a 	beq.w	80065d4 <_dtoa_r+0x474>
 80066e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066e4:	2200      	movs	r2, #0
 80066e6:	4b0a      	ldr	r3, [pc, #40]	; (8006710 <_dtoa_r+0x5b0>)
 80066e8:	f7f9 fef6 	bl	80004d8 <__aeabi_dmul>
 80066ec:	2200      	movs	r2, #0
 80066ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066f6:	4b06      	ldr	r3, [pc, #24]	; (8006710 <_dtoa_r+0x5b0>)
 80066f8:	f7f9 feee 	bl	80004d8 <__aeabi_dmul>
 80066fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006700:	e7c3      	b.n	800668a <_dtoa_r+0x52a>
 8006702:	bf00      	nop
 8006704:	08009958 	.word	0x08009958
 8006708:	08009930 	.word	0x08009930
 800670c:	3ff00000 	.word	0x3ff00000
 8006710:	40240000 	.word	0x40240000
 8006714:	401c0000 	.word	0x401c0000
 8006718:	40140000 	.word	0x40140000
 800671c:	3fe00000 	.word	0x3fe00000
 8006720:	4630      	mov	r0, r6
 8006722:	4639      	mov	r1, r7
 8006724:	f7f9 fed8 	bl	80004d8 <__aeabi_dmul>
 8006728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800672a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800672e:	9c03      	ldr	r4, [sp, #12]
 8006730:	9314      	str	r3, [sp, #80]	; 0x50
 8006732:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006736:	f7fa f97f 	bl	8000a38 <__aeabi_d2iz>
 800673a:	9015      	str	r0, [sp, #84]	; 0x54
 800673c:	f7f9 fe62 	bl	8000404 <__aeabi_i2d>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006748:	f7f9 fd0e 	bl	8000168 <__aeabi_dsub>
 800674c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800674e:	4606      	mov	r6, r0
 8006750:	3330      	adds	r3, #48	; 0x30
 8006752:	f804 3b01 	strb.w	r3, [r4], #1
 8006756:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006758:	460f      	mov	r7, r1
 800675a:	429c      	cmp	r4, r3
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	d124      	bne.n	80067ac <_dtoa_r+0x64c>
 8006762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006766:	4bb0      	ldr	r3, [pc, #704]	; (8006a28 <_dtoa_r+0x8c8>)
 8006768:	f7f9 fd00 	bl	800016c <__adddf3>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4630      	mov	r0, r6
 8006772:	4639      	mov	r1, r7
 8006774:	f7fa f940 	bl	80009f8 <__aeabi_dcmpgt>
 8006778:	2800      	cmp	r0, #0
 800677a:	d163      	bne.n	8006844 <_dtoa_r+0x6e4>
 800677c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006780:	2000      	movs	r0, #0
 8006782:	49a9      	ldr	r1, [pc, #676]	; (8006a28 <_dtoa_r+0x8c8>)
 8006784:	f7f9 fcf0 	bl	8000168 <__aeabi_dsub>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4630      	mov	r0, r6
 800678e:	4639      	mov	r1, r7
 8006790:	f7fa f914 	bl	80009bc <__aeabi_dcmplt>
 8006794:	2800      	cmp	r0, #0
 8006796:	f43f af1d 	beq.w	80065d4 <_dtoa_r+0x474>
 800679a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800679c:	1e7b      	subs	r3, r7, #1
 800679e:	9314      	str	r3, [sp, #80]	; 0x50
 80067a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80067a4:	2b30      	cmp	r3, #48	; 0x30
 80067a6:	d0f8      	beq.n	800679a <_dtoa_r+0x63a>
 80067a8:	46c2      	mov	sl, r8
 80067aa:	e03b      	b.n	8006824 <_dtoa_r+0x6c4>
 80067ac:	4b9f      	ldr	r3, [pc, #636]	; (8006a2c <_dtoa_r+0x8cc>)
 80067ae:	f7f9 fe93 	bl	80004d8 <__aeabi_dmul>
 80067b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067b6:	e7bc      	b.n	8006732 <_dtoa_r+0x5d2>
 80067b8:	9f03      	ldr	r7, [sp, #12]
 80067ba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80067be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067c2:	4640      	mov	r0, r8
 80067c4:	4649      	mov	r1, r9
 80067c6:	f7f9 ffb1 	bl	800072c <__aeabi_ddiv>
 80067ca:	f7fa f935 	bl	8000a38 <__aeabi_d2iz>
 80067ce:	4604      	mov	r4, r0
 80067d0:	f7f9 fe18 	bl	8000404 <__aeabi_i2d>
 80067d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067d8:	f7f9 fe7e 	bl	80004d8 <__aeabi_dmul>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4640      	mov	r0, r8
 80067e2:	4649      	mov	r1, r9
 80067e4:	f7f9 fcc0 	bl	8000168 <__aeabi_dsub>
 80067e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80067ec:	f807 6b01 	strb.w	r6, [r7], #1
 80067f0:	9e03      	ldr	r6, [sp, #12]
 80067f2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80067f6:	1bbe      	subs	r6, r7, r6
 80067f8:	45b4      	cmp	ip, r6
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	d136      	bne.n	800686e <_dtoa_r+0x70e>
 8006800:	f7f9 fcb4 	bl	800016c <__adddf3>
 8006804:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006808:	4680      	mov	r8, r0
 800680a:	4689      	mov	r9, r1
 800680c:	f7fa f8f4 	bl	80009f8 <__aeabi_dcmpgt>
 8006810:	bb58      	cbnz	r0, 800686a <_dtoa_r+0x70a>
 8006812:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006816:	4640      	mov	r0, r8
 8006818:	4649      	mov	r1, r9
 800681a:	f7fa f8c5 	bl	80009a8 <__aeabi_dcmpeq>
 800681e:	b108      	cbz	r0, 8006824 <_dtoa_r+0x6c4>
 8006820:	07e1      	lsls	r1, r4, #31
 8006822:	d422      	bmi.n	800686a <_dtoa_r+0x70a>
 8006824:	4628      	mov	r0, r5
 8006826:	4659      	mov	r1, fp
 8006828:	f000 fe68 	bl	80074fc <_Bfree>
 800682c:	2300      	movs	r3, #0
 800682e:	703b      	strb	r3, [r7, #0]
 8006830:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006832:	f10a 0001 	add.w	r0, sl, #1
 8006836:	6018      	str	r0, [r3, #0]
 8006838:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800683a:	2b00      	cmp	r3, #0
 800683c:	f43f acde 	beq.w	80061fc <_dtoa_r+0x9c>
 8006840:	601f      	str	r7, [r3, #0]
 8006842:	e4db      	b.n	80061fc <_dtoa_r+0x9c>
 8006844:	4627      	mov	r7, r4
 8006846:	463b      	mov	r3, r7
 8006848:	461f      	mov	r7, r3
 800684a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800684e:	2a39      	cmp	r2, #57	; 0x39
 8006850:	d107      	bne.n	8006862 <_dtoa_r+0x702>
 8006852:	9a03      	ldr	r2, [sp, #12]
 8006854:	429a      	cmp	r2, r3
 8006856:	d1f7      	bne.n	8006848 <_dtoa_r+0x6e8>
 8006858:	2230      	movs	r2, #48	; 0x30
 800685a:	9903      	ldr	r1, [sp, #12]
 800685c:	f108 0801 	add.w	r8, r8, #1
 8006860:	700a      	strb	r2, [r1, #0]
 8006862:	781a      	ldrb	r2, [r3, #0]
 8006864:	3201      	adds	r2, #1
 8006866:	701a      	strb	r2, [r3, #0]
 8006868:	e79e      	b.n	80067a8 <_dtoa_r+0x648>
 800686a:	46d0      	mov	r8, sl
 800686c:	e7eb      	b.n	8006846 <_dtoa_r+0x6e6>
 800686e:	2200      	movs	r2, #0
 8006870:	4b6e      	ldr	r3, [pc, #440]	; (8006a2c <_dtoa_r+0x8cc>)
 8006872:	f7f9 fe31 	bl	80004d8 <__aeabi_dmul>
 8006876:	2200      	movs	r2, #0
 8006878:	2300      	movs	r3, #0
 800687a:	4680      	mov	r8, r0
 800687c:	4689      	mov	r9, r1
 800687e:	f7fa f893 	bl	80009a8 <__aeabi_dcmpeq>
 8006882:	2800      	cmp	r0, #0
 8006884:	d09b      	beq.n	80067be <_dtoa_r+0x65e>
 8006886:	e7cd      	b.n	8006824 <_dtoa_r+0x6c4>
 8006888:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800688a:	2a00      	cmp	r2, #0
 800688c:	f000 80d0 	beq.w	8006a30 <_dtoa_r+0x8d0>
 8006890:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006892:	2a01      	cmp	r2, #1
 8006894:	f300 80ae 	bgt.w	80069f4 <_dtoa_r+0x894>
 8006898:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800689a:	2a00      	cmp	r2, #0
 800689c:	f000 80a6 	beq.w	80069ec <_dtoa_r+0x88c>
 80068a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80068a6:	9f06      	ldr	r7, [sp, #24]
 80068a8:	9a06      	ldr	r2, [sp, #24]
 80068aa:	2101      	movs	r1, #1
 80068ac:	441a      	add	r2, r3
 80068ae:	9206      	str	r2, [sp, #24]
 80068b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068b2:	4628      	mov	r0, r5
 80068b4:	441a      	add	r2, r3
 80068b6:	9209      	str	r2, [sp, #36]	; 0x24
 80068b8:	f000 ff20 	bl	80076fc <__i2b>
 80068bc:	4606      	mov	r6, r0
 80068be:	2f00      	cmp	r7, #0
 80068c0:	dd0c      	ble.n	80068dc <_dtoa_r+0x77c>
 80068c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	dd09      	ble.n	80068dc <_dtoa_r+0x77c>
 80068c8:	42bb      	cmp	r3, r7
 80068ca:	bfa8      	it	ge
 80068cc:	463b      	movge	r3, r7
 80068ce:	9a06      	ldr	r2, [sp, #24]
 80068d0:	1aff      	subs	r7, r7, r3
 80068d2:	1ad2      	subs	r2, r2, r3
 80068d4:	9206      	str	r2, [sp, #24]
 80068d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	9309      	str	r3, [sp, #36]	; 0x24
 80068dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068de:	b1f3      	cbz	r3, 800691e <_dtoa_r+0x7be>
 80068e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 80a8 	beq.w	8006a38 <_dtoa_r+0x8d8>
 80068e8:	2c00      	cmp	r4, #0
 80068ea:	dd10      	ble.n	800690e <_dtoa_r+0x7ae>
 80068ec:	4631      	mov	r1, r6
 80068ee:	4622      	mov	r2, r4
 80068f0:	4628      	mov	r0, r5
 80068f2:	f000 ffc1 	bl	8007878 <__pow5mult>
 80068f6:	465a      	mov	r2, fp
 80068f8:	4601      	mov	r1, r0
 80068fa:	4606      	mov	r6, r0
 80068fc:	4628      	mov	r0, r5
 80068fe:	f000 ff13 	bl	8007728 <__multiply>
 8006902:	4680      	mov	r8, r0
 8006904:	4659      	mov	r1, fp
 8006906:	4628      	mov	r0, r5
 8006908:	f000 fdf8 	bl	80074fc <_Bfree>
 800690c:	46c3      	mov	fp, r8
 800690e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006910:	1b1a      	subs	r2, r3, r4
 8006912:	d004      	beq.n	800691e <_dtoa_r+0x7be>
 8006914:	4659      	mov	r1, fp
 8006916:	4628      	mov	r0, r5
 8006918:	f000 ffae 	bl	8007878 <__pow5mult>
 800691c:	4683      	mov	fp, r0
 800691e:	2101      	movs	r1, #1
 8006920:	4628      	mov	r0, r5
 8006922:	f000 feeb 	bl	80076fc <__i2b>
 8006926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006928:	4604      	mov	r4, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	f340 8086 	ble.w	8006a3c <_dtoa_r+0x8dc>
 8006930:	461a      	mov	r2, r3
 8006932:	4601      	mov	r1, r0
 8006934:	4628      	mov	r0, r5
 8006936:	f000 ff9f 	bl	8007878 <__pow5mult>
 800693a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800693c:	4604      	mov	r4, r0
 800693e:	2b01      	cmp	r3, #1
 8006940:	dd7f      	ble.n	8006a42 <_dtoa_r+0x8e2>
 8006942:	f04f 0800 	mov.w	r8, #0
 8006946:	6923      	ldr	r3, [r4, #16]
 8006948:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800694c:	6918      	ldr	r0, [r3, #16]
 800694e:	f000 fe87 	bl	8007660 <__hi0bits>
 8006952:	f1c0 0020 	rsb	r0, r0, #32
 8006956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006958:	4418      	add	r0, r3
 800695a:	f010 001f 	ands.w	r0, r0, #31
 800695e:	f000 8092 	beq.w	8006a86 <_dtoa_r+0x926>
 8006962:	f1c0 0320 	rsb	r3, r0, #32
 8006966:	2b04      	cmp	r3, #4
 8006968:	f340 808a 	ble.w	8006a80 <_dtoa_r+0x920>
 800696c:	f1c0 001c 	rsb	r0, r0, #28
 8006970:	9b06      	ldr	r3, [sp, #24]
 8006972:	4407      	add	r7, r0
 8006974:	4403      	add	r3, r0
 8006976:	9306      	str	r3, [sp, #24]
 8006978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800697a:	4403      	add	r3, r0
 800697c:	9309      	str	r3, [sp, #36]	; 0x24
 800697e:	9b06      	ldr	r3, [sp, #24]
 8006980:	2b00      	cmp	r3, #0
 8006982:	dd05      	ble.n	8006990 <_dtoa_r+0x830>
 8006984:	4659      	mov	r1, fp
 8006986:	461a      	mov	r2, r3
 8006988:	4628      	mov	r0, r5
 800698a:	f000 ffcf 	bl	800792c <__lshift>
 800698e:	4683      	mov	fp, r0
 8006990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006992:	2b00      	cmp	r3, #0
 8006994:	dd05      	ble.n	80069a2 <_dtoa_r+0x842>
 8006996:	4621      	mov	r1, r4
 8006998:	461a      	mov	r2, r3
 800699a:	4628      	mov	r0, r5
 800699c:	f000 ffc6 	bl	800792c <__lshift>
 80069a0:	4604      	mov	r4, r0
 80069a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d070      	beq.n	8006a8a <_dtoa_r+0x92a>
 80069a8:	4621      	mov	r1, r4
 80069aa:	4658      	mov	r0, fp
 80069ac:	f001 f82e 	bl	8007a0c <__mcmp>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	da6a      	bge.n	8006a8a <_dtoa_r+0x92a>
 80069b4:	2300      	movs	r3, #0
 80069b6:	4659      	mov	r1, fp
 80069b8:	220a      	movs	r2, #10
 80069ba:	4628      	mov	r0, r5
 80069bc:	f000 fdc0 	bl	8007540 <__multadd>
 80069c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069c2:	4683      	mov	fp, r0
 80069c4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 8194 	beq.w	8006cf6 <_dtoa_r+0xb96>
 80069ce:	4631      	mov	r1, r6
 80069d0:	2300      	movs	r3, #0
 80069d2:	220a      	movs	r2, #10
 80069d4:	4628      	mov	r0, r5
 80069d6:	f000 fdb3 	bl	8007540 <__multadd>
 80069da:	f1b9 0f00 	cmp.w	r9, #0
 80069de:	4606      	mov	r6, r0
 80069e0:	f300 8093 	bgt.w	8006b0a <_dtoa_r+0x9aa>
 80069e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	dc57      	bgt.n	8006a9a <_dtoa_r+0x93a>
 80069ea:	e08e      	b.n	8006b0a <_dtoa_r+0x9aa>
 80069ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80069ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069f2:	e757      	b.n	80068a4 <_dtoa_r+0x744>
 80069f4:	9b08      	ldr	r3, [sp, #32]
 80069f6:	1e5c      	subs	r4, r3, #1
 80069f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069fa:	42a3      	cmp	r3, r4
 80069fc:	bfb7      	itett	lt
 80069fe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006a00:	1b1c      	subge	r4, r3, r4
 8006a02:	1ae2      	sublt	r2, r4, r3
 8006a04:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006a06:	bfbe      	ittt	lt
 8006a08:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006a0a:	189b      	addlt	r3, r3, r2
 8006a0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006a0e:	9b08      	ldr	r3, [sp, #32]
 8006a10:	bfb8      	it	lt
 8006a12:	2400      	movlt	r4, #0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	bfbb      	ittet	lt
 8006a18:	9b06      	ldrlt	r3, [sp, #24]
 8006a1a:	9a08      	ldrlt	r2, [sp, #32]
 8006a1c:	9f06      	ldrge	r7, [sp, #24]
 8006a1e:	1a9f      	sublt	r7, r3, r2
 8006a20:	bfac      	ite	ge
 8006a22:	9b08      	ldrge	r3, [sp, #32]
 8006a24:	2300      	movlt	r3, #0
 8006a26:	e73f      	b.n	80068a8 <_dtoa_r+0x748>
 8006a28:	3fe00000 	.word	0x3fe00000
 8006a2c:	40240000 	.word	0x40240000
 8006a30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a32:	9f06      	ldr	r7, [sp, #24]
 8006a34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006a36:	e742      	b.n	80068be <_dtoa_r+0x75e>
 8006a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a3a:	e76b      	b.n	8006914 <_dtoa_r+0x7b4>
 8006a3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	dc19      	bgt.n	8006a76 <_dtoa_r+0x916>
 8006a42:	9b04      	ldr	r3, [sp, #16]
 8006a44:	b9bb      	cbnz	r3, 8006a76 <_dtoa_r+0x916>
 8006a46:	9b05      	ldr	r3, [sp, #20]
 8006a48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a4c:	b99b      	cbnz	r3, 8006a76 <_dtoa_r+0x916>
 8006a4e:	9b05      	ldr	r3, [sp, #20]
 8006a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a54:	0d1b      	lsrs	r3, r3, #20
 8006a56:	051b      	lsls	r3, r3, #20
 8006a58:	b183      	cbz	r3, 8006a7c <_dtoa_r+0x91c>
 8006a5a:	f04f 0801 	mov.w	r8, #1
 8006a5e:	9b06      	ldr	r3, [sp, #24]
 8006a60:	3301      	adds	r3, #1
 8006a62:	9306      	str	r3, [sp, #24]
 8006a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a66:	3301      	adds	r3, #1
 8006a68:	9309      	str	r3, [sp, #36]	; 0x24
 8006a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f47f af6a 	bne.w	8006946 <_dtoa_r+0x7e6>
 8006a72:	2001      	movs	r0, #1
 8006a74:	e76f      	b.n	8006956 <_dtoa_r+0x7f6>
 8006a76:	f04f 0800 	mov.w	r8, #0
 8006a7a:	e7f6      	b.n	8006a6a <_dtoa_r+0x90a>
 8006a7c:	4698      	mov	r8, r3
 8006a7e:	e7f4      	b.n	8006a6a <_dtoa_r+0x90a>
 8006a80:	f43f af7d 	beq.w	800697e <_dtoa_r+0x81e>
 8006a84:	4618      	mov	r0, r3
 8006a86:	301c      	adds	r0, #28
 8006a88:	e772      	b.n	8006970 <_dtoa_r+0x810>
 8006a8a:	9b08      	ldr	r3, [sp, #32]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	dc36      	bgt.n	8006afe <_dtoa_r+0x99e>
 8006a90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	dd33      	ble.n	8006afe <_dtoa_r+0x99e>
 8006a96:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a9a:	f1b9 0f00 	cmp.w	r9, #0
 8006a9e:	d10d      	bne.n	8006abc <_dtoa_r+0x95c>
 8006aa0:	4621      	mov	r1, r4
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	2205      	movs	r2, #5
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	f000 fd4a 	bl	8007540 <__multadd>
 8006aac:	4601      	mov	r1, r0
 8006aae:	4604      	mov	r4, r0
 8006ab0:	4658      	mov	r0, fp
 8006ab2:	f000 ffab 	bl	8007a0c <__mcmp>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	f73f adb8 	bgt.w	800662c <_dtoa_r+0x4cc>
 8006abc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006abe:	9f03      	ldr	r7, [sp, #12]
 8006ac0:	ea6f 0a03 	mvn.w	sl, r3
 8006ac4:	f04f 0800 	mov.w	r8, #0
 8006ac8:	4621      	mov	r1, r4
 8006aca:	4628      	mov	r0, r5
 8006acc:	f000 fd16 	bl	80074fc <_Bfree>
 8006ad0:	2e00      	cmp	r6, #0
 8006ad2:	f43f aea7 	beq.w	8006824 <_dtoa_r+0x6c4>
 8006ad6:	f1b8 0f00 	cmp.w	r8, #0
 8006ada:	d005      	beq.n	8006ae8 <_dtoa_r+0x988>
 8006adc:	45b0      	cmp	r8, r6
 8006ade:	d003      	beq.n	8006ae8 <_dtoa_r+0x988>
 8006ae0:	4641      	mov	r1, r8
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f000 fd0a 	bl	80074fc <_Bfree>
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4628      	mov	r0, r5
 8006aec:	f000 fd06 	bl	80074fc <_Bfree>
 8006af0:	e698      	b.n	8006824 <_dtoa_r+0x6c4>
 8006af2:	2400      	movs	r4, #0
 8006af4:	4626      	mov	r6, r4
 8006af6:	e7e1      	b.n	8006abc <_dtoa_r+0x95c>
 8006af8:	46c2      	mov	sl, r8
 8006afa:	4626      	mov	r6, r4
 8006afc:	e596      	b.n	800662c <_dtoa_r+0x4cc>
 8006afe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 80fd 	beq.w	8006d04 <_dtoa_r+0xba4>
 8006b0a:	2f00      	cmp	r7, #0
 8006b0c:	dd05      	ble.n	8006b1a <_dtoa_r+0x9ba>
 8006b0e:	4631      	mov	r1, r6
 8006b10:	463a      	mov	r2, r7
 8006b12:	4628      	mov	r0, r5
 8006b14:	f000 ff0a 	bl	800792c <__lshift>
 8006b18:	4606      	mov	r6, r0
 8006b1a:	f1b8 0f00 	cmp.w	r8, #0
 8006b1e:	d05c      	beq.n	8006bda <_dtoa_r+0xa7a>
 8006b20:	4628      	mov	r0, r5
 8006b22:	6871      	ldr	r1, [r6, #4]
 8006b24:	f000 fcaa 	bl	800747c <_Balloc>
 8006b28:	4607      	mov	r7, r0
 8006b2a:	b928      	cbnz	r0, 8006b38 <_dtoa_r+0x9d8>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006b32:	4b7f      	ldr	r3, [pc, #508]	; (8006d30 <_dtoa_r+0xbd0>)
 8006b34:	f7ff bb28 	b.w	8006188 <_dtoa_r+0x28>
 8006b38:	6932      	ldr	r2, [r6, #16]
 8006b3a:	f106 010c 	add.w	r1, r6, #12
 8006b3e:	3202      	adds	r2, #2
 8006b40:	0092      	lsls	r2, r2, #2
 8006b42:	300c      	adds	r0, #12
 8006b44:	f000 fc8c 	bl	8007460 <memcpy>
 8006b48:	2201      	movs	r2, #1
 8006b4a:	4639      	mov	r1, r7
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	f000 feed 	bl	800792c <__lshift>
 8006b52:	46b0      	mov	r8, r6
 8006b54:	4606      	mov	r6, r0
 8006b56:	9b03      	ldr	r3, [sp, #12]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	9308      	str	r3, [sp, #32]
 8006b5c:	9b03      	ldr	r3, [sp, #12]
 8006b5e:	444b      	add	r3, r9
 8006b60:	930a      	str	r3, [sp, #40]	; 0x28
 8006b62:	9b04      	ldr	r3, [sp, #16]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	9309      	str	r3, [sp, #36]	; 0x24
 8006b6a:	9b08      	ldr	r3, [sp, #32]
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	4658      	mov	r0, fp
 8006b72:	9304      	str	r3, [sp, #16]
 8006b74:	f7ff fa68 	bl	8006048 <quorem>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	4641      	mov	r1, r8
 8006b7c:	3330      	adds	r3, #48	; 0x30
 8006b7e:	9006      	str	r0, [sp, #24]
 8006b80:	4658      	mov	r0, fp
 8006b82:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b84:	f000 ff42 	bl	8007a0c <__mcmp>
 8006b88:	4632      	mov	r2, r6
 8006b8a:	4681      	mov	r9, r0
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f000 ff58 	bl	8007a44 <__mdiff>
 8006b94:	68c2      	ldr	r2, [r0, #12]
 8006b96:	4607      	mov	r7, r0
 8006b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b9a:	bb02      	cbnz	r2, 8006bde <_dtoa_r+0xa7e>
 8006b9c:	4601      	mov	r1, r0
 8006b9e:	4658      	mov	r0, fp
 8006ba0:	f000 ff34 	bl	8007a0c <__mcmp>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ba8:	4639      	mov	r1, r7
 8006baa:	4628      	mov	r0, r5
 8006bac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006bb0:	f000 fca4 	bl	80074fc <_Bfree>
 8006bb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bb8:	9f08      	ldr	r7, [sp, #32]
 8006bba:	ea43 0102 	orr.w	r1, r3, r2
 8006bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bc4:	d10d      	bne.n	8006be2 <_dtoa_r+0xa82>
 8006bc6:	2b39      	cmp	r3, #57	; 0x39
 8006bc8:	d029      	beq.n	8006c1e <_dtoa_r+0xabe>
 8006bca:	f1b9 0f00 	cmp.w	r9, #0
 8006bce:	dd01      	ble.n	8006bd4 <_dtoa_r+0xa74>
 8006bd0:	9b06      	ldr	r3, [sp, #24]
 8006bd2:	3331      	adds	r3, #49	; 0x31
 8006bd4:	9a04      	ldr	r2, [sp, #16]
 8006bd6:	7013      	strb	r3, [r2, #0]
 8006bd8:	e776      	b.n	8006ac8 <_dtoa_r+0x968>
 8006bda:	4630      	mov	r0, r6
 8006bdc:	e7b9      	b.n	8006b52 <_dtoa_r+0x9f2>
 8006bde:	2201      	movs	r2, #1
 8006be0:	e7e2      	b.n	8006ba8 <_dtoa_r+0xa48>
 8006be2:	f1b9 0f00 	cmp.w	r9, #0
 8006be6:	db06      	blt.n	8006bf6 <_dtoa_r+0xa96>
 8006be8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006bea:	ea41 0909 	orr.w	r9, r1, r9
 8006bee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bf0:	ea59 0101 	orrs.w	r1, r9, r1
 8006bf4:	d120      	bne.n	8006c38 <_dtoa_r+0xad8>
 8006bf6:	2a00      	cmp	r2, #0
 8006bf8:	ddec      	ble.n	8006bd4 <_dtoa_r+0xa74>
 8006bfa:	4659      	mov	r1, fp
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	4628      	mov	r0, r5
 8006c00:	9308      	str	r3, [sp, #32]
 8006c02:	f000 fe93 	bl	800792c <__lshift>
 8006c06:	4621      	mov	r1, r4
 8006c08:	4683      	mov	fp, r0
 8006c0a:	f000 feff 	bl	8007a0c <__mcmp>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	9b08      	ldr	r3, [sp, #32]
 8006c12:	dc02      	bgt.n	8006c1a <_dtoa_r+0xaba>
 8006c14:	d1de      	bne.n	8006bd4 <_dtoa_r+0xa74>
 8006c16:	07da      	lsls	r2, r3, #31
 8006c18:	d5dc      	bpl.n	8006bd4 <_dtoa_r+0xa74>
 8006c1a:	2b39      	cmp	r3, #57	; 0x39
 8006c1c:	d1d8      	bne.n	8006bd0 <_dtoa_r+0xa70>
 8006c1e:	2339      	movs	r3, #57	; 0x39
 8006c20:	9a04      	ldr	r2, [sp, #16]
 8006c22:	7013      	strb	r3, [r2, #0]
 8006c24:	463b      	mov	r3, r7
 8006c26:	461f      	mov	r7, r3
 8006c28:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	2a39      	cmp	r2, #57	; 0x39
 8006c30:	d050      	beq.n	8006cd4 <_dtoa_r+0xb74>
 8006c32:	3201      	adds	r2, #1
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	e747      	b.n	8006ac8 <_dtoa_r+0x968>
 8006c38:	2a00      	cmp	r2, #0
 8006c3a:	dd03      	ble.n	8006c44 <_dtoa_r+0xae4>
 8006c3c:	2b39      	cmp	r3, #57	; 0x39
 8006c3e:	d0ee      	beq.n	8006c1e <_dtoa_r+0xabe>
 8006c40:	3301      	adds	r3, #1
 8006c42:	e7c7      	b.n	8006bd4 <_dtoa_r+0xa74>
 8006c44:	9a08      	ldr	r2, [sp, #32]
 8006c46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c48:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c4c:	428a      	cmp	r2, r1
 8006c4e:	d02a      	beq.n	8006ca6 <_dtoa_r+0xb46>
 8006c50:	4659      	mov	r1, fp
 8006c52:	2300      	movs	r3, #0
 8006c54:	220a      	movs	r2, #10
 8006c56:	4628      	mov	r0, r5
 8006c58:	f000 fc72 	bl	8007540 <__multadd>
 8006c5c:	45b0      	cmp	r8, r6
 8006c5e:	4683      	mov	fp, r0
 8006c60:	f04f 0300 	mov.w	r3, #0
 8006c64:	f04f 020a 	mov.w	r2, #10
 8006c68:	4641      	mov	r1, r8
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	d107      	bne.n	8006c7e <_dtoa_r+0xb1e>
 8006c6e:	f000 fc67 	bl	8007540 <__multadd>
 8006c72:	4680      	mov	r8, r0
 8006c74:	4606      	mov	r6, r0
 8006c76:	9b08      	ldr	r3, [sp, #32]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	9308      	str	r3, [sp, #32]
 8006c7c:	e775      	b.n	8006b6a <_dtoa_r+0xa0a>
 8006c7e:	f000 fc5f 	bl	8007540 <__multadd>
 8006c82:	4631      	mov	r1, r6
 8006c84:	4680      	mov	r8, r0
 8006c86:	2300      	movs	r3, #0
 8006c88:	220a      	movs	r2, #10
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f000 fc58 	bl	8007540 <__multadd>
 8006c90:	4606      	mov	r6, r0
 8006c92:	e7f0      	b.n	8006c76 <_dtoa_r+0xb16>
 8006c94:	f1b9 0f00 	cmp.w	r9, #0
 8006c98:	bfcc      	ite	gt
 8006c9a:	464f      	movgt	r7, r9
 8006c9c:	2701      	movle	r7, #1
 8006c9e:	f04f 0800 	mov.w	r8, #0
 8006ca2:	9a03      	ldr	r2, [sp, #12]
 8006ca4:	4417      	add	r7, r2
 8006ca6:	4659      	mov	r1, fp
 8006ca8:	2201      	movs	r2, #1
 8006caa:	4628      	mov	r0, r5
 8006cac:	9308      	str	r3, [sp, #32]
 8006cae:	f000 fe3d 	bl	800792c <__lshift>
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	4683      	mov	fp, r0
 8006cb6:	f000 fea9 	bl	8007a0c <__mcmp>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	dcb2      	bgt.n	8006c24 <_dtoa_r+0xac4>
 8006cbe:	d102      	bne.n	8006cc6 <_dtoa_r+0xb66>
 8006cc0:	9b08      	ldr	r3, [sp, #32]
 8006cc2:	07db      	lsls	r3, r3, #31
 8006cc4:	d4ae      	bmi.n	8006c24 <_dtoa_r+0xac4>
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	461f      	mov	r7, r3
 8006cca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cce:	2a30      	cmp	r2, #48	; 0x30
 8006cd0:	d0fa      	beq.n	8006cc8 <_dtoa_r+0xb68>
 8006cd2:	e6f9      	b.n	8006ac8 <_dtoa_r+0x968>
 8006cd4:	9a03      	ldr	r2, [sp, #12]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d1a5      	bne.n	8006c26 <_dtoa_r+0xac6>
 8006cda:	2331      	movs	r3, #49	; 0x31
 8006cdc:	f10a 0a01 	add.w	sl, sl, #1
 8006ce0:	e779      	b.n	8006bd6 <_dtoa_r+0xa76>
 8006ce2:	4b14      	ldr	r3, [pc, #80]	; (8006d34 <_dtoa_r+0xbd4>)
 8006ce4:	f7ff baa8 	b.w	8006238 <_dtoa_r+0xd8>
 8006ce8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f47f aa81 	bne.w	80061f2 <_dtoa_r+0x92>
 8006cf0:	4b11      	ldr	r3, [pc, #68]	; (8006d38 <_dtoa_r+0xbd8>)
 8006cf2:	f7ff baa1 	b.w	8006238 <_dtoa_r+0xd8>
 8006cf6:	f1b9 0f00 	cmp.w	r9, #0
 8006cfa:	dc03      	bgt.n	8006d04 <_dtoa_r+0xba4>
 8006cfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	f73f aecb 	bgt.w	8006a9a <_dtoa_r+0x93a>
 8006d04:	9f03      	ldr	r7, [sp, #12]
 8006d06:	4621      	mov	r1, r4
 8006d08:	4658      	mov	r0, fp
 8006d0a:	f7ff f99d 	bl	8006048 <quorem>
 8006d0e:	9a03      	ldr	r2, [sp, #12]
 8006d10:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006d14:	f807 3b01 	strb.w	r3, [r7], #1
 8006d18:	1aba      	subs	r2, r7, r2
 8006d1a:	4591      	cmp	r9, r2
 8006d1c:	ddba      	ble.n	8006c94 <_dtoa_r+0xb34>
 8006d1e:	4659      	mov	r1, fp
 8006d20:	2300      	movs	r3, #0
 8006d22:	220a      	movs	r2, #10
 8006d24:	4628      	mov	r0, r5
 8006d26:	f000 fc0b 	bl	8007540 <__multadd>
 8006d2a:	4683      	mov	fp, r0
 8006d2c:	e7eb      	b.n	8006d06 <_dtoa_r+0xba6>
 8006d2e:	bf00      	nop
 8006d30:	08009848 	.word	0x08009848
 8006d34:	0800964c 	.word	0x0800964c
 8006d38:	080097c9 	.word	0x080097c9

08006d3c <rshift>:
 8006d3c:	6903      	ldr	r3, [r0, #16]
 8006d3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d42:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006d46:	f100 0414 	add.w	r4, r0, #20
 8006d4a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006d4e:	dd46      	ble.n	8006dde <rshift+0xa2>
 8006d50:	f011 011f 	ands.w	r1, r1, #31
 8006d54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006d58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006d5c:	d10c      	bne.n	8006d78 <rshift+0x3c>
 8006d5e:	4629      	mov	r1, r5
 8006d60:	f100 0710 	add.w	r7, r0, #16
 8006d64:	42b1      	cmp	r1, r6
 8006d66:	d335      	bcc.n	8006dd4 <rshift+0x98>
 8006d68:	1a9b      	subs	r3, r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	1eea      	subs	r2, r5, #3
 8006d6e:	4296      	cmp	r6, r2
 8006d70:	bf38      	it	cc
 8006d72:	2300      	movcc	r3, #0
 8006d74:	4423      	add	r3, r4
 8006d76:	e015      	b.n	8006da4 <rshift+0x68>
 8006d78:	46a1      	mov	r9, r4
 8006d7a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006d7e:	f1c1 0820 	rsb	r8, r1, #32
 8006d82:	40cf      	lsrs	r7, r1
 8006d84:	f105 0e04 	add.w	lr, r5, #4
 8006d88:	4576      	cmp	r6, lr
 8006d8a:	46f4      	mov	ip, lr
 8006d8c:	d816      	bhi.n	8006dbc <rshift+0x80>
 8006d8e:	1a9a      	subs	r2, r3, r2
 8006d90:	0092      	lsls	r2, r2, #2
 8006d92:	3a04      	subs	r2, #4
 8006d94:	3501      	adds	r5, #1
 8006d96:	42ae      	cmp	r6, r5
 8006d98:	bf38      	it	cc
 8006d9a:	2200      	movcc	r2, #0
 8006d9c:	18a3      	adds	r3, r4, r2
 8006d9e:	50a7      	str	r7, [r4, r2]
 8006da0:	b107      	cbz	r7, 8006da4 <rshift+0x68>
 8006da2:	3304      	adds	r3, #4
 8006da4:	42a3      	cmp	r3, r4
 8006da6:	eba3 0204 	sub.w	r2, r3, r4
 8006daa:	bf08      	it	eq
 8006dac:	2300      	moveq	r3, #0
 8006dae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006db2:	6102      	str	r2, [r0, #16]
 8006db4:	bf08      	it	eq
 8006db6:	6143      	streq	r3, [r0, #20]
 8006db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dbc:	f8dc c000 	ldr.w	ip, [ip]
 8006dc0:	fa0c fc08 	lsl.w	ip, ip, r8
 8006dc4:	ea4c 0707 	orr.w	r7, ip, r7
 8006dc8:	f849 7b04 	str.w	r7, [r9], #4
 8006dcc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006dd0:	40cf      	lsrs	r7, r1
 8006dd2:	e7d9      	b.n	8006d88 <rshift+0x4c>
 8006dd4:	f851 cb04 	ldr.w	ip, [r1], #4
 8006dd8:	f847 cf04 	str.w	ip, [r7, #4]!
 8006ddc:	e7c2      	b.n	8006d64 <rshift+0x28>
 8006dde:	4623      	mov	r3, r4
 8006de0:	e7e0      	b.n	8006da4 <rshift+0x68>

08006de2 <__hexdig_fun>:
 8006de2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006de6:	2b09      	cmp	r3, #9
 8006de8:	d802      	bhi.n	8006df0 <__hexdig_fun+0xe>
 8006dea:	3820      	subs	r0, #32
 8006dec:	b2c0      	uxtb	r0, r0
 8006dee:	4770      	bx	lr
 8006df0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006df4:	2b05      	cmp	r3, #5
 8006df6:	d801      	bhi.n	8006dfc <__hexdig_fun+0x1a>
 8006df8:	3847      	subs	r0, #71	; 0x47
 8006dfa:	e7f7      	b.n	8006dec <__hexdig_fun+0xa>
 8006dfc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006e00:	2b05      	cmp	r3, #5
 8006e02:	d801      	bhi.n	8006e08 <__hexdig_fun+0x26>
 8006e04:	3827      	subs	r0, #39	; 0x27
 8006e06:	e7f1      	b.n	8006dec <__hexdig_fun+0xa>
 8006e08:	2000      	movs	r0, #0
 8006e0a:	4770      	bx	lr

08006e0c <__gethex>:
 8006e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e10:	b08b      	sub	sp, #44	; 0x2c
 8006e12:	9305      	str	r3, [sp, #20]
 8006e14:	4bb2      	ldr	r3, [pc, #712]	; (80070e0 <__gethex+0x2d4>)
 8006e16:	9002      	str	r0, [sp, #8]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	468b      	mov	fp, r1
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	4690      	mov	r8, r2
 8006e20:	9303      	str	r3, [sp, #12]
 8006e22:	f7f9 f995 	bl	8000150 <strlen>
 8006e26:	4682      	mov	sl, r0
 8006e28:	9b03      	ldr	r3, [sp, #12]
 8006e2a:	f8db 2000 	ldr.w	r2, [fp]
 8006e2e:	4403      	add	r3, r0
 8006e30:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006e34:	9306      	str	r3, [sp, #24]
 8006e36:	1c93      	adds	r3, r2, #2
 8006e38:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006e3c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006e40:	32fe      	adds	r2, #254	; 0xfe
 8006e42:	18d1      	adds	r1, r2, r3
 8006e44:	461f      	mov	r7, r3
 8006e46:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006e4a:	9101      	str	r1, [sp, #4]
 8006e4c:	2830      	cmp	r0, #48	; 0x30
 8006e4e:	d0f8      	beq.n	8006e42 <__gethex+0x36>
 8006e50:	f7ff ffc7 	bl	8006de2 <__hexdig_fun>
 8006e54:	4604      	mov	r4, r0
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d13a      	bne.n	8006ed0 <__gethex+0xc4>
 8006e5a:	4652      	mov	r2, sl
 8006e5c:	4638      	mov	r0, r7
 8006e5e:	9903      	ldr	r1, [sp, #12]
 8006e60:	f001 fa26 	bl	80082b0 <strncmp>
 8006e64:	4605      	mov	r5, r0
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d166      	bne.n	8006f38 <__gethex+0x12c>
 8006e6a:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006e6e:	eb07 060a 	add.w	r6, r7, sl
 8006e72:	f7ff ffb6 	bl	8006de2 <__hexdig_fun>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d060      	beq.n	8006f3c <__gethex+0x130>
 8006e7a:	4633      	mov	r3, r6
 8006e7c:	7818      	ldrb	r0, [r3, #0]
 8006e7e:	461f      	mov	r7, r3
 8006e80:	2830      	cmp	r0, #48	; 0x30
 8006e82:	f103 0301 	add.w	r3, r3, #1
 8006e86:	d0f9      	beq.n	8006e7c <__gethex+0x70>
 8006e88:	f7ff ffab 	bl	8006de2 <__hexdig_fun>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	fab0 f480 	clz	r4, r0
 8006e92:	4635      	mov	r5, r6
 8006e94:	0964      	lsrs	r4, r4, #5
 8006e96:	9301      	str	r3, [sp, #4]
 8006e98:	463a      	mov	r2, r7
 8006e9a:	4616      	mov	r6, r2
 8006e9c:	7830      	ldrb	r0, [r6, #0]
 8006e9e:	3201      	adds	r2, #1
 8006ea0:	f7ff ff9f 	bl	8006de2 <__hexdig_fun>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d1f8      	bne.n	8006e9a <__gethex+0x8e>
 8006ea8:	4652      	mov	r2, sl
 8006eaa:	4630      	mov	r0, r6
 8006eac:	9903      	ldr	r1, [sp, #12]
 8006eae:	f001 f9ff 	bl	80082b0 <strncmp>
 8006eb2:	b980      	cbnz	r0, 8006ed6 <__gethex+0xca>
 8006eb4:	b94d      	cbnz	r5, 8006eca <__gethex+0xbe>
 8006eb6:	eb06 050a 	add.w	r5, r6, sl
 8006eba:	462a      	mov	r2, r5
 8006ebc:	4616      	mov	r6, r2
 8006ebe:	7830      	ldrb	r0, [r6, #0]
 8006ec0:	3201      	adds	r2, #1
 8006ec2:	f7ff ff8e 	bl	8006de2 <__hexdig_fun>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d1f8      	bne.n	8006ebc <__gethex+0xb0>
 8006eca:	1bad      	subs	r5, r5, r6
 8006ecc:	00ad      	lsls	r5, r5, #2
 8006ece:	e004      	b.n	8006eda <__gethex+0xce>
 8006ed0:	2400      	movs	r4, #0
 8006ed2:	4625      	mov	r5, r4
 8006ed4:	e7e0      	b.n	8006e98 <__gethex+0x8c>
 8006ed6:	2d00      	cmp	r5, #0
 8006ed8:	d1f7      	bne.n	8006eca <__gethex+0xbe>
 8006eda:	7833      	ldrb	r3, [r6, #0]
 8006edc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ee0:	2b50      	cmp	r3, #80	; 0x50
 8006ee2:	d139      	bne.n	8006f58 <__gethex+0x14c>
 8006ee4:	7873      	ldrb	r3, [r6, #1]
 8006ee6:	2b2b      	cmp	r3, #43	; 0x2b
 8006ee8:	d02a      	beq.n	8006f40 <__gethex+0x134>
 8006eea:	2b2d      	cmp	r3, #45	; 0x2d
 8006eec:	d02c      	beq.n	8006f48 <__gethex+0x13c>
 8006eee:	f04f 0900 	mov.w	r9, #0
 8006ef2:	1c71      	adds	r1, r6, #1
 8006ef4:	7808      	ldrb	r0, [r1, #0]
 8006ef6:	f7ff ff74 	bl	8006de2 <__hexdig_fun>
 8006efa:	1e43      	subs	r3, r0, #1
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b18      	cmp	r3, #24
 8006f00:	d82a      	bhi.n	8006f58 <__gethex+0x14c>
 8006f02:	f1a0 0210 	sub.w	r2, r0, #16
 8006f06:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006f0a:	f7ff ff6a 	bl	8006de2 <__hexdig_fun>
 8006f0e:	1e43      	subs	r3, r0, #1
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b18      	cmp	r3, #24
 8006f14:	d91b      	bls.n	8006f4e <__gethex+0x142>
 8006f16:	f1b9 0f00 	cmp.w	r9, #0
 8006f1a:	d000      	beq.n	8006f1e <__gethex+0x112>
 8006f1c:	4252      	negs	r2, r2
 8006f1e:	4415      	add	r5, r2
 8006f20:	f8cb 1000 	str.w	r1, [fp]
 8006f24:	b1d4      	cbz	r4, 8006f5c <__gethex+0x150>
 8006f26:	9b01      	ldr	r3, [sp, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	bf14      	ite	ne
 8006f2c:	2700      	movne	r7, #0
 8006f2e:	2706      	moveq	r7, #6
 8006f30:	4638      	mov	r0, r7
 8006f32:	b00b      	add	sp, #44	; 0x2c
 8006f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f38:	463e      	mov	r6, r7
 8006f3a:	4625      	mov	r5, r4
 8006f3c:	2401      	movs	r4, #1
 8006f3e:	e7cc      	b.n	8006eda <__gethex+0xce>
 8006f40:	f04f 0900 	mov.w	r9, #0
 8006f44:	1cb1      	adds	r1, r6, #2
 8006f46:	e7d5      	b.n	8006ef4 <__gethex+0xe8>
 8006f48:	f04f 0901 	mov.w	r9, #1
 8006f4c:	e7fa      	b.n	8006f44 <__gethex+0x138>
 8006f4e:	230a      	movs	r3, #10
 8006f50:	fb03 0202 	mla	r2, r3, r2, r0
 8006f54:	3a10      	subs	r2, #16
 8006f56:	e7d6      	b.n	8006f06 <__gethex+0xfa>
 8006f58:	4631      	mov	r1, r6
 8006f5a:	e7e1      	b.n	8006f20 <__gethex+0x114>
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	1bf3      	subs	r3, r6, r7
 8006f60:	3b01      	subs	r3, #1
 8006f62:	2b07      	cmp	r3, #7
 8006f64:	dc0a      	bgt.n	8006f7c <__gethex+0x170>
 8006f66:	9802      	ldr	r0, [sp, #8]
 8006f68:	f000 fa88 	bl	800747c <_Balloc>
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	b940      	cbnz	r0, 8006f82 <__gethex+0x176>
 8006f70:	4602      	mov	r2, r0
 8006f72:	21de      	movs	r1, #222	; 0xde
 8006f74:	4b5b      	ldr	r3, [pc, #364]	; (80070e4 <__gethex+0x2d8>)
 8006f76:	485c      	ldr	r0, [pc, #368]	; (80070e8 <__gethex+0x2dc>)
 8006f78:	f001 f9bc 	bl	80082f4 <__assert_func>
 8006f7c:	3101      	adds	r1, #1
 8006f7e:	105b      	asrs	r3, r3, #1
 8006f80:	e7ef      	b.n	8006f62 <__gethex+0x156>
 8006f82:	f04f 0b00 	mov.w	fp, #0
 8006f86:	f100 0914 	add.w	r9, r0, #20
 8006f8a:	f1ca 0301 	rsb	r3, sl, #1
 8006f8e:	f8cd 9010 	str.w	r9, [sp, #16]
 8006f92:	f8cd b004 	str.w	fp, [sp, #4]
 8006f96:	9308      	str	r3, [sp, #32]
 8006f98:	42b7      	cmp	r7, r6
 8006f9a:	d33f      	bcc.n	800701c <__gethex+0x210>
 8006f9c:	9f04      	ldr	r7, [sp, #16]
 8006f9e:	9b01      	ldr	r3, [sp, #4]
 8006fa0:	f847 3b04 	str.w	r3, [r7], #4
 8006fa4:	eba7 0709 	sub.w	r7, r7, r9
 8006fa8:	10bf      	asrs	r7, r7, #2
 8006faa:	6127      	str	r7, [r4, #16]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 fb57 	bl	8007660 <__hi0bits>
 8006fb2:	017f      	lsls	r7, r7, #5
 8006fb4:	f8d8 6000 	ldr.w	r6, [r8]
 8006fb8:	1a3f      	subs	r7, r7, r0
 8006fba:	42b7      	cmp	r7, r6
 8006fbc:	dd62      	ble.n	8007084 <__gethex+0x278>
 8006fbe:	1bbf      	subs	r7, r7, r6
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f000 fef1 	bl	8007daa <__any_on>
 8006fc8:	4682      	mov	sl, r0
 8006fca:	b1a8      	cbz	r0, 8006ff8 <__gethex+0x1ec>
 8006fcc:	f04f 0a01 	mov.w	sl, #1
 8006fd0:	1e7b      	subs	r3, r7, #1
 8006fd2:	1159      	asrs	r1, r3, #5
 8006fd4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006fd8:	f003 021f 	and.w	r2, r3, #31
 8006fdc:	fa0a f202 	lsl.w	r2, sl, r2
 8006fe0:	420a      	tst	r2, r1
 8006fe2:	d009      	beq.n	8006ff8 <__gethex+0x1ec>
 8006fe4:	4553      	cmp	r3, sl
 8006fe6:	dd05      	ble.n	8006ff4 <__gethex+0x1e8>
 8006fe8:	4620      	mov	r0, r4
 8006fea:	1eb9      	subs	r1, r7, #2
 8006fec:	f000 fedd 	bl	8007daa <__any_on>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d144      	bne.n	800707e <__gethex+0x272>
 8006ff4:	f04f 0a02 	mov.w	sl, #2
 8006ff8:	4639      	mov	r1, r7
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f7ff fe9e 	bl	8006d3c <rshift>
 8007000:	443d      	add	r5, r7
 8007002:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007006:	42ab      	cmp	r3, r5
 8007008:	da4a      	bge.n	80070a0 <__gethex+0x294>
 800700a:	4621      	mov	r1, r4
 800700c:	9802      	ldr	r0, [sp, #8]
 800700e:	f000 fa75 	bl	80074fc <_Bfree>
 8007012:	2300      	movs	r3, #0
 8007014:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007016:	27a3      	movs	r7, #163	; 0xa3
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	e789      	b.n	8006f30 <__gethex+0x124>
 800701c:	1e73      	subs	r3, r6, #1
 800701e:	9a06      	ldr	r2, [sp, #24]
 8007020:	9307      	str	r3, [sp, #28]
 8007022:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007026:	4293      	cmp	r3, r2
 8007028:	d019      	beq.n	800705e <__gethex+0x252>
 800702a:	f1bb 0f20 	cmp.w	fp, #32
 800702e:	d107      	bne.n	8007040 <__gethex+0x234>
 8007030:	9b04      	ldr	r3, [sp, #16]
 8007032:	9a01      	ldr	r2, [sp, #4]
 8007034:	f843 2b04 	str.w	r2, [r3], #4
 8007038:	9304      	str	r3, [sp, #16]
 800703a:	2300      	movs	r3, #0
 800703c:	469b      	mov	fp, r3
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007044:	f7ff fecd 	bl	8006de2 <__hexdig_fun>
 8007048:	9b01      	ldr	r3, [sp, #4]
 800704a:	f000 000f 	and.w	r0, r0, #15
 800704e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007052:	4303      	orrs	r3, r0
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	f10b 0b04 	add.w	fp, fp, #4
 800705a:	9b07      	ldr	r3, [sp, #28]
 800705c:	e00d      	b.n	800707a <__gethex+0x26e>
 800705e:	9a08      	ldr	r2, [sp, #32]
 8007060:	1e73      	subs	r3, r6, #1
 8007062:	4413      	add	r3, r2
 8007064:	42bb      	cmp	r3, r7
 8007066:	d3e0      	bcc.n	800702a <__gethex+0x21e>
 8007068:	4618      	mov	r0, r3
 800706a:	4652      	mov	r2, sl
 800706c:	9903      	ldr	r1, [sp, #12]
 800706e:	9309      	str	r3, [sp, #36]	; 0x24
 8007070:	f001 f91e 	bl	80082b0 <strncmp>
 8007074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007076:	2800      	cmp	r0, #0
 8007078:	d1d7      	bne.n	800702a <__gethex+0x21e>
 800707a:	461e      	mov	r6, r3
 800707c:	e78c      	b.n	8006f98 <__gethex+0x18c>
 800707e:	f04f 0a03 	mov.w	sl, #3
 8007082:	e7b9      	b.n	8006ff8 <__gethex+0x1ec>
 8007084:	da09      	bge.n	800709a <__gethex+0x28e>
 8007086:	1bf7      	subs	r7, r6, r7
 8007088:	4621      	mov	r1, r4
 800708a:	463a      	mov	r2, r7
 800708c:	9802      	ldr	r0, [sp, #8]
 800708e:	f000 fc4d 	bl	800792c <__lshift>
 8007092:	4604      	mov	r4, r0
 8007094:	1bed      	subs	r5, r5, r7
 8007096:	f100 0914 	add.w	r9, r0, #20
 800709a:	f04f 0a00 	mov.w	sl, #0
 800709e:	e7b0      	b.n	8007002 <__gethex+0x1f6>
 80070a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80070a4:	42a8      	cmp	r0, r5
 80070a6:	dd72      	ble.n	800718e <__gethex+0x382>
 80070a8:	1b45      	subs	r5, r0, r5
 80070aa:	42ae      	cmp	r6, r5
 80070ac:	dc35      	bgt.n	800711a <__gethex+0x30e>
 80070ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d029      	beq.n	800710a <__gethex+0x2fe>
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d02b      	beq.n	8007112 <__gethex+0x306>
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d11c      	bne.n	80070f8 <__gethex+0x2ec>
 80070be:	42ae      	cmp	r6, r5
 80070c0:	d11a      	bne.n	80070f8 <__gethex+0x2ec>
 80070c2:	2e01      	cmp	r6, #1
 80070c4:	d112      	bne.n	80070ec <__gethex+0x2e0>
 80070c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80070ca:	9a05      	ldr	r2, [sp, #20]
 80070cc:	2762      	movs	r7, #98	; 0x62
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	2301      	movs	r3, #1
 80070d2:	6123      	str	r3, [r4, #16]
 80070d4:	f8c9 3000 	str.w	r3, [r9]
 80070d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070da:	601c      	str	r4, [r3, #0]
 80070dc:	e728      	b.n	8006f30 <__gethex+0x124>
 80070de:	bf00      	nop
 80070e0:	080098c0 	.word	0x080098c0
 80070e4:	08009848 	.word	0x08009848
 80070e8:	08009859 	.word	0x08009859
 80070ec:	4620      	mov	r0, r4
 80070ee:	1e71      	subs	r1, r6, #1
 80070f0:	f000 fe5b 	bl	8007daa <__any_on>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d1e6      	bne.n	80070c6 <__gethex+0x2ba>
 80070f8:	4621      	mov	r1, r4
 80070fa:	9802      	ldr	r0, [sp, #8]
 80070fc:	f000 f9fe 	bl	80074fc <_Bfree>
 8007100:	2300      	movs	r3, #0
 8007102:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007104:	2750      	movs	r7, #80	; 0x50
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	e712      	b.n	8006f30 <__gethex+0x124>
 800710a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1f3      	bne.n	80070f8 <__gethex+0x2ec>
 8007110:	e7d9      	b.n	80070c6 <__gethex+0x2ba>
 8007112:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1d6      	bne.n	80070c6 <__gethex+0x2ba>
 8007118:	e7ee      	b.n	80070f8 <__gethex+0x2ec>
 800711a:	1e6f      	subs	r7, r5, #1
 800711c:	f1ba 0f00 	cmp.w	sl, #0
 8007120:	d132      	bne.n	8007188 <__gethex+0x37c>
 8007122:	b127      	cbz	r7, 800712e <__gethex+0x322>
 8007124:	4639      	mov	r1, r7
 8007126:	4620      	mov	r0, r4
 8007128:	f000 fe3f 	bl	8007daa <__any_on>
 800712c:	4682      	mov	sl, r0
 800712e:	2101      	movs	r1, #1
 8007130:	117b      	asrs	r3, r7, #5
 8007132:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007136:	f007 071f 	and.w	r7, r7, #31
 800713a:	fa01 f707 	lsl.w	r7, r1, r7
 800713e:	421f      	tst	r7, r3
 8007140:	f04f 0702 	mov.w	r7, #2
 8007144:	4629      	mov	r1, r5
 8007146:	4620      	mov	r0, r4
 8007148:	bf18      	it	ne
 800714a:	f04a 0a02 	orrne.w	sl, sl, #2
 800714e:	1b76      	subs	r6, r6, r5
 8007150:	f7ff fdf4 	bl	8006d3c <rshift>
 8007154:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007158:	f1ba 0f00 	cmp.w	sl, #0
 800715c:	d048      	beq.n	80071f0 <__gethex+0x3e4>
 800715e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007162:	2b02      	cmp	r3, #2
 8007164:	d015      	beq.n	8007192 <__gethex+0x386>
 8007166:	2b03      	cmp	r3, #3
 8007168:	d017      	beq.n	800719a <__gethex+0x38e>
 800716a:	2b01      	cmp	r3, #1
 800716c:	d109      	bne.n	8007182 <__gethex+0x376>
 800716e:	f01a 0f02 	tst.w	sl, #2
 8007172:	d006      	beq.n	8007182 <__gethex+0x376>
 8007174:	f8d9 0000 	ldr.w	r0, [r9]
 8007178:	ea4a 0a00 	orr.w	sl, sl, r0
 800717c:	f01a 0f01 	tst.w	sl, #1
 8007180:	d10e      	bne.n	80071a0 <__gethex+0x394>
 8007182:	f047 0710 	orr.w	r7, r7, #16
 8007186:	e033      	b.n	80071f0 <__gethex+0x3e4>
 8007188:	f04f 0a01 	mov.w	sl, #1
 800718c:	e7cf      	b.n	800712e <__gethex+0x322>
 800718e:	2701      	movs	r7, #1
 8007190:	e7e2      	b.n	8007158 <__gethex+0x34c>
 8007192:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007194:	f1c3 0301 	rsb	r3, r3, #1
 8007198:	9315      	str	r3, [sp, #84]	; 0x54
 800719a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0f0      	beq.n	8007182 <__gethex+0x376>
 80071a0:	f04f 0c00 	mov.w	ip, #0
 80071a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80071a8:	f104 0314 	add.w	r3, r4, #20
 80071ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80071b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80071b4:	4618      	mov	r0, r3
 80071b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ba:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80071be:	d01c      	beq.n	80071fa <__gethex+0x3ee>
 80071c0:	3201      	adds	r2, #1
 80071c2:	6002      	str	r2, [r0, #0]
 80071c4:	2f02      	cmp	r7, #2
 80071c6:	f104 0314 	add.w	r3, r4, #20
 80071ca:	d13d      	bne.n	8007248 <__gethex+0x43c>
 80071cc:	f8d8 2000 	ldr.w	r2, [r8]
 80071d0:	3a01      	subs	r2, #1
 80071d2:	42b2      	cmp	r2, r6
 80071d4:	d10a      	bne.n	80071ec <__gethex+0x3e0>
 80071d6:	2201      	movs	r2, #1
 80071d8:	1171      	asrs	r1, r6, #5
 80071da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071de:	f006 061f 	and.w	r6, r6, #31
 80071e2:	fa02 f606 	lsl.w	r6, r2, r6
 80071e6:	421e      	tst	r6, r3
 80071e8:	bf18      	it	ne
 80071ea:	4617      	movne	r7, r2
 80071ec:	f047 0720 	orr.w	r7, r7, #32
 80071f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071f2:	601c      	str	r4, [r3, #0]
 80071f4:	9b05      	ldr	r3, [sp, #20]
 80071f6:	601d      	str	r5, [r3, #0]
 80071f8:	e69a      	b.n	8006f30 <__gethex+0x124>
 80071fa:	4299      	cmp	r1, r3
 80071fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8007200:	d8d8      	bhi.n	80071b4 <__gethex+0x3a8>
 8007202:	68a3      	ldr	r3, [r4, #8]
 8007204:	459b      	cmp	fp, r3
 8007206:	db17      	blt.n	8007238 <__gethex+0x42c>
 8007208:	6861      	ldr	r1, [r4, #4]
 800720a:	9802      	ldr	r0, [sp, #8]
 800720c:	3101      	adds	r1, #1
 800720e:	f000 f935 	bl	800747c <_Balloc>
 8007212:	4681      	mov	r9, r0
 8007214:	b918      	cbnz	r0, 800721e <__gethex+0x412>
 8007216:	4602      	mov	r2, r0
 8007218:	2184      	movs	r1, #132	; 0x84
 800721a:	4b19      	ldr	r3, [pc, #100]	; (8007280 <__gethex+0x474>)
 800721c:	e6ab      	b.n	8006f76 <__gethex+0x16a>
 800721e:	6922      	ldr	r2, [r4, #16]
 8007220:	f104 010c 	add.w	r1, r4, #12
 8007224:	3202      	adds	r2, #2
 8007226:	0092      	lsls	r2, r2, #2
 8007228:	300c      	adds	r0, #12
 800722a:	f000 f919 	bl	8007460 <memcpy>
 800722e:	4621      	mov	r1, r4
 8007230:	9802      	ldr	r0, [sp, #8]
 8007232:	f000 f963 	bl	80074fc <_Bfree>
 8007236:	464c      	mov	r4, r9
 8007238:	6923      	ldr	r3, [r4, #16]
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	6122      	str	r2, [r4, #16]
 800723e:	2201      	movs	r2, #1
 8007240:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007244:	615a      	str	r2, [r3, #20]
 8007246:	e7bd      	b.n	80071c4 <__gethex+0x3b8>
 8007248:	6922      	ldr	r2, [r4, #16]
 800724a:	455a      	cmp	r2, fp
 800724c:	dd0b      	ble.n	8007266 <__gethex+0x45a>
 800724e:	2101      	movs	r1, #1
 8007250:	4620      	mov	r0, r4
 8007252:	f7ff fd73 	bl	8006d3c <rshift>
 8007256:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800725a:	3501      	adds	r5, #1
 800725c:	42ab      	cmp	r3, r5
 800725e:	f6ff aed4 	blt.w	800700a <__gethex+0x1fe>
 8007262:	2701      	movs	r7, #1
 8007264:	e7c2      	b.n	80071ec <__gethex+0x3e0>
 8007266:	f016 061f 	ands.w	r6, r6, #31
 800726a:	d0fa      	beq.n	8007262 <__gethex+0x456>
 800726c:	4453      	add	r3, sl
 800726e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007272:	f000 f9f5 	bl	8007660 <__hi0bits>
 8007276:	f1c6 0620 	rsb	r6, r6, #32
 800727a:	42b0      	cmp	r0, r6
 800727c:	dbe7      	blt.n	800724e <__gethex+0x442>
 800727e:	e7f0      	b.n	8007262 <__gethex+0x456>
 8007280:	08009848 	.word	0x08009848

08007284 <L_shift>:
 8007284:	f1c2 0208 	rsb	r2, r2, #8
 8007288:	0092      	lsls	r2, r2, #2
 800728a:	b570      	push	{r4, r5, r6, lr}
 800728c:	f1c2 0620 	rsb	r6, r2, #32
 8007290:	6843      	ldr	r3, [r0, #4]
 8007292:	6804      	ldr	r4, [r0, #0]
 8007294:	fa03 f506 	lsl.w	r5, r3, r6
 8007298:	432c      	orrs	r4, r5
 800729a:	40d3      	lsrs	r3, r2
 800729c:	6004      	str	r4, [r0, #0]
 800729e:	f840 3f04 	str.w	r3, [r0, #4]!
 80072a2:	4288      	cmp	r0, r1
 80072a4:	d3f4      	bcc.n	8007290 <L_shift+0xc>
 80072a6:	bd70      	pop	{r4, r5, r6, pc}

080072a8 <__match>:
 80072a8:	b530      	push	{r4, r5, lr}
 80072aa:	6803      	ldr	r3, [r0, #0]
 80072ac:	3301      	adds	r3, #1
 80072ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072b2:	b914      	cbnz	r4, 80072ba <__match+0x12>
 80072b4:	6003      	str	r3, [r0, #0]
 80072b6:	2001      	movs	r0, #1
 80072b8:	bd30      	pop	{r4, r5, pc}
 80072ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80072c2:	2d19      	cmp	r5, #25
 80072c4:	bf98      	it	ls
 80072c6:	3220      	addls	r2, #32
 80072c8:	42a2      	cmp	r2, r4
 80072ca:	d0f0      	beq.n	80072ae <__match+0x6>
 80072cc:	2000      	movs	r0, #0
 80072ce:	e7f3      	b.n	80072b8 <__match+0x10>

080072d0 <__hexnan>:
 80072d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d4:	2500      	movs	r5, #0
 80072d6:	680b      	ldr	r3, [r1, #0]
 80072d8:	4682      	mov	sl, r0
 80072da:	115e      	asrs	r6, r3, #5
 80072dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80072e0:	f013 031f 	ands.w	r3, r3, #31
 80072e4:	bf18      	it	ne
 80072e6:	3604      	addne	r6, #4
 80072e8:	1f37      	subs	r7, r6, #4
 80072ea:	46b9      	mov	r9, r7
 80072ec:	463c      	mov	r4, r7
 80072ee:	46ab      	mov	fp, r5
 80072f0:	b087      	sub	sp, #28
 80072f2:	4690      	mov	r8, r2
 80072f4:	6802      	ldr	r2, [r0, #0]
 80072f6:	9301      	str	r3, [sp, #4]
 80072f8:	f846 5c04 	str.w	r5, [r6, #-4]
 80072fc:	9502      	str	r5, [sp, #8]
 80072fe:	7851      	ldrb	r1, [r2, #1]
 8007300:	1c53      	adds	r3, r2, #1
 8007302:	9303      	str	r3, [sp, #12]
 8007304:	b341      	cbz	r1, 8007358 <__hexnan+0x88>
 8007306:	4608      	mov	r0, r1
 8007308:	9205      	str	r2, [sp, #20]
 800730a:	9104      	str	r1, [sp, #16]
 800730c:	f7ff fd69 	bl	8006de2 <__hexdig_fun>
 8007310:	2800      	cmp	r0, #0
 8007312:	d14f      	bne.n	80073b4 <__hexnan+0xe4>
 8007314:	9904      	ldr	r1, [sp, #16]
 8007316:	9a05      	ldr	r2, [sp, #20]
 8007318:	2920      	cmp	r1, #32
 800731a:	d818      	bhi.n	800734e <__hexnan+0x7e>
 800731c:	9b02      	ldr	r3, [sp, #8]
 800731e:	459b      	cmp	fp, r3
 8007320:	dd13      	ble.n	800734a <__hexnan+0x7a>
 8007322:	454c      	cmp	r4, r9
 8007324:	d206      	bcs.n	8007334 <__hexnan+0x64>
 8007326:	2d07      	cmp	r5, #7
 8007328:	dc04      	bgt.n	8007334 <__hexnan+0x64>
 800732a:	462a      	mov	r2, r5
 800732c:	4649      	mov	r1, r9
 800732e:	4620      	mov	r0, r4
 8007330:	f7ff ffa8 	bl	8007284 <L_shift>
 8007334:	4544      	cmp	r4, r8
 8007336:	d950      	bls.n	80073da <__hexnan+0x10a>
 8007338:	2300      	movs	r3, #0
 800733a:	f1a4 0904 	sub.w	r9, r4, #4
 800733e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007342:	461d      	mov	r5, r3
 8007344:	464c      	mov	r4, r9
 8007346:	f8cd b008 	str.w	fp, [sp, #8]
 800734a:	9a03      	ldr	r2, [sp, #12]
 800734c:	e7d7      	b.n	80072fe <__hexnan+0x2e>
 800734e:	2929      	cmp	r1, #41	; 0x29
 8007350:	d156      	bne.n	8007400 <__hexnan+0x130>
 8007352:	3202      	adds	r2, #2
 8007354:	f8ca 2000 	str.w	r2, [sl]
 8007358:	f1bb 0f00 	cmp.w	fp, #0
 800735c:	d050      	beq.n	8007400 <__hexnan+0x130>
 800735e:	454c      	cmp	r4, r9
 8007360:	d206      	bcs.n	8007370 <__hexnan+0xa0>
 8007362:	2d07      	cmp	r5, #7
 8007364:	dc04      	bgt.n	8007370 <__hexnan+0xa0>
 8007366:	462a      	mov	r2, r5
 8007368:	4649      	mov	r1, r9
 800736a:	4620      	mov	r0, r4
 800736c:	f7ff ff8a 	bl	8007284 <L_shift>
 8007370:	4544      	cmp	r4, r8
 8007372:	d934      	bls.n	80073de <__hexnan+0x10e>
 8007374:	4623      	mov	r3, r4
 8007376:	f1a8 0204 	sub.w	r2, r8, #4
 800737a:	f853 1b04 	ldr.w	r1, [r3], #4
 800737e:	429f      	cmp	r7, r3
 8007380:	f842 1f04 	str.w	r1, [r2, #4]!
 8007384:	d2f9      	bcs.n	800737a <__hexnan+0xaa>
 8007386:	1b3b      	subs	r3, r7, r4
 8007388:	f023 0303 	bic.w	r3, r3, #3
 800738c:	3304      	adds	r3, #4
 800738e:	3401      	adds	r4, #1
 8007390:	3e03      	subs	r6, #3
 8007392:	42b4      	cmp	r4, r6
 8007394:	bf88      	it	hi
 8007396:	2304      	movhi	r3, #4
 8007398:	2200      	movs	r2, #0
 800739a:	4443      	add	r3, r8
 800739c:	f843 2b04 	str.w	r2, [r3], #4
 80073a0:	429f      	cmp	r7, r3
 80073a2:	d2fb      	bcs.n	800739c <__hexnan+0xcc>
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	b91b      	cbnz	r3, 80073b0 <__hexnan+0xe0>
 80073a8:	4547      	cmp	r7, r8
 80073aa:	d127      	bne.n	80073fc <__hexnan+0x12c>
 80073ac:	2301      	movs	r3, #1
 80073ae:	603b      	str	r3, [r7, #0]
 80073b0:	2005      	movs	r0, #5
 80073b2:	e026      	b.n	8007402 <__hexnan+0x132>
 80073b4:	3501      	adds	r5, #1
 80073b6:	2d08      	cmp	r5, #8
 80073b8:	f10b 0b01 	add.w	fp, fp, #1
 80073bc:	dd06      	ble.n	80073cc <__hexnan+0xfc>
 80073be:	4544      	cmp	r4, r8
 80073c0:	d9c3      	bls.n	800734a <__hexnan+0x7a>
 80073c2:	2300      	movs	r3, #0
 80073c4:	2501      	movs	r5, #1
 80073c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80073ca:	3c04      	subs	r4, #4
 80073cc:	6822      	ldr	r2, [r4, #0]
 80073ce:	f000 000f 	and.w	r0, r0, #15
 80073d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80073d6:	6022      	str	r2, [r4, #0]
 80073d8:	e7b7      	b.n	800734a <__hexnan+0x7a>
 80073da:	2508      	movs	r5, #8
 80073dc:	e7b5      	b.n	800734a <__hexnan+0x7a>
 80073de:	9b01      	ldr	r3, [sp, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0df      	beq.n	80073a4 <__hexnan+0xd4>
 80073e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073e8:	f1c3 0320 	rsb	r3, r3, #32
 80073ec:	fa22 f303 	lsr.w	r3, r2, r3
 80073f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80073f4:	401a      	ands	r2, r3
 80073f6:	f846 2c04 	str.w	r2, [r6, #-4]
 80073fa:	e7d3      	b.n	80073a4 <__hexnan+0xd4>
 80073fc:	3f04      	subs	r7, #4
 80073fe:	e7d1      	b.n	80073a4 <__hexnan+0xd4>
 8007400:	2004      	movs	r0, #4
 8007402:	b007      	add	sp, #28
 8007404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007408 <_localeconv_r>:
 8007408:	4800      	ldr	r0, [pc, #0]	; (800740c <_localeconv_r+0x4>)
 800740a:	4770      	bx	lr
 800740c:	2000016c 	.word	0x2000016c

08007410 <malloc>:
 8007410:	4b02      	ldr	r3, [pc, #8]	; (800741c <malloc+0xc>)
 8007412:	4601      	mov	r1, r0
 8007414:	6818      	ldr	r0, [r3, #0]
 8007416:	f000 bd65 	b.w	8007ee4 <_malloc_r>
 800741a:	bf00      	nop
 800741c:	20000014 	.word	0x20000014

08007420 <__ascii_mbtowc>:
 8007420:	b082      	sub	sp, #8
 8007422:	b901      	cbnz	r1, 8007426 <__ascii_mbtowc+0x6>
 8007424:	a901      	add	r1, sp, #4
 8007426:	b142      	cbz	r2, 800743a <__ascii_mbtowc+0x1a>
 8007428:	b14b      	cbz	r3, 800743e <__ascii_mbtowc+0x1e>
 800742a:	7813      	ldrb	r3, [r2, #0]
 800742c:	600b      	str	r3, [r1, #0]
 800742e:	7812      	ldrb	r2, [r2, #0]
 8007430:	1e10      	subs	r0, r2, #0
 8007432:	bf18      	it	ne
 8007434:	2001      	movne	r0, #1
 8007436:	b002      	add	sp, #8
 8007438:	4770      	bx	lr
 800743a:	4610      	mov	r0, r2
 800743c:	e7fb      	b.n	8007436 <__ascii_mbtowc+0x16>
 800743e:	f06f 0001 	mvn.w	r0, #1
 8007442:	e7f8      	b.n	8007436 <__ascii_mbtowc+0x16>

08007444 <memchr>:
 8007444:	4603      	mov	r3, r0
 8007446:	b510      	push	{r4, lr}
 8007448:	b2c9      	uxtb	r1, r1
 800744a:	4402      	add	r2, r0
 800744c:	4293      	cmp	r3, r2
 800744e:	4618      	mov	r0, r3
 8007450:	d101      	bne.n	8007456 <memchr+0x12>
 8007452:	2000      	movs	r0, #0
 8007454:	e003      	b.n	800745e <memchr+0x1a>
 8007456:	7804      	ldrb	r4, [r0, #0]
 8007458:	3301      	adds	r3, #1
 800745a:	428c      	cmp	r4, r1
 800745c:	d1f6      	bne.n	800744c <memchr+0x8>
 800745e:	bd10      	pop	{r4, pc}

08007460 <memcpy>:
 8007460:	440a      	add	r2, r1
 8007462:	4291      	cmp	r1, r2
 8007464:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007468:	d100      	bne.n	800746c <memcpy+0xc>
 800746a:	4770      	bx	lr
 800746c:	b510      	push	{r4, lr}
 800746e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007472:	4291      	cmp	r1, r2
 8007474:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007478:	d1f9      	bne.n	800746e <memcpy+0xe>
 800747a:	bd10      	pop	{r4, pc}

0800747c <_Balloc>:
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007480:	4604      	mov	r4, r0
 8007482:	460d      	mov	r5, r1
 8007484:	b976      	cbnz	r6, 80074a4 <_Balloc+0x28>
 8007486:	2010      	movs	r0, #16
 8007488:	f7ff ffc2 	bl	8007410 <malloc>
 800748c:	4602      	mov	r2, r0
 800748e:	6260      	str	r0, [r4, #36]	; 0x24
 8007490:	b920      	cbnz	r0, 800749c <_Balloc+0x20>
 8007492:	2166      	movs	r1, #102	; 0x66
 8007494:	4b17      	ldr	r3, [pc, #92]	; (80074f4 <_Balloc+0x78>)
 8007496:	4818      	ldr	r0, [pc, #96]	; (80074f8 <_Balloc+0x7c>)
 8007498:	f000 ff2c 	bl	80082f4 <__assert_func>
 800749c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074a0:	6006      	str	r6, [r0, #0]
 80074a2:	60c6      	str	r6, [r0, #12]
 80074a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80074a6:	68f3      	ldr	r3, [r6, #12]
 80074a8:	b183      	cbz	r3, 80074cc <_Balloc+0x50>
 80074aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074b2:	b9b8      	cbnz	r0, 80074e4 <_Balloc+0x68>
 80074b4:	2101      	movs	r1, #1
 80074b6:	fa01 f605 	lsl.w	r6, r1, r5
 80074ba:	1d72      	adds	r2, r6, #5
 80074bc:	4620      	mov	r0, r4
 80074be:	0092      	lsls	r2, r2, #2
 80074c0:	f000 fc94 	bl	8007dec <_calloc_r>
 80074c4:	b160      	cbz	r0, 80074e0 <_Balloc+0x64>
 80074c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074ca:	e00e      	b.n	80074ea <_Balloc+0x6e>
 80074cc:	2221      	movs	r2, #33	; 0x21
 80074ce:	2104      	movs	r1, #4
 80074d0:	4620      	mov	r0, r4
 80074d2:	f000 fc8b 	bl	8007dec <_calloc_r>
 80074d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074d8:	60f0      	str	r0, [r6, #12]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e4      	bne.n	80074aa <_Balloc+0x2e>
 80074e0:	2000      	movs	r0, #0
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
 80074e4:	6802      	ldr	r2, [r0, #0]
 80074e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074ea:	2300      	movs	r3, #0
 80074ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074f0:	e7f7      	b.n	80074e2 <_Balloc+0x66>
 80074f2:	bf00      	nop
 80074f4:	080097d6 	.word	0x080097d6
 80074f8:	080098d4 	.word	0x080098d4

080074fc <_Bfree>:
 80074fc:	b570      	push	{r4, r5, r6, lr}
 80074fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007500:	4605      	mov	r5, r0
 8007502:	460c      	mov	r4, r1
 8007504:	b976      	cbnz	r6, 8007524 <_Bfree+0x28>
 8007506:	2010      	movs	r0, #16
 8007508:	f7ff ff82 	bl	8007410 <malloc>
 800750c:	4602      	mov	r2, r0
 800750e:	6268      	str	r0, [r5, #36]	; 0x24
 8007510:	b920      	cbnz	r0, 800751c <_Bfree+0x20>
 8007512:	218a      	movs	r1, #138	; 0x8a
 8007514:	4b08      	ldr	r3, [pc, #32]	; (8007538 <_Bfree+0x3c>)
 8007516:	4809      	ldr	r0, [pc, #36]	; (800753c <_Bfree+0x40>)
 8007518:	f000 feec 	bl	80082f4 <__assert_func>
 800751c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007520:	6006      	str	r6, [r0, #0]
 8007522:	60c6      	str	r6, [r0, #12]
 8007524:	b13c      	cbz	r4, 8007536 <_Bfree+0x3a>
 8007526:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007528:	6862      	ldr	r2, [r4, #4]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007530:	6021      	str	r1, [r4, #0]
 8007532:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	080097d6 	.word	0x080097d6
 800753c:	080098d4 	.word	0x080098d4

08007540 <__multadd>:
 8007540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007544:	4607      	mov	r7, r0
 8007546:	460c      	mov	r4, r1
 8007548:	461e      	mov	r6, r3
 800754a:	2000      	movs	r0, #0
 800754c:	690d      	ldr	r5, [r1, #16]
 800754e:	f101 0c14 	add.w	ip, r1, #20
 8007552:	f8dc 3000 	ldr.w	r3, [ip]
 8007556:	3001      	adds	r0, #1
 8007558:	b299      	uxth	r1, r3
 800755a:	fb02 6101 	mla	r1, r2, r1, r6
 800755e:	0c1e      	lsrs	r6, r3, #16
 8007560:	0c0b      	lsrs	r3, r1, #16
 8007562:	fb02 3306 	mla	r3, r2, r6, r3
 8007566:	b289      	uxth	r1, r1
 8007568:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800756c:	4285      	cmp	r5, r0
 800756e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007572:	f84c 1b04 	str.w	r1, [ip], #4
 8007576:	dcec      	bgt.n	8007552 <__multadd+0x12>
 8007578:	b30e      	cbz	r6, 80075be <__multadd+0x7e>
 800757a:	68a3      	ldr	r3, [r4, #8]
 800757c:	42ab      	cmp	r3, r5
 800757e:	dc19      	bgt.n	80075b4 <__multadd+0x74>
 8007580:	6861      	ldr	r1, [r4, #4]
 8007582:	4638      	mov	r0, r7
 8007584:	3101      	adds	r1, #1
 8007586:	f7ff ff79 	bl	800747c <_Balloc>
 800758a:	4680      	mov	r8, r0
 800758c:	b928      	cbnz	r0, 800759a <__multadd+0x5a>
 800758e:	4602      	mov	r2, r0
 8007590:	21b5      	movs	r1, #181	; 0xb5
 8007592:	4b0c      	ldr	r3, [pc, #48]	; (80075c4 <__multadd+0x84>)
 8007594:	480c      	ldr	r0, [pc, #48]	; (80075c8 <__multadd+0x88>)
 8007596:	f000 fead 	bl	80082f4 <__assert_func>
 800759a:	6922      	ldr	r2, [r4, #16]
 800759c:	f104 010c 	add.w	r1, r4, #12
 80075a0:	3202      	adds	r2, #2
 80075a2:	0092      	lsls	r2, r2, #2
 80075a4:	300c      	adds	r0, #12
 80075a6:	f7ff ff5b 	bl	8007460 <memcpy>
 80075aa:	4621      	mov	r1, r4
 80075ac:	4638      	mov	r0, r7
 80075ae:	f7ff ffa5 	bl	80074fc <_Bfree>
 80075b2:	4644      	mov	r4, r8
 80075b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075b8:	3501      	adds	r5, #1
 80075ba:	615e      	str	r6, [r3, #20]
 80075bc:	6125      	str	r5, [r4, #16]
 80075be:	4620      	mov	r0, r4
 80075c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c4:	08009848 	.word	0x08009848
 80075c8:	080098d4 	.word	0x080098d4

080075cc <__s2b>:
 80075cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075d0:	4615      	mov	r5, r2
 80075d2:	2209      	movs	r2, #9
 80075d4:	461f      	mov	r7, r3
 80075d6:	3308      	adds	r3, #8
 80075d8:	460c      	mov	r4, r1
 80075da:	fb93 f3f2 	sdiv	r3, r3, r2
 80075de:	4606      	mov	r6, r0
 80075e0:	2201      	movs	r2, #1
 80075e2:	2100      	movs	r1, #0
 80075e4:	429a      	cmp	r2, r3
 80075e6:	db09      	blt.n	80075fc <__s2b+0x30>
 80075e8:	4630      	mov	r0, r6
 80075ea:	f7ff ff47 	bl	800747c <_Balloc>
 80075ee:	b940      	cbnz	r0, 8007602 <__s2b+0x36>
 80075f0:	4602      	mov	r2, r0
 80075f2:	21ce      	movs	r1, #206	; 0xce
 80075f4:	4b18      	ldr	r3, [pc, #96]	; (8007658 <__s2b+0x8c>)
 80075f6:	4819      	ldr	r0, [pc, #100]	; (800765c <__s2b+0x90>)
 80075f8:	f000 fe7c 	bl	80082f4 <__assert_func>
 80075fc:	0052      	lsls	r2, r2, #1
 80075fe:	3101      	adds	r1, #1
 8007600:	e7f0      	b.n	80075e4 <__s2b+0x18>
 8007602:	9b08      	ldr	r3, [sp, #32]
 8007604:	2d09      	cmp	r5, #9
 8007606:	6143      	str	r3, [r0, #20]
 8007608:	f04f 0301 	mov.w	r3, #1
 800760c:	6103      	str	r3, [r0, #16]
 800760e:	dd16      	ble.n	800763e <__s2b+0x72>
 8007610:	f104 0909 	add.w	r9, r4, #9
 8007614:	46c8      	mov	r8, r9
 8007616:	442c      	add	r4, r5
 8007618:	f818 3b01 	ldrb.w	r3, [r8], #1
 800761c:	4601      	mov	r1, r0
 800761e:	220a      	movs	r2, #10
 8007620:	4630      	mov	r0, r6
 8007622:	3b30      	subs	r3, #48	; 0x30
 8007624:	f7ff ff8c 	bl	8007540 <__multadd>
 8007628:	45a0      	cmp	r8, r4
 800762a:	d1f5      	bne.n	8007618 <__s2b+0x4c>
 800762c:	f1a5 0408 	sub.w	r4, r5, #8
 8007630:	444c      	add	r4, r9
 8007632:	1b2d      	subs	r5, r5, r4
 8007634:	1963      	adds	r3, r4, r5
 8007636:	42bb      	cmp	r3, r7
 8007638:	db04      	blt.n	8007644 <__s2b+0x78>
 800763a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800763e:	2509      	movs	r5, #9
 8007640:	340a      	adds	r4, #10
 8007642:	e7f6      	b.n	8007632 <__s2b+0x66>
 8007644:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007648:	4601      	mov	r1, r0
 800764a:	220a      	movs	r2, #10
 800764c:	4630      	mov	r0, r6
 800764e:	3b30      	subs	r3, #48	; 0x30
 8007650:	f7ff ff76 	bl	8007540 <__multadd>
 8007654:	e7ee      	b.n	8007634 <__s2b+0x68>
 8007656:	bf00      	nop
 8007658:	08009848 	.word	0x08009848
 800765c:	080098d4 	.word	0x080098d4

08007660 <__hi0bits>:
 8007660:	0c02      	lsrs	r2, r0, #16
 8007662:	0412      	lsls	r2, r2, #16
 8007664:	4603      	mov	r3, r0
 8007666:	b9ca      	cbnz	r2, 800769c <__hi0bits+0x3c>
 8007668:	0403      	lsls	r3, r0, #16
 800766a:	2010      	movs	r0, #16
 800766c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007670:	bf04      	itt	eq
 8007672:	021b      	lsleq	r3, r3, #8
 8007674:	3008      	addeq	r0, #8
 8007676:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800767a:	bf04      	itt	eq
 800767c:	011b      	lsleq	r3, r3, #4
 800767e:	3004      	addeq	r0, #4
 8007680:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007684:	bf04      	itt	eq
 8007686:	009b      	lsleq	r3, r3, #2
 8007688:	3002      	addeq	r0, #2
 800768a:	2b00      	cmp	r3, #0
 800768c:	db05      	blt.n	800769a <__hi0bits+0x3a>
 800768e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007692:	f100 0001 	add.w	r0, r0, #1
 8007696:	bf08      	it	eq
 8007698:	2020      	moveq	r0, #32
 800769a:	4770      	bx	lr
 800769c:	2000      	movs	r0, #0
 800769e:	e7e5      	b.n	800766c <__hi0bits+0xc>

080076a0 <__lo0bits>:
 80076a0:	6803      	ldr	r3, [r0, #0]
 80076a2:	4602      	mov	r2, r0
 80076a4:	f013 0007 	ands.w	r0, r3, #7
 80076a8:	d00b      	beq.n	80076c2 <__lo0bits+0x22>
 80076aa:	07d9      	lsls	r1, r3, #31
 80076ac:	d421      	bmi.n	80076f2 <__lo0bits+0x52>
 80076ae:	0798      	lsls	r0, r3, #30
 80076b0:	bf49      	itett	mi
 80076b2:	085b      	lsrmi	r3, r3, #1
 80076b4:	089b      	lsrpl	r3, r3, #2
 80076b6:	2001      	movmi	r0, #1
 80076b8:	6013      	strmi	r3, [r2, #0]
 80076ba:	bf5c      	itt	pl
 80076bc:	2002      	movpl	r0, #2
 80076be:	6013      	strpl	r3, [r2, #0]
 80076c0:	4770      	bx	lr
 80076c2:	b299      	uxth	r1, r3
 80076c4:	b909      	cbnz	r1, 80076ca <__lo0bits+0x2a>
 80076c6:	2010      	movs	r0, #16
 80076c8:	0c1b      	lsrs	r3, r3, #16
 80076ca:	b2d9      	uxtb	r1, r3
 80076cc:	b909      	cbnz	r1, 80076d2 <__lo0bits+0x32>
 80076ce:	3008      	adds	r0, #8
 80076d0:	0a1b      	lsrs	r3, r3, #8
 80076d2:	0719      	lsls	r1, r3, #28
 80076d4:	bf04      	itt	eq
 80076d6:	091b      	lsreq	r3, r3, #4
 80076d8:	3004      	addeq	r0, #4
 80076da:	0799      	lsls	r1, r3, #30
 80076dc:	bf04      	itt	eq
 80076de:	089b      	lsreq	r3, r3, #2
 80076e0:	3002      	addeq	r0, #2
 80076e2:	07d9      	lsls	r1, r3, #31
 80076e4:	d403      	bmi.n	80076ee <__lo0bits+0x4e>
 80076e6:	085b      	lsrs	r3, r3, #1
 80076e8:	f100 0001 	add.w	r0, r0, #1
 80076ec:	d003      	beq.n	80076f6 <__lo0bits+0x56>
 80076ee:	6013      	str	r3, [r2, #0]
 80076f0:	4770      	bx	lr
 80076f2:	2000      	movs	r0, #0
 80076f4:	4770      	bx	lr
 80076f6:	2020      	movs	r0, #32
 80076f8:	4770      	bx	lr
	...

080076fc <__i2b>:
 80076fc:	b510      	push	{r4, lr}
 80076fe:	460c      	mov	r4, r1
 8007700:	2101      	movs	r1, #1
 8007702:	f7ff febb 	bl	800747c <_Balloc>
 8007706:	4602      	mov	r2, r0
 8007708:	b928      	cbnz	r0, 8007716 <__i2b+0x1a>
 800770a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800770e:	4b04      	ldr	r3, [pc, #16]	; (8007720 <__i2b+0x24>)
 8007710:	4804      	ldr	r0, [pc, #16]	; (8007724 <__i2b+0x28>)
 8007712:	f000 fdef 	bl	80082f4 <__assert_func>
 8007716:	2301      	movs	r3, #1
 8007718:	6144      	str	r4, [r0, #20]
 800771a:	6103      	str	r3, [r0, #16]
 800771c:	bd10      	pop	{r4, pc}
 800771e:	bf00      	nop
 8007720:	08009848 	.word	0x08009848
 8007724:	080098d4 	.word	0x080098d4

08007728 <__multiply>:
 8007728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772c:	4691      	mov	r9, r2
 800772e:	690a      	ldr	r2, [r1, #16]
 8007730:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007734:	460c      	mov	r4, r1
 8007736:	429a      	cmp	r2, r3
 8007738:	bfbe      	ittt	lt
 800773a:	460b      	movlt	r3, r1
 800773c:	464c      	movlt	r4, r9
 800773e:	4699      	movlt	r9, r3
 8007740:	6927      	ldr	r7, [r4, #16]
 8007742:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007746:	68a3      	ldr	r3, [r4, #8]
 8007748:	6861      	ldr	r1, [r4, #4]
 800774a:	eb07 060a 	add.w	r6, r7, sl
 800774e:	42b3      	cmp	r3, r6
 8007750:	b085      	sub	sp, #20
 8007752:	bfb8      	it	lt
 8007754:	3101      	addlt	r1, #1
 8007756:	f7ff fe91 	bl	800747c <_Balloc>
 800775a:	b930      	cbnz	r0, 800776a <__multiply+0x42>
 800775c:	4602      	mov	r2, r0
 800775e:	f240 115d 	movw	r1, #349	; 0x15d
 8007762:	4b43      	ldr	r3, [pc, #268]	; (8007870 <__multiply+0x148>)
 8007764:	4843      	ldr	r0, [pc, #268]	; (8007874 <__multiply+0x14c>)
 8007766:	f000 fdc5 	bl	80082f4 <__assert_func>
 800776a:	f100 0514 	add.w	r5, r0, #20
 800776e:	462b      	mov	r3, r5
 8007770:	2200      	movs	r2, #0
 8007772:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007776:	4543      	cmp	r3, r8
 8007778:	d321      	bcc.n	80077be <__multiply+0x96>
 800777a:	f104 0314 	add.w	r3, r4, #20
 800777e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007782:	f109 0314 	add.w	r3, r9, #20
 8007786:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800778a:	9202      	str	r2, [sp, #8]
 800778c:	1b3a      	subs	r2, r7, r4
 800778e:	3a15      	subs	r2, #21
 8007790:	f022 0203 	bic.w	r2, r2, #3
 8007794:	3204      	adds	r2, #4
 8007796:	f104 0115 	add.w	r1, r4, #21
 800779a:	428f      	cmp	r7, r1
 800779c:	bf38      	it	cc
 800779e:	2204      	movcc	r2, #4
 80077a0:	9201      	str	r2, [sp, #4]
 80077a2:	9a02      	ldr	r2, [sp, #8]
 80077a4:	9303      	str	r3, [sp, #12]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d80c      	bhi.n	80077c4 <__multiply+0x9c>
 80077aa:	2e00      	cmp	r6, #0
 80077ac:	dd03      	ble.n	80077b6 <__multiply+0x8e>
 80077ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d059      	beq.n	800786a <__multiply+0x142>
 80077b6:	6106      	str	r6, [r0, #16]
 80077b8:	b005      	add	sp, #20
 80077ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077be:	f843 2b04 	str.w	r2, [r3], #4
 80077c2:	e7d8      	b.n	8007776 <__multiply+0x4e>
 80077c4:	f8b3 a000 	ldrh.w	sl, [r3]
 80077c8:	f1ba 0f00 	cmp.w	sl, #0
 80077cc:	d023      	beq.n	8007816 <__multiply+0xee>
 80077ce:	46a9      	mov	r9, r5
 80077d0:	f04f 0c00 	mov.w	ip, #0
 80077d4:	f104 0e14 	add.w	lr, r4, #20
 80077d8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80077dc:	f8d9 1000 	ldr.w	r1, [r9]
 80077e0:	fa1f fb82 	uxth.w	fp, r2
 80077e4:	b289      	uxth	r1, r1
 80077e6:	fb0a 110b 	mla	r1, sl, fp, r1
 80077ea:	4461      	add	r1, ip
 80077ec:	f8d9 c000 	ldr.w	ip, [r9]
 80077f0:	0c12      	lsrs	r2, r2, #16
 80077f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80077f6:	fb0a c202 	mla	r2, sl, r2, ip
 80077fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80077fe:	b289      	uxth	r1, r1
 8007800:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007804:	4577      	cmp	r7, lr
 8007806:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800780a:	f849 1b04 	str.w	r1, [r9], #4
 800780e:	d8e3      	bhi.n	80077d8 <__multiply+0xb0>
 8007810:	9a01      	ldr	r2, [sp, #4]
 8007812:	f845 c002 	str.w	ip, [r5, r2]
 8007816:	9a03      	ldr	r2, [sp, #12]
 8007818:	3304      	adds	r3, #4
 800781a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800781e:	f1b9 0f00 	cmp.w	r9, #0
 8007822:	d020      	beq.n	8007866 <__multiply+0x13e>
 8007824:	46ae      	mov	lr, r5
 8007826:	f04f 0a00 	mov.w	sl, #0
 800782a:	6829      	ldr	r1, [r5, #0]
 800782c:	f104 0c14 	add.w	ip, r4, #20
 8007830:	f8bc b000 	ldrh.w	fp, [ip]
 8007834:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007838:	b289      	uxth	r1, r1
 800783a:	fb09 220b 	mla	r2, r9, fp, r2
 800783e:	4492      	add	sl, r2
 8007840:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007844:	f84e 1b04 	str.w	r1, [lr], #4
 8007848:	f85c 2b04 	ldr.w	r2, [ip], #4
 800784c:	f8be 1000 	ldrh.w	r1, [lr]
 8007850:	0c12      	lsrs	r2, r2, #16
 8007852:	fb09 1102 	mla	r1, r9, r2, r1
 8007856:	4567      	cmp	r7, ip
 8007858:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800785c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007860:	d8e6      	bhi.n	8007830 <__multiply+0x108>
 8007862:	9a01      	ldr	r2, [sp, #4]
 8007864:	50a9      	str	r1, [r5, r2]
 8007866:	3504      	adds	r5, #4
 8007868:	e79b      	b.n	80077a2 <__multiply+0x7a>
 800786a:	3e01      	subs	r6, #1
 800786c:	e79d      	b.n	80077aa <__multiply+0x82>
 800786e:	bf00      	nop
 8007870:	08009848 	.word	0x08009848
 8007874:	080098d4 	.word	0x080098d4

08007878 <__pow5mult>:
 8007878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800787c:	4615      	mov	r5, r2
 800787e:	f012 0203 	ands.w	r2, r2, #3
 8007882:	4606      	mov	r6, r0
 8007884:	460f      	mov	r7, r1
 8007886:	d007      	beq.n	8007898 <__pow5mult+0x20>
 8007888:	4c25      	ldr	r4, [pc, #148]	; (8007920 <__pow5mult+0xa8>)
 800788a:	3a01      	subs	r2, #1
 800788c:	2300      	movs	r3, #0
 800788e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007892:	f7ff fe55 	bl	8007540 <__multadd>
 8007896:	4607      	mov	r7, r0
 8007898:	10ad      	asrs	r5, r5, #2
 800789a:	d03d      	beq.n	8007918 <__pow5mult+0xa0>
 800789c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800789e:	b97c      	cbnz	r4, 80078c0 <__pow5mult+0x48>
 80078a0:	2010      	movs	r0, #16
 80078a2:	f7ff fdb5 	bl	8007410 <malloc>
 80078a6:	4602      	mov	r2, r0
 80078a8:	6270      	str	r0, [r6, #36]	; 0x24
 80078aa:	b928      	cbnz	r0, 80078b8 <__pow5mult+0x40>
 80078ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80078b0:	4b1c      	ldr	r3, [pc, #112]	; (8007924 <__pow5mult+0xac>)
 80078b2:	481d      	ldr	r0, [pc, #116]	; (8007928 <__pow5mult+0xb0>)
 80078b4:	f000 fd1e 	bl	80082f4 <__assert_func>
 80078b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078bc:	6004      	str	r4, [r0, #0]
 80078be:	60c4      	str	r4, [r0, #12]
 80078c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078c8:	b94c      	cbnz	r4, 80078de <__pow5mult+0x66>
 80078ca:	f240 2171 	movw	r1, #625	; 0x271
 80078ce:	4630      	mov	r0, r6
 80078d0:	f7ff ff14 	bl	80076fc <__i2b>
 80078d4:	2300      	movs	r3, #0
 80078d6:	4604      	mov	r4, r0
 80078d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80078dc:	6003      	str	r3, [r0, #0]
 80078de:	f04f 0900 	mov.w	r9, #0
 80078e2:	07eb      	lsls	r3, r5, #31
 80078e4:	d50a      	bpl.n	80078fc <__pow5mult+0x84>
 80078e6:	4639      	mov	r1, r7
 80078e8:	4622      	mov	r2, r4
 80078ea:	4630      	mov	r0, r6
 80078ec:	f7ff ff1c 	bl	8007728 <__multiply>
 80078f0:	4680      	mov	r8, r0
 80078f2:	4639      	mov	r1, r7
 80078f4:	4630      	mov	r0, r6
 80078f6:	f7ff fe01 	bl	80074fc <_Bfree>
 80078fa:	4647      	mov	r7, r8
 80078fc:	106d      	asrs	r5, r5, #1
 80078fe:	d00b      	beq.n	8007918 <__pow5mult+0xa0>
 8007900:	6820      	ldr	r0, [r4, #0]
 8007902:	b938      	cbnz	r0, 8007914 <__pow5mult+0x9c>
 8007904:	4622      	mov	r2, r4
 8007906:	4621      	mov	r1, r4
 8007908:	4630      	mov	r0, r6
 800790a:	f7ff ff0d 	bl	8007728 <__multiply>
 800790e:	6020      	str	r0, [r4, #0]
 8007910:	f8c0 9000 	str.w	r9, [r0]
 8007914:	4604      	mov	r4, r0
 8007916:	e7e4      	b.n	80078e2 <__pow5mult+0x6a>
 8007918:	4638      	mov	r0, r7
 800791a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800791e:	bf00      	nop
 8007920:	08009a20 	.word	0x08009a20
 8007924:	080097d6 	.word	0x080097d6
 8007928:	080098d4 	.word	0x080098d4

0800792c <__lshift>:
 800792c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007930:	460c      	mov	r4, r1
 8007932:	4607      	mov	r7, r0
 8007934:	4691      	mov	r9, r2
 8007936:	6923      	ldr	r3, [r4, #16]
 8007938:	6849      	ldr	r1, [r1, #4]
 800793a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800793e:	68a3      	ldr	r3, [r4, #8]
 8007940:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007944:	f108 0601 	add.w	r6, r8, #1
 8007948:	42b3      	cmp	r3, r6
 800794a:	db0b      	blt.n	8007964 <__lshift+0x38>
 800794c:	4638      	mov	r0, r7
 800794e:	f7ff fd95 	bl	800747c <_Balloc>
 8007952:	4605      	mov	r5, r0
 8007954:	b948      	cbnz	r0, 800796a <__lshift+0x3e>
 8007956:	4602      	mov	r2, r0
 8007958:	f240 11d9 	movw	r1, #473	; 0x1d9
 800795c:	4b29      	ldr	r3, [pc, #164]	; (8007a04 <__lshift+0xd8>)
 800795e:	482a      	ldr	r0, [pc, #168]	; (8007a08 <__lshift+0xdc>)
 8007960:	f000 fcc8 	bl	80082f4 <__assert_func>
 8007964:	3101      	adds	r1, #1
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	e7ee      	b.n	8007948 <__lshift+0x1c>
 800796a:	2300      	movs	r3, #0
 800796c:	f100 0114 	add.w	r1, r0, #20
 8007970:	f100 0210 	add.w	r2, r0, #16
 8007974:	4618      	mov	r0, r3
 8007976:	4553      	cmp	r3, sl
 8007978:	db37      	blt.n	80079ea <__lshift+0xbe>
 800797a:	6920      	ldr	r0, [r4, #16]
 800797c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007980:	f104 0314 	add.w	r3, r4, #20
 8007984:	f019 091f 	ands.w	r9, r9, #31
 8007988:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800798c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007990:	d02f      	beq.n	80079f2 <__lshift+0xc6>
 8007992:	468a      	mov	sl, r1
 8007994:	f04f 0c00 	mov.w	ip, #0
 8007998:	f1c9 0e20 	rsb	lr, r9, #32
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	fa02 f209 	lsl.w	r2, r2, r9
 80079a2:	ea42 020c 	orr.w	r2, r2, ip
 80079a6:	f84a 2b04 	str.w	r2, [sl], #4
 80079aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ae:	4298      	cmp	r0, r3
 80079b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80079b4:	d8f2      	bhi.n	800799c <__lshift+0x70>
 80079b6:	1b03      	subs	r3, r0, r4
 80079b8:	3b15      	subs	r3, #21
 80079ba:	f023 0303 	bic.w	r3, r3, #3
 80079be:	3304      	adds	r3, #4
 80079c0:	f104 0215 	add.w	r2, r4, #21
 80079c4:	4290      	cmp	r0, r2
 80079c6:	bf38      	it	cc
 80079c8:	2304      	movcc	r3, #4
 80079ca:	f841 c003 	str.w	ip, [r1, r3]
 80079ce:	f1bc 0f00 	cmp.w	ip, #0
 80079d2:	d001      	beq.n	80079d8 <__lshift+0xac>
 80079d4:	f108 0602 	add.w	r6, r8, #2
 80079d8:	3e01      	subs	r6, #1
 80079da:	4638      	mov	r0, r7
 80079dc:	4621      	mov	r1, r4
 80079de:	612e      	str	r6, [r5, #16]
 80079e0:	f7ff fd8c 	bl	80074fc <_Bfree>
 80079e4:	4628      	mov	r0, r5
 80079e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80079ee:	3301      	adds	r3, #1
 80079f0:	e7c1      	b.n	8007976 <__lshift+0x4a>
 80079f2:	3904      	subs	r1, #4
 80079f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079f8:	4298      	cmp	r0, r3
 80079fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80079fe:	d8f9      	bhi.n	80079f4 <__lshift+0xc8>
 8007a00:	e7ea      	b.n	80079d8 <__lshift+0xac>
 8007a02:	bf00      	nop
 8007a04:	08009848 	.word	0x08009848
 8007a08:	080098d4 	.word	0x080098d4

08007a0c <__mcmp>:
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	690a      	ldr	r2, [r1, #16]
 8007a10:	6900      	ldr	r0, [r0, #16]
 8007a12:	b530      	push	{r4, r5, lr}
 8007a14:	1a80      	subs	r0, r0, r2
 8007a16:	d10d      	bne.n	8007a34 <__mcmp+0x28>
 8007a18:	3314      	adds	r3, #20
 8007a1a:	3114      	adds	r1, #20
 8007a1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a2c:	4295      	cmp	r5, r2
 8007a2e:	d002      	beq.n	8007a36 <__mcmp+0x2a>
 8007a30:	d304      	bcc.n	8007a3c <__mcmp+0x30>
 8007a32:	2001      	movs	r0, #1
 8007a34:	bd30      	pop	{r4, r5, pc}
 8007a36:	42a3      	cmp	r3, r4
 8007a38:	d3f4      	bcc.n	8007a24 <__mcmp+0x18>
 8007a3a:	e7fb      	b.n	8007a34 <__mcmp+0x28>
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a40:	e7f8      	b.n	8007a34 <__mcmp+0x28>
	...

08007a44 <__mdiff>:
 8007a44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a48:	460d      	mov	r5, r1
 8007a4a:	4607      	mov	r7, r0
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	4628      	mov	r0, r5
 8007a50:	4614      	mov	r4, r2
 8007a52:	f7ff ffdb 	bl	8007a0c <__mcmp>
 8007a56:	1e06      	subs	r6, r0, #0
 8007a58:	d111      	bne.n	8007a7e <__mdiff+0x3a>
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4638      	mov	r0, r7
 8007a5e:	f7ff fd0d 	bl	800747c <_Balloc>
 8007a62:	4602      	mov	r2, r0
 8007a64:	b928      	cbnz	r0, 8007a72 <__mdiff+0x2e>
 8007a66:	f240 2132 	movw	r1, #562	; 0x232
 8007a6a:	4b3a      	ldr	r3, [pc, #232]	; (8007b54 <__mdiff+0x110>)
 8007a6c:	483a      	ldr	r0, [pc, #232]	; (8007b58 <__mdiff+0x114>)
 8007a6e:	f000 fc41 	bl	80082f4 <__assert_func>
 8007a72:	2301      	movs	r3, #1
 8007a74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007a78:	4610      	mov	r0, r2
 8007a7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7e:	bfa4      	itt	ge
 8007a80:	4623      	movge	r3, r4
 8007a82:	462c      	movge	r4, r5
 8007a84:	4638      	mov	r0, r7
 8007a86:	6861      	ldr	r1, [r4, #4]
 8007a88:	bfa6      	itte	ge
 8007a8a:	461d      	movge	r5, r3
 8007a8c:	2600      	movge	r6, #0
 8007a8e:	2601      	movlt	r6, #1
 8007a90:	f7ff fcf4 	bl	800747c <_Balloc>
 8007a94:	4602      	mov	r2, r0
 8007a96:	b918      	cbnz	r0, 8007aa0 <__mdiff+0x5c>
 8007a98:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a9c:	4b2d      	ldr	r3, [pc, #180]	; (8007b54 <__mdiff+0x110>)
 8007a9e:	e7e5      	b.n	8007a6c <__mdiff+0x28>
 8007aa0:	f102 0814 	add.w	r8, r2, #20
 8007aa4:	46c2      	mov	sl, r8
 8007aa6:	f04f 0c00 	mov.w	ip, #0
 8007aaa:	6927      	ldr	r7, [r4, #16]
 8007aac:	60c6      	str	r6, [r0, #12]
 8007aae:	692e      	ldr	r6, [r5, #16]
 8007ab0:	f104 0014 	add.w	r0, r4, #20
 8007ab4:	f105 0914 	add.w	r9, r5, #20
 8007ab8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007abc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ac0:	3410      	adds	r4, #16
 8007ac2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007ac6:	f859 3b04 	ldr.w	r3, [r9], #4
 8007aca:	fa1f f18b 	uxth.w	r1, fp
 8007ace:	448c      	add	ip, r1
 8007ad0:	b299      	uxth	r1, r3
 8007ad2:	0c1b      	lsrs	r3, r3, #16
 8007ad4:	ebac 0101 	sub.w	r1, ip, r1
 8007ad8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007adc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007ae0:	b289      	uxth	r1, r1
 8007ae2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007ae6:	454e      	cmp	r6, r9
 8007ae8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007aec:	f84a 3b04 	str.w	r3, [sl], #4
 8007af0:	d8e7      	bhi.n	8007ac2 <__mdiff+0x7e>
 8007af2:	1b73      	subs	r3, r6, r5
 8007af4:	3b15      	subs	r3, #21
 8007af6:	f023 0303 	bic.w	r3, r3, #3
 8007afa:	3515      	adds	r5, #21
 8007afc:	3304      	adds	r3, #4
 8007afe:	42ae      	cmp	r6, r5
 8007b00:	bf38      	it	cc
 8007b02:	2304      	movcc	r3, #4
 8007b04:	4418      	add	r0, r3
 8007b06:	4443      	add	r3, r8
 8007b08:	461e      	mov	r6, r3
 8007b0a:	4605      	mov	r5, r0
 8007b0c:	4575      	cmp	r5, lr
 8007b0e:	d30e      	bcc.n	8007b2e <__mdiff+0xea>
 8007b10:	f10e 0103 	add.w	r1, lr, #3
 8007b14:	1a09      	subs	r1, r1, r0
 8007b16:	f021 0103 	bic.w	r1, r1, #3
 8007b1a:	3803      	subs	r0, #3
 8007b1c:	4586      	cmp	lr, r0
 8007b1e:	bf38      	it	cc
 8007b20:	2100      	movcc	r1, #0
 8007b22:	4419      	add	r1, r3
 8007b24:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007b28:	b18b      	cbz	r3, 8007b4e <__mdiff+0x10a>
 8007b2a:	6117      	str	r7, [r2, #16]
 8007b2c:	e7a4      	b.n	8007a78 <__mdiff+0x34>
 8007b2e:	f855 8b04 	ldr.w	r8, [r5], #4
 8007b32:	fa1f f188 	uxth.w	r1, r8
 8007b36:	4461      	add	r1, ip
 8007b38:	140c      	asrs	r4, r1, #16
 8007b3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007b3e:	b289      	uxth	r1, r1
 8007b40:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007b44:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007b48:	f846 1b04 	str.w	r1, [r6], #4
 8007b4c:	e7de      	b.n	8007b0c <__mdiff+0xc8>
 8007b4e:	3f01      	subs	r7, #1
 8007b50:	e7e8      	b.n	8007b24 <__mdiff+0xe0>
 8007b52:	bf00      	nop
 8007b54:	08009848 	.word	0x08009848
 8007b58:	080098d4 	.word	0x080098d4

08007b5c <__ulp>:
 8007b5c:	4b11      	ldr	r3, [pc, #68]	; (8007ba4 <__ulp+0x48>)
 8007b5e:	400b      	ands	r3, r1
 8007b60:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	dd02      	ble.n	8007b6e <__ulp+0x12>
 8007b68:	2000      	movs	r0, #0
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4770      	bx	lr
 8007b6e:	425b      	negs	r3, r3
 8007b70:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007b74:	f04f 0000 	mov.w	r0, #0
 8007b78:	f04f 0100 	mov.w	r1, #0
 8007b7c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007b80:	da04      	bge.n	8007b8c <__ulp+0x30>
 8007b82:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b86:	fa43 f102 	asr.w	r1, r3, r2
 8007b8a:	4770      	bx	lr
 8007b8c:	f1a2 0314 	sub.w	r3, r2, #20
 8007b90:	2b1e      	cmp	r3, #30
 8007b92:	bfd6      	itet	le
 8007b94:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007b98:	2301      	movgt	r3, #1
 8007b9a:	fa22 f303 	lsrle.w	r3, r2, r3
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	7ff00000 	.word	0x7ff00000

08007ba8 <__b2d>:
 8007ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bac:	6907      	ldr	r7, [r0, #16]
 8007bae:	f100 0914 	add.w	r9, r0, #20
 8007bb2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007bb6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007bba:	f1a7 0804 	sub.w	r8, r7, #4
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f7ff fd4e 	bl	8007660 <__hi0bits>
 8007bc4:	f1c0 0320 	rsb	r3, r0, #32
 8007bc8:	280a      	cmp	r0, #10
 8007bca:	600b      	str	r3, [r1, #0]
 8007bcc:	491f      	ldr	r1, [pc, #124]	; (8007c4c <__b2d+0xa4>)
 8007bce:	dc17      	bgt.n	8007c00 <__b2d+0x58>
 8007bd0:	45c1      	cmp	r9, r8
 8007bd2:	bf28      	it	cs
 8007bd4:	2200      	movcs	r2, #0
 8007bd6:	f1c0 0c0b 	rsb	ip, r0, #11
 8007bda:	fa26 f30c 	lsr.w	r3, r6, ip
 8007bde:	bf38      	it	cc
 8007be0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007be4:	ea43 0501 	orr.w	r5, r3, r1
 8007be8:	f100 0315 	add.w	r3, r0, #21
 8007bec:	fa06 f303 	lsl.w	r3, r6, r3
 8007bf0:	fa22 f20c 	lsr.w	r2, r2, ip
 8007bf4:	ea43 0402 	orr.w	r4, r3, r2
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c00:	45c1      	cmp	r9, r8
 8007c02:	bf2e      	itee	cs
 8007c04:	2200      	movcs	r2, #0
 8007c06:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007c0a:	f1a7 0808 	subcc.w	r8, r7, #8
 8007c0e:	f1b0 030b 	subs.w	r3, r0, #11
 8007c12:	d016      	beq.n	8007c42 <__b2d+0x9a>
 8007c14:	f1c3 0720 	rsb	r7, r3, #32
 8007c18:	fa22 f107 	lsr.w	r1, r2, r7
 8007c1c:	45c8      	cmp	r8, r9
 8007c1e:	fa06 f603 	lsl.w	r6, r6, r3
 8007c22:	ea46 0601 	orr.w	r6, r6, r1
 8007c26:	bf94      	ite	ls
 8007c28:	2100      	movls	r1, #0
 8007c2a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007c2e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007c32:	fa02 f003 	lsl.w	r0, r2, r3
 8007c36:	40f9      	lsrs	r1, r7
 8007c38:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007c3c:	ea40 0401 	orr.w	r4, r0, r1
 8007c40:	e7da      	b.n	8007bf8 <__b2d+0x50>
 8007c42:	4614      	mov	r4, r2
 8007c44:	ea46 0501 	orr.w	r5, r6, r1
 8007c48:	e7d6      	b.n	8007bf8 <__b2d+0x50>
 8007c4a:	bf00      	nop
 8007c4c:	3ff00000 	.word	0x3ff00000

08007c50 <__d2b>:
 8007c50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007c54:	2101      	movs	r1, #1
 8007c56:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007c5a:	4690      	mov	r8, r2
 8007c5c:	461d      	mov	r5, r3
 8007c5e:	f7ff fc0d 	bl	800747c <_Balloc>
 8007c62:	4604      	mov	r4, r0
 8007c64:	b930      	cbnz	r0, 8007c74 <__d2b+0x24>
 8007c66:	4602      	mov	r2, r0
 8007c68:	f240 310a 	movw	r1, #778	; 0x30a
 8007c6c:	4b24      	ldr	r3, [pc, #144]	; (8007d00 <__d2b+0xb0>)
 8007c6e:	4825      	ldr	r0, [pc, #148]	; (8007d04 <__d2b+0xb4>)
 8007c70:	f000 fb40 	bl	80082f4 <__assert_func>
 8007c74:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007c78:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007c7c:	bb2d      	cbnz	r5, 8007cca <__d2b+0x7a>
 8007c7e:	9301      	str	r3, [sp, #4]
 8007c80:	f1b8 0300 	subs.w	r3, r8, #0
 8007c84:	d026      	beq.n	8007cd4 <__d2b+0x84>
 8007c86:	4668      	mov	r0, sp
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	f7ff fd09 	bl	80076a0 <__lo0bits>
 8007c8e:	9900      	ldr	r1, [sp, #0]
 8007c90:	b1f0      	cbz	r0, 8007cd0 <__d2b+0x80>
 8007c92:	9a01      	ldr	r2, [sp, #4]
 8007c94:	f1c0 0320 	rsb	r3, r0, #32
 8007c98:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9c:	430b      	orrs	r3, r1
 8007c9e:	40c2      	lsrs	r2, r0
 8007ca0:	6163      	str	r3, [r4, #20]
 8007ca2:	9201      	str	r2, [sp, #4]
 8007ca4:	9b01      	ldr	r3, [sp, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	bf14      	ite	ne
 8007caa:	2102      	movne	r1, #2
 8007cac:	2101      	moveq	r1, #1
 8007cae:	61a3      	str	r3, [r4, #24]
 8007cb0:	6121      	str	r1, [r4, #16]
 8007cb2:	b1c5      	cbz	r5, 8007ce6 <__d2b+0x96>
 8007cb4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007cb8:	4405      	add	r5, r0
 8007cba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007cbe:	603d      	str	r5, [r7, #0]
 8007cc0:	6030      	str	r0, [r6, #0]
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	b002      	add	sp, #8
 8007cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cce:	e7d6      	b.n	8007c7e <__d2b+0x2e>
 8007cd0:	6161      	str	r1, [r4, #20]
 8007cd2:	e7e7      	b.n	8007ca4 <__d2b+0x54>
 8007cd4:	a801      	add	r0, sp, #4
 8007cd6:	f7ff fce3 	bl	80076a0 <__lo0bits>
 8007cda:	2101      	movs	r1, #1
 8007cdc:	9b01      	ldr	r3, [sp, #4]
 8007cde:	6121      	str	r1, [r4, #16]
 8007ce0:	6163      	str	r3, [r4, #20]
 8007ce2:	3020      	adds	r0, #32
 8007ce4:	e7e5      	b.n	8007cb2 <__d2b+0x62>
 8007ce6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007cea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007cee:	6038      	str	r0, [r7, #0]
 8007cf0:	6918      	ldr	r0, [r3, #16]
 8007cf2:	f7ff fcb5 	bl	8007660 <__hi0bits>
 8007cf6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007cfa:	6031      	str	r1, [r6, #0]
 8007cfc:	e7e1      	b.n	8007cc2 <__d2b+0x72>
 8007cfe:	bf00      	nop
 8007d00:	08009848 	.word	0x08009848
 8007d04:	080098d4 	.word	0x080098d4

08007d08 <__ratio>:
 8007d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	4688      	mov	r8, r1
 8007d0e:	4669      	mov	r1, sp
 8007d10:	4681      	mov	r9, r0
 8007d12:	f7ff ff49 	bl	8007ba8 <__b2d>
 8007d16:	460f      	mov	r7, r1
 8007d18:	4604      	mov	r4, r0
 8007d1a:	460d      	mov	r5, r1
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	a901      	add	r1, sp, #4
 8007d20:	f7ff ff42 	bl	8007ba8 <__b2d>
 8007d24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d28:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007d2c:	468b      	mov	fp, r1
 8007d2e:	eba3 0c02 	sub.w	ip, r3, r2
 8007d32:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007d36:	1a9b      	subs	r3, r3, r2
 8007d38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	bfd5      	itete	le
 8007d40:	460a      	movle	r2, r1
 8007d42:	462a      	movgt	r2, r5
 8007d44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007d48:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007d4c:	bfd8      	it	le
 8007d4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007d52:	465b      	mov	r3, fp
 8007d54:	4602      	mov	r2, r0
 8007d56:	4639      	mov	r1, r7
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f7f8 fce7 	bl	800072c <__aeabi_ddiv>
 8007d5e:	b003      	add	sp, #12
 8007d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d64 <__copybits>:
 8007d64:	3901      	subs	r1, #1
 8007d66:	b570      	push	{r4, r5, r6, lr}
 8007d68:	1149      	asrs	r1, r1, #5
 8007d6a:	6914      	ldr	r4, [r2, #16]
 8007d6c:	3101      	adds	r1, #1
 8007d6e:	f102 0314 	add.w	r3, r2, #20
 8007d72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007d7a:	1f05      	subs	r5, r0, #4
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	d30c      	bcc.n	8007d9a <__copybits+0x36>
 8007d80:	1aa3      	subs	r3, r4, r2
 8007d82:	3b11      	subs	r3, #17
 8007d84:	f023 0303 	bic.w	r3, r3, #3
 8007d88:	3211      	adds	r2, #17
 8007d8a:	42a2      	cmp	r2, r4
 8007d8c:	bf88      	it	hi
 8007d8e:	2300      	movhi	r3, #0
 8007d90:	4418      	add	r0, r3
 8007d92:	2300      	movs	r3, #0
 8007d94:	4288      	cmp	r0, r1
 8007d96:	d305      	bcc.n	8007da4 <__copybits+0x40>
 8007d98:	bd70      	pop	{r4, r5, r6, pc}
 8007d9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007d9e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007da2:	e7eb      	b.n	8007d7c <__copybits+0x18>
 8007da4:	f840 3b04 	str.w	r3, [r0], #4
 8007da8:	e7f4      	b.n	8007d94 <__copybits+0x30>

08007daa <__any_on>:
 8007daa:	f100 0214 	add.w	r2, r0, #20
 8007dae:	6900      	ldr	r0, [r0, #16]
 8007db0:	114b      	asrs	r3, r1, #5
 8007db2:	4298      	cmp	r0, r3
 8007db4:	b510      	push	{r4, lr}
 8007db6:	db11      	blt.n	8007ddc <__any_on+0x32>
 8007db8:	dd0a      	ble.n	8007dd0 <__any_on+0x26>
 8007dba:	f011 011f 	ands.w	r1, r1, #31
 8007dbe:	d007      	beq.n	8007dd0 <__any_on+0x26>
 8007dc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007dc4:	fa24 f001 	lsr.w	r0, r4, r1
 8007dc8:	fa00 f101 	lsl.w	r1, r0, r1
 8007dcc:	428c      	cmp	r4, r1
 8007dce:	d10b      	bne.n	8007de8 <__any_on+0x3e>
 8007dd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d803      	bhi.n	8007de0 <__any_on+0x36>
 8007dd8:	2000      	movs	r0, #0
 8007dda:	bd10      	pop	{r4, pc}
 8007ddc:	4603      	mov	r3, r0
 8007dde:	e7f7      	b.n	8007dd0 <__any_on+0x26>
 8007de0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007de4:	2900      	cmp	r1, #0
 8007de6:	d0f5      	beq.n	8007dd4 <__any_on+0x2a>
 8007de8:	2001      	movs	r0, #1
 8007dea:	e7f6      	b.n	8007dda <__any_on+0x30>

08007dec <_calloc_r>:
 8007dec:	b570      	push	{r4, r5, r6, lr}
 8007dee:	fba1 5402 	umull	r5, r4, r1, r2
 8007df2:	b934      	cbnz	r4, 8007e02 <_calloc_r+0x16>
 8007df4:	4629      	mov	r1, r5
 8007df6:	f000 f875 	bl	8007ee4 <_malloc_r>
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	b928      	cbnz	r0, 8007e0a <_calloc_r+0x1e>
 8007dfe:	4630      	mov	r0, r6
 8007e00:	bd70      	pop	{r4, r5, r6, pc}
 8007e02:	220c      	movs	r2, #12
 8007e04:	2600      	movs	r6, #0
 8007e06:	6002      	str	r2, [r0, #0]
 8007e08:	e7f9      	b.n	8007dfe <_calloc_r+0x12>
 8007e0a:	462a      	mov	r2, r5
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	f7fc fbf3 	bl	80045f8 <memset>
 8007e12:	e7f4      	b.n	8007dfe <_calloc_r+0x12>

08007e14 <_free_r>:
 8007e14:	b538      	push	{r3, r4, r5, lr}
 8007e16:	4605      	mov	r5, r0
 8007e18:	2900      	cmp	r1, #0
 8007e1a:	d040      	beq.n	8007e9e <_free_r+0x8a>
 8007e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e20:	1f0c      	subs	r4, r1, #4
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bfb8      	it	lt
 8007e26:	18e4      	addlt	r4, r4, r3
 8007e28:	f000 faae 	bl	8008388 <__malloc_lock>
 8007e2c:	4a1c      	ldr	r2, [pc, #112]	; (8007ea0 <_free_r+0x8c>)
 8007e2e:	6813      	ldr	r3, [r2, #0]
 8007e30:	b933      	cbnz	r3, 8007e40 <_free_r+0x2c>
 8007e32:	6063      	str	r3, [r4, #4]
 8007e34:	6014      	str	r4, [r2, #0]
 8007e36:	4628      	mov	r0, r5
 8007e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e3c:	f000 baaa 	b.w	8008394 <__malloc_unlock>
 8007e40:	42a3      	cmp	r3, r4
 8007e42:	d908      	bls.n	8007e56 <_free_r+0x42>
 8007e44:	6820      	ldr	r0, [r4, #0]
 8007e46:	1821      	adds	r1, r4, r0
 8007e48:	428b      	cmp	r3, r1
 8007e4a:	bf01      	itttt	eq
 8007e4c:	6819      	ldreq	r1, [r3, #0]
 8007e4e:	685b      	ldreq	r3, [r3, #4]
 8007e50:	1809      	addeq	r1, r1, r0
 8007e52:	6021      	streq	r1, [r4, #0]
 8007e54:	e7ed      	b.n	8007e32 <_free_r+0x1e>
 8007e56:	461a      	mov	r2, r3
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	b10b      	cbz	r3, 8007e60 <_free_r+0x4c>
 8007e5c:	42a3      	cmp	r3, r4
 8007e5e:	d9fa      	bls.n	8007e56 <_free_r+0x42>
 8007e60:	6811      	ldr	r1, [r2, #0]
 8007e62:	1850      	adds	r0, r2, r1
 8007e64:	42a0      	cmp	r0, r4
 8007e66:	d10b      	bne.n	8007e80 <_free_r+0x6c>
 8007e68:	6820      	ldr	r0, [r4, #0]
 8007e6a:	4401      	add	r1, r0
 8007e6c:	1850      	adds	r0, r2, r1
 8007e6e:	4283      	cmp	r3, r0
 8007e70:	6011      	str	r1, [r2, #0]
 8007e72:	d1e0      	bne.n	8007e36 <_free_r+0x22>
 8007e74:	6818      	ldr	r0, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	4401      	add	r1, r0
 8007e7a:	6011      	str	r1, [r2, #0]
 8007e7c:	6053      	str	r3, [r2, #4]
 8007e7e:	e7da      	b.n	8007e36 <_free_r+0x22>
 8007e80:	d902      	bls.n	8007e88 <_free_r+0x74>
 8007e82:	230c      	movs	r3, #12
 8007e84:	602b      	str	r3, [r5, #0]
 8007e86:	e7d6      	b.n	8007e36 <_free_r+0x22>
 8007e88:	6820      	ldr	r0, [r4, #0]
 8007e8a:	1821      	adds	r1, r4, r0
 8007e8c:	428b      	cmp	r3, r1
 8007e8e:	bf01      	itttt	eq
 8007e90:	6819      	ldreq	r1, [r3, #0]
 8007e92:	685b      	ldreq	r3, [r3, #4]
 8007e94:	1809      	addeq	r1, r1, r0
 8007e96:	6021      	streq	r1, [r4, #0]
 8007e98:	6063      	str	r3, [r4, #4]
 8007e9a:	6054      	str	r4, [r2, #4]
 8007e9c:	e7cb      	b.n	8007e36 <_free_r+0x22>
 8007e9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ea0:	2000071c 	.word	0x2000071c

08007ea4 <sbrk_aligned>:
 8007ea4:	b570      	push	{r4, r5, r6, lr}
 8007ea6:	4e0e      	ldr	r6, [pc, #56]	; (8007ee0 <sbrk_aligned+0x3c>)
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	6831      	ldr	r1, [r6, #0]
 8007eac:	4605      	mov	r5, r0
 8007eae:	b911      	cbnz	r1, 8007eb6 <sbrk_aligned+0x12>
 8007eb0:	f000 f9ee 	bl	8008290 <_sbrk_r>
 8007eb4:	6030      	str	r0, [r6, #0]
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f000 f9e9 	bl	8008290 <_sbrk_r>
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	d00a      	beq.n	8007ed8 <sbrk_aligned+0x34>
 8007ec2:	1cc4      	adds	r4, r0, #3
 8007ec4:	f024 0403 	bic.w	r4, r4, #3
 8007ec8:	42a0      	cmp	r0, r4
 8007eca:	d007      	beq.n	8007edc <sbrk_aligned+0x38>
 8007ecc:	1a21      	subs	r1, r4, r0
 8007ece:	4628      	mov	r0, r5
 8007ed0:	f000 f9de 	bl	8008290 <_sbrk_r>
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	d101      	bne.n	8007edc <sbrk_aligned+0x38>
 8007ed8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007edc:	4620      	mov	r0, r4
 8007ede:	bd70      	pop	{r4, r5, r6, pc}
 8007ee0:	20000720 	.word	0x20000720

08007ee4 <_malloc_r>:
 8007ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee8:	1ccd      	adds	r5, r1, #3
 8007eea:	f025 0503 	bic.w	r5, r5, #3
 8007eee:	3508      	adds	r5, #8
 8007ef0:	2d0c      	cmp	r5, #12
 8007ef2:	bf38      	it	cc
 8007ef4:	250c      	movcc	r5, #12
 8007ef6:	2d00      	cmp	r5, #0
 8007ef8:	4607      	mov	r7, r0
 8007efa:	db01      	blt.n	8007f00 <_malloc_r+0x1c>
 8007efc:	42a9      	cmp	r1, r5
 8007efe:	d905      	bls.n	8007f0c <_malloc_r+0x28>
 8007f00:	230c      	movs	r3, #12
 8007f02:	2600      	movs	r6, #0
 8007f04:	603b      	str	r3, [r7, #0]
 8007f06:	4630      	mov	r0, r6
 8007f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f0c:	4e2e      	ldr	r6, [pc, #184]	; (8007fc8 <_malloc_r+0xe4>)
 8007f0e:	f000 fa3b 	bl	8008388 <__malloc_lock>
 8007f12:	6833      	ldr	r3, [r6, #0]
 8007f14:	461c      	mov	r4, r3
 8007f16:	bb34      	cbnz	r4, 8007f66 <_malloc_r+0x82>
 8007f18:	4629      	mov	r1, r5
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	f7ff ffc2 	bl	8007ea4 <sbrk_aligned>
 8007f20:	1c43      	adds	r3, r0, #1
 8007f22:	4604      	mov	r4, r0
 8007f24:	d14d      	bne.n	8007fc2 <_malloc_r+0xde>
 8007f26:	6834      	ldr	r4, [r6, #0]
 8007f28:	4626      	mov	r6, r4
 8007f2a:	2e00      	cmp	r6, #0
 8007f2c:	d140      	bne.n	8007fb0 <_malloc_r+0xcc>
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	4631      	mov	r1, r6
 8007f32:	4638      	mov	r0, r7
 8007f34:	eb04 0803 	add.w	r8, r4, r3
 8007f38:	f000 f9aa 	bl	8008290 <_sbrk_r>
 8007f3c:	4580      	cmp	r8, r0
 8007f3e:	d13a      	bne.n	8007fb6 <_malloc_r+0xd2>
 8007f40:	6821      	ldr	r1, [r4, #0]
 8007f42:	3503      	adds	r5, #3
 8007f44:	1a6d      	subs	r5, r5, r1
 8007f46:	f025 0503 	bic.w	r5, r5, #3
 8007f4a:	3508      	adds	r5, #8
 8007f4c:	2d0c      	cmp	r5, #12
 8007f4e:	bf38      	it	cc
 8007f50:	250c      	movcc	r5, #12
 8007f52:	4638      	mov	r0, r7
 8007f54:	4629      	mov	r1, r5
 8007f56:	f7ff ffa5 	bl	8007ea4 <sbrk_aligned>
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d02b      	beq.n	8007fb6 <_malloc_r+0xd2>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	442b      	add	r3, r5
 8007f62:	6023      	str	r3, [r4, #0]
 8007f64:	e00e      	b.n	8007f84 <_malloc_r+0xa0>
 8007f66:	6822      	ldr	r2, [r4, #0]
 8007f68:	1b52      	subs	r2, r2, r5
 8007f6a:	d41e      	bmi.n	8007faa <_malloc_r+0xc6>
 8007f6c:	2a0b      	cmp	r2, #11
 8007f6e:	d916      	bls.n	8007f9e <_malloc_r+0xba>
 8007f70:	1961      	adds	r1, r4, r5
 8007f72:	42a3      	cmp	r3, r4
 8007f74:	6025      	str	r5, [r4, #0]
 8007f76:	bf18      	it	ne
 8007f78:	6059      	strne	r1, [r3, #4]
 8007f7a:	6863      	ldr	r3, [r4, #4]
 8007f7c:	bf08      	it	eq
 8007f7e:	6031      	streq	r1, [r6, #0]
 8007f80:	5162      	str	r2, [r4, r5]
 8007f82:	604b      	str	r3, [r1, #4]
 8007f84:	4638      	mov	r0, r7
 8007f86:	f104 060b 	add.w	r6, r4, #11
 8007f8a:	f000 fa03 	bl	8008394 <__malloc_unlock>
 8007f8e:	f026 0607 	bic.w	r6, r6, #7
 8007f92:	1d23      	adds	r3, r4, #4
 8007f94:	1af2      	subs	r2, r6, r3
 8007f96:	d0b6      	beq.n	8007f06 <_malloc_r+0x22>
 8007f98:	1b9b      	subs	r3, r3, r6
 8007f9a:	50a3      	str	r3, [r4, r2]
 8007f9c:	e7b3      	b.n	8007f06 <_malloc_r+0x22>
 8007f9e:	6862      	ldr	r2, [r4, #4]
 8007fa0:	42a3      	cmp	r3, r4
 8007fa2:	bf0c      	ite	eq
 8007fa4:	6032      	streq	r2, [r6, #0]
 8007fa6:	605a      	strne	r2, [r3, #4]
 8007fa8:	e7ec      	b.n	8007f84 <_malloc_r+0xa0>
 8007faa:	4623      	mov	r3, r4
 8007fac:	6864      	ldr	r4, [r4, #4]
 8007fae:	e7b2      	b.n	8007f16 <_malloc_r+0x32>
 8007fb0:	4634      	mov	r4, r6
 8007fb2:	6876      	ldr	r6, [r6, #4]
 8007fb4:	e7b9      	b.n	8007f2a <_malloc_r+0x46>
 8007fb6:	230c      	movs	r3, #12
 8007fb8:	4638      	mov	r0, r7
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	f000 f9ea 	bl	8008394 <__malloc_unlock>
 8007fc0:	e7a1      	b.n	8007f06 <_malloc_r+0x22>
 8007fc2:	6025      	str	r5, [r4, #0]
 8007fc4:	e7de      	b.n	8007f84 <_malloc_r+0xa0>
 8007fc6:	bf00      	nop
 8007fc8:	2000071c 	.word	0x2000071c

08007fcc <__ssputs_r>:
 8007fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd0:	688e      	ldr	r6, [r1, #8]
 8007fd2:	4682      	mov	sl, r0
 8007fd4:	429e      	cmp	r6, r3
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	4690      	mov	r8, r2
 8007fda:	461f      	mov	r7, r3
 8007fdc:	d838      	bhi.n	8008050 <__ssputs_r+0x84>
 8007fde:	898a      	ldrh	r2, [r1, #12]
 8007fe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fe4:	d032      	beq.n	800804c <__ssputs_r+0x80>
 8007fe6:	6825      	ldr	r5, [r4, #0]
 8007fe8:	6909      	ldr	r1, [r1, #16]
 8007fea:	3301      	adds	r3, #1
 8007fec:	eba5 0901 	sub.w	r9, r5, r1
 8007ff0:	6965      	ldr	r5, [r4, #20]
 8007ff2:	444b      	add	r3, r9
 8007ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ffc:	106d      	asrs	r5, r5, #1
 8007ffe:	429d      	cmp	r5, r3
 8008000:	bf38      	it	cc
 8008002:	461d      	movcc	r5, r3
 8008004:	0553      	lsls	r3, r2, #21
 8008006:	d531      	bpl.n	800806c <__ssputs_r+0xa0>
 8008008:	4629      	mov	r1, r5
 800800a:	f7ff ff6b 	bl	8007ee4 <_malloc_r>
 800800e:	4606      	mov	r6, r0
 8008010:	b950      	cbnz	r0, 8008028 <__ssputs_r+0x5c>
 8008012:	230c      	movs	r3, #12
 8008014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008018:	f8ca 3000 	str.w	r3, [sl]
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008028:	464a      	mov	r2, r9
 800802a:	6921      	ldr	r1, [r4, #16]
 800802c:	f7ff fa18 	bl	8007460 <memcpy>
 8008030:	89a3      	ldrh	r3, [r4, #12]
 8008032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800803a:	81a3      	strh	r3, [r4, #12]
 800803c:	6126      	str	r6, [r4, #16]
 800803e:	444e      	add	r6, r9
 8008040:	6026      	str	r6, [r4, #0]
 8008042:	463e      	mov	r6, r7
 8008044:	6165      	str	r5, [r4, #20]
 8008046:	eba5 0509 	sub.w	r5, r5, r9
 800804a:	60a5      	str	r5, [r4, #8]
 800804c:	42be      	cmp	r6, r7
 800804e:	d900      	bls.n	8008052 <__ssputs_r+0x86>
 8008050:	463e      	mov	r6, r7
 8008052:	4632      	mov	r2, r6
 8008054:	4641      	mov	r1, r8
 8008056:	6820      	ldr	r0, [r4, #0]
 8008058:	f000 f97c 	bl	8008354 <memmove>
 800805c:	68a3      	ldr	r3, [r4, #8]
 800805e:	2000      	movs	r0, #0
 8008060:	1b9b      	subs	r3, r3, r6
 8008062:	60a3      	str	r3, [r4, #8]
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	4433      	add	r3, r6
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	e7db      	b.n	8008024 <__ssputs_r+0x58>
 800806c:	462a      	mov	r2, r5
 800806e:	f000 f997 	bl	80083a0 <_realloc_r>
 8008072:	4606      	mov	r6, r0
 8008074:	2800      	cmp	r0, #0
 8008076:	d1e1      	bne.n	800803c <__ssputs_r+0x70>
 8008078:	4650      	mov	r0, sl
 800807a:	6921      	ldr	r1, [r4, #16]
 800807c:	f7ff feca 	bl	8007e14 <_free_r>
 8008080:	e7c7      	b.n	8008012 <__ssputs_r+0x46>
	...

08008084 <_svfiprintf_r>:
 8008084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008088:	4698      	mov	r8, r3
 800808a:	898b      	ldrh	r3, [r1, #12]
 800808c:	4607      	mov	r7, r0
 800808e:	061b      	lsls	r3, r3, #24
 8008090:	460d      	mov	r5, r1
 8008092:	4614      	mov	r4, r2
 8008094:	b09d      	sub	sp, #116	; 0x74
 8008096:	d50e      	bpl.n	80080b6 <_svfiprintf_r+0x32>
 8008098:	690b      	ldr	r3, [r1, #16]
 800809a:	b963      	cbnz	r3, 80080b6 <_svfiprintf_r+0x32>
 800809c:	2140      	movs	r1, #64	; 0x40
 800809e:	f7ff ff21 	bl	8007ee4 <_malloc_r>
 80080a2:	6028      	str	r0, [r5, #0]
 80080a4:	6128      	str	r0, [r5, #16]
 80080a6:	b920      	cbnz	r0, 80080b2 <_svfiprintf_r+0x2e>
 80080a8:	230c      	movs	r3, #12
 80080aa:	603b      	str	r3, [r7, #0]
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080b0:	e0d1      	b.n	8008256 <_svfiprintf_r+0x1d2>
 80080b2:	2340      	movs	r3, #64	; 0x40
 80080b4:	616b      	str	r3, [r5, #20]
 80080b6:	2300      	movs	r3, #0
 80080b8:	9309      	str	r3, [sp, #36]	; 0x24
 80080ba:	2320      	movs	r3, #32
 80080bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080c0:	2330      	movs	r3, #48	; 0x30
 80080c2:	f04f 0901 	mov.w	r9, #1
 80080c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80080ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008270 <_svfiprintf_r+0x1ec>
 80080ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080d2:	4623      	mov	r3, r4
 80080d4:	469a      	mov	sl, r3
 80080d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080da:	b10a      	cbz	r2, 80080e0 <_svfiprintf_r+0x5c>
 80080dc:	2a25      	cmp	r2, #37	; 0x25
 80080de:	d1f9      	bne.n	80080d4 <_svfiprintf_r+0x50>
 80080e0:	ebba 0b04 	subs.w	fp, sl, r4
 80080e4:	d00b      	beq.n	80080fe <_svfiprintf_r+0x7a>
 80080e6:	465b      	mov	r3, fp
 80080e8:	4622      	mov	r2, r4
 80080ea:	4629      	mov	r1, r5
 80080ec:	4638      	mov	r0, r7
 80080ee:	f7ff ff6d 	bl	8007fcc <__ssputs_r>
 80080f2:	3001      	adds	r0, #1
 80080f4:	f000 80aa 	beq.w	800824c <_svfiprintf_r+0x1c8>
 80080f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080fa:	445a      	add	r2, fp
 80080fc:	9209      	str	r2, [sp, #36]	; 0x24
 80080fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 80a2 	beq.w	800824c <_svfiprintf_r+0x1c8>
 8008108:	2300      	movs	r3, #0
 800810a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800810e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008112:	f10a 0a01 	add.w	sl, sl, #1
 8008116:	9304      	str	r3, [sp, #16]
 8008118:	9307      	str	r3, [sp, #28]
 800811a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800811e:	931a      	str	r3, [sp, #104]	; 0x68
 8008120:	4654      	mov	r4, sl
 8008122:	2205      	movs	r2, #5
 8008124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008128:	4851      	ldr	r0, [pc, #324]	; (8008270 <_svfiprintf_r+0x1ec>)
 800812a:	f7ff f98b 	bl	8007444 <memchr>
 800812e:	9a04      	ldr	r2, [sp, #16]
 8008130:	b9d8      	cbnz	r0, 800816a <_svfiprintf_r+0xe6>
 8008132:	06d0      	lsls	r0, r2, #27
 8008134:	bf44      	itt	mi
 8008136:	2320      	movmi	r3, #32
 8008138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800813c:	0711      	lsls	r1, r2, #28
 800813e:	bf44      	itt	mi
 8008140:	232b      	movmi	r3, #43	; 0x2b
 8008142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008146:	f89a 3000 	ldrb.w	r3, [sl]
 800814a:	2b2a      	cmp	r3, #42	; 0x2a
 800814c:	d015      	beq.n	800817a <_svfiprintf_r+0xf6>
 800814e:	4654      	mov	r4, sl
 8008150:	2000      	movs	r0, #0
 8008152:	f04f 0c0a 	mov.w	ip, #10
 8008156:	9a07      	ldr	r2, [sp, #28]
 8008158:	4621      	mov	r1, r4
 800815a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800815e:	3b30      	subs	r3, #48	; 0x30
 8008160:	2b09      	cmp	r3, #9
 8008162:	d94e      	bls.n	8008202 <_svfiprintf_r+0x17e>
 8008164:	b1b0      	cbz	r0, 8008194 <_svfiprintf_r+0x110>
 8008166:	9207      	str	r2, [sp, #28]
 8008168:	e014      	b.n	8008194 <_svfiprintf_r+0x110>
 800816a:	eba0 0308 	sub.w	r3, r0, r8
 800816e:	fa09 f303 	lsl.w	r3, r9, r3
 8008172:	4313      	orrs	r3, r2
 8008174:	46a2      	mov	sl, r4
 8008176:	9304      	str	r3, [sp, #16]
 8008178:	e7d2      	b.n	8008120 <_svfiprintf_r+0x9c>
 800817a:	9b03      	ldr	r3, [sp, #12]
 800817c:	1d19      	adds	r1, r3, #4
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	9103      	str	r1, [sp, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	bfbb      	ittet	lt
 8008186:	425b      	neglt	r3, r3
 8008188:	f042 0202 	orrlt.w	r2, r2, #2
 800818c:	9307      	strge	r3, [sp, #28]
 800818e:	9307      	strlt	r3, [sp, #28]
 8008190:	bfb8      	it	lt
 8008192:	9204      	strlt	r2, [sp, #16]
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	2b2e      	cmp	r3, #46	; 0x2e
 8008198:	d10c      	bne.n	80081b4 <_svfiprintf_r+0x130>
 800819a:	7863      	ldrb	r3, [r4, #1]
 800819c:	2b2a      	cmp	r3, #42	; 0x2a
 800819e:	d135      	bne.n	800820c <_svfiprintf_r+0x188>
 80081a0:	9b03      	ldr	r3, [sp, #12]
 80081a2:	3402      	adds	r4, #2
 80081a4:	1d1a      	adds	r2, r3, #4
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	9203      	str	r2, [sp, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	bfb8      	it	lt
 80081ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80081b2:	9305      	str	r3, [sp, #20]
 80081b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008274 <_svfiprintf_r+0x1f0>
 80081b8:	2203      	movs	r2, #3
 80081ba:	4650      	mov	r0, sl
 80081bc:	7821      	ldrb	r1, [r4, #0]
 80081be:	f7ff f941 	bl	8007444 <memchr>
 80081c2:	b140      	cbz	r0, 80081d6 <_svfiprintf_r+0x152>
 80081c4:	2340      	movs	r3, #64	; 0x40
 80081c6:	eba0 000a 	sub.w	r0, r0, sl
 80081ca:	fa03 f000 	lsl.w	r0, r3, r0
 80081ce:	9b04      	ldr	r3, [sp, #16]
 80081d0:	3401      	adds	r4, #1
 80081d2:	4303      	orrs	r3, r0
 80081d4:	9304      	str	r3, [sp, #16]
 80081d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081da:	2206      	movs	r2, #6
 80081dc:	4826      	ldr	r0, [pc, #152]	; (8008278 <_svfiprintf_r+0x1f4>)
 80081de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081e2:	f7ff f92f 	bl	8007444 <memchr>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d038      	beq.n	800825c <_svfiprintf_r+0x1d8>
 80081ea:	4b24      	ldr	r3, [pc, #144]	; (800827c <_svfiprintf_r+0x1f8>)
 80081ec:	bb1b      	cbnz	r3, 8008236 <_svfiprintf_r+0x1b2>
 80081ee:	9b03      	ldr	r3, [sp, #12]
 80081f0:	3307      	adds	r3, #7
 80081f2:	f023 0307 	bic.w	r3, r3, #7
 80081f6:	3308      	adds	r3, #8
 80081f8:	9303      	str	r3, [sp, #12]
 80081fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fc:	4433      	add	r3, r6
 80081fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008200:	e767      	b.n	80080d2 <_svfiprintf_r+0x4e>
 8008202:	460c      	mov	r4, r1
 8008204:	2001      	movs	r0, #1
 8008206:	fb0c 3202 	mla	r2, ip, r2, r3
 800820a:	e7a5      	b.n	8008158 <_svfiprintf_r+0xd4>
 800820c:	2300      	movs	r3, #0
 800820e:	f04f 0c0a 	mov.w	ip, #10
 8008212:	4619      	mov	r1, r3
 8008214:	3401      	adds	r4, #1
 8008216:	9305      	str	r3, [sp, #20]
 8008218:	4620      	mov	r0, r4
 800821a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800821e:	3a30      	subs	r2, #48	; 0x30
 8008220:	2a09      	cmp	r2, #9
 8008222:	d903      	bls.n	800822c <_svfiprintf_r+0x1a8>
 8008224:	2b00      	cmp	r3, #0
 8008226:	d0c5      	beq.n	80081b4 <_svfiprintf_r+0x130>
 8008228:	9105      	str	r1, [sp, #20]
 800822a:	e7c3      	b.n	80081b4 <_svfiprintf_r+0x130>
 800822c:	4604      	mov	r4, r0
 800822e:	2301      	movs	r3, #1
 8008230:	fb0c 2101 	mla	r1, ip, r1, r2
 8008234:	e7f0      	b.n	8008218 <_svfiprintf_r+0x194>
 8008236:	ab03      	add	r3, sp, #12
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	462a      	mov	r2, r5
 800823c:	4638      	mov	r0, r7
 800823e:	4b10      	ldr	r3, [pc, #64]	; (8008280 <_svfiprintf_r+0x1fc>)
 8008240:	a904      	add	r1, sp, #16
 8008242:	f7fc fa7f 	bl	8004744 <_printf_float>
 8008246:	1c42      	adds	r2, r0, #1
 8008248:	4606      	mov	r6, r0
 800824a:	d1d6      	bne.n	80081fa <_svfiprintf_r+0x176>
 800824c:	89ab      	ldrh	r3, [r5, #12]
 800824e:	065b      	lsls	r3, r3, #25
 8008250:	f53f af2c 	bmi.w	80080ac <_svfiprintf_r+0x28>
 8008254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008256:	b01d      	add	sp, #116	; 0x74
 8008258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825c:	ab03      	add	r3, sp, #12
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	462a      	mov	r2, r5
 8008262:	4638      	mov	r0, r7
 8008264:	4b06      	ldr	r3, [pc, #24]	; (8008280 <_svfiprintf_r+0x1fc>)
 8008266:	a904      	add	r1, sp, #16
 8008268:	f7fc fd08 	bl	8004c7c <_printf_i>
 800826c:	e7eb      	b.n	8008246 <_svfiprintf_r+0x1c2>
 800826e:	bf00      	nop
 8008270:	08009a2c 	.word	0x08009a2c
 8008274:	08009a32 	.word	0x08009a32
 8008278:	08009a36 	.word	0x08009a36
 800827c:	08004745 	.word	0x08004745
 8008280:	08007fcd 	.word	0x08007fcd

08008284 <nan>:
 8008284:	2000      	movs	r0, #0
 8008286:	4901      	ldr	r1, [pc, #4]	; (800828c <nan+0x8>)
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	7ff80000 	.word	0x7ff80000

08008290 <_sbrk_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	2300      	movs	r3, #0
 8008294:	4d05      	ldr	r5, [pc, #20]	; (80082ac <_sbrk_r+0x1c>)
 8008296:	4604      	mov	r4, r0
 8008298:	4608      	mov	r0, r1
 800829a:	602b      	str	r3, [r5, #0]
 800829c:	f7f9 fd00 	bl	8001ca0 <_sbrk>
 80082a0:	1c43      	adds	r3, r0, #1
 80082a2:	d102      	bne.n	80082aa <_sbrk_r+0x1a>
 80082a4:	682b      	ldr	r3, [r5, #0]
 80082a6:	b103      	cbz	r3, 80082aa <_sbrk_r+0x1a>
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	bd38      	pop	{r3, r4, r5, pc}
 80082ac:	20000724 	.word	0x20000724

080082b0 <strncmp>:
 80082b0:	4603      	mov	r3, r0
 80082b2:	b510      	push	{r4, lr}
 80082b4:	b172      	cbz	r2, 80082d4 <strncmp+0x24>
 80082b6:	3901      	subs	r1, #1
 80082b8:	1884      	adds	r4, r0, r2
 80082ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 80082be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80082c2:	4290      	cmp	r0, r2
 80082c4:	d101      	bne.n	80082ca <strncmp+0x1a>
 80082c6:	42a3      	cmp	r3, r4
 80082c8:	d101      	bne.n	80082ce <strncmp+0x1e>
 80082ca:	1a80      	subs	r0, r0, r2
 80082cc:	bd10      	pop	{r4, pc}
 80082ce:	2800      	cmp	r0, #0
 80082d0:	d1f3      	bne.n	80082ba <strncmp+0xa>
 80082d2:	e7fa      	b.n	80082ca <strncmp+0x1a>
 80082d4:	4610      	mov	r0, r2
 80082d6:	e7f9      	b.n	80082cc <strncmp+0x1c>

080082d8 <__ascii_wctomb>:
 80082d8:	4603      	mov	r3, r0
 80082da:	4608      	mov	r0, r1
 80082dc:	b141      	cbz	r1, 80082f0 <__ascii_wctomb+0x18>
 80082de:	2aff      	cmp	r2, #255	; 0xff
 80082e0:	d904      	bls.n	80082ec <__ascii_wctomb+0x14>
 80082e2:	228a      	movs	r2, #138	; 0x8a
 80082e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	4770      	bx	lr
 80082ec:	2001      	movs	r0, #1
 80082ee:	700a      	strb	r2, [r1, #0]
 80082f0:	4770      	bx	lr
	...

080082f4 <__assert_func>:
 80082f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082f6:	4614      	mov	r4, r2
 80082f8:	461a      	mov	r2, r3
 80082fa:	4b09      	ldr	r3, [pc, #36]	; (8008320 <__assert_func+0x2c>)
 80082fc:	4605      	mov	r5, r0
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68d8      	ldr	r0, [r3, #12]
 8008302:	b14c      	cbz	r4, 8008318 <__assert_func+0x24>
 8008304:	4b07      	ldr	r3, [pc, #28]	; (8008324 <__assert_func+0x30>)
 8008306:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800830a:	9100      	str	r1, [sp, #0]
 800830c:	462b      	mov	r3, r5
 800830e:	4906      	ldr	r1, [pc, #24]	; (8008328 <__assert_func+0x34>)
 8008310:	f000 f80e 	bl	8008330 <fiprintf>
 8008314:	f000 fa8a 	bl	800882c <abort>
 8008318:	4b04      	ldr	r3, [pc, #16]	; (800832c <__assert_func+0x38>)
 800831a:	461c      	mov	r4, r3
 800831c:	e7f3      	b.n	8008306 <__assert_func+0x12>
 800831e:	bf00      	nop
 8008320:	20000014 	.word	0x20000014
 8008324:	08009a3d 	.word	0x08009a3d
 8008328:	08009a4a 	.word	0x08009a4a
 800832c:	08009a78 	.word	0x08009a78

08008330 <fiprintf>:
 8008330:	b40e      	push	{r1, r2, r3}
 8008332:	b503      	push	{r0, r1, lr}
 8008334:	4601      	mov	r1, r0
 8008336:	ab03      	add	r3, sp, #12
 8008338:	4805      	ldr	r0, [pc, #20]	; (8008350 <fiprintf+0x20>)
 800833a:	f853 2b04 	ldr.w	r2, [r3], #4
 800833e:	6800      	ldr	r0, [r0, #0]
 8008340:	9301      	str	r3, [sp, #4]
 8008342:	f000 f883 	bl	800844c <_vfiprintf_r>
 8008346:	b002      	add	sp, #8
 8008348:	f85d eb04 	ldr.w	lr, [sp], #4
 800834c:	b003      	add	sp, #12
 800834e:	4770      	bx	lr
 8008350:	20000014 	.word	0x20000014

08008354 <memmove>:
 8008354:	4288      	cmp	r0, r1
 8008356:	b510      	push	{r4, lr}
 8008358:	eb01 0402 	add.w	r4, r1, r2
 800835c:	d902      	bls.n	8008364 <memmove+0x10>
 800835e:	4284      	cmp	r4, r0
 8008360:	4623      	mov	r3, r4
 8008362:	d807      	bhi.n	8008374 <memmove+0x20>
 8008364:	1e43      	subs	r3, r0, #1
 8008366:	42a1      	cmp	r1, r4
 8008368:	d008      	beq.n	800837c <memmove+0x28>
 800836a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800836e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008372:	e7f8      	b.n	8008366 <memmove+0x12>
 8008374:	4601      	mov	r1, r0
 8008376:	4402      	add	r2, r0
 8008378:	428a      	cmp	r2, r1
 800837a:	d100      	bne.n	800837e <memmove+0x2a>
 800837c:	bd10      	pop	{r4, pc}
 800837e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008386:	e7f7      	b.n	8008378 <memmove+0x24>

08008388 <__malloc_lock>:
 8008388:	4801      	ldr	r0, [pc, #4]	; (8008390 <__malloc_lock+0x8>)
 800838a:	f000 bc0b 	b.w	8008ba4 <__retarget_lock_acquire_recursive>
 800838e:	bf00      	nop
 8008390:	20000728 	.word	0x20000728

08008394 <__malloc_unlock>:
 8008394:	4801      	ldr	r0, [pc, #4]	; (800839c <__malloc_unlock+0x8>)
 8008396:	f000 bc06 	b.w	8008ba6 <__retarget_lock_release_recursive>
 800839a:	bf00      	nop
 800839c:	20000728 	.word	0x20000728

080083a0 <_realloc_r>:
 80083a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a4:	4680      	mov	r8, r0
 80083a6:	4614      	mov	r4, r2
 80083a8:	460e      	mov	r6, r1
 80083aa:	b921      	cbnz	r1, 80083b6 <_realloc_r+0x16>
 80083ac:	4611      	mov	r1, r2
 80083ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083b2:	f7ff bd97 	b.w	8007ee4 <_malloc_r>
 80083b6:	b92a      	cbnz	r2, 80083c4 <_realloc_r+0x24>
 80083b8:	f7ff fd2c 	bl	8007e14 <_free_r>
 80083bc:	4625      	mov	r5, r4
 80083be:	4628      	mov	r0, r5
 80083c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c4:	f000 fc56 	bl	8008c74 <_malloc_usable_size_r>
 80083c8:	4284      	cmp	r4, r0
 80083ca:	4607      	mov	r7, r0
 80083cc:	d802      	bhi.n	80083d4 <_realloc_r+0x34>
 80083ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083d2:	d812      	bhi.n	80083fa <_realloc_r+0x5a>
 80083d4:	4621      	mov	r1, r4
 80083d6:	4640      	mov	r0, r8
 80083d8:	f7ff fd84 	bl	8007ee4 <_malloc_r>
 80083dc:	4605      	mov	r5, r0
 80083de:	2800      	cmp	r0, #0
 80083e0:	d0ed      	beq.n	80083be <_realloc_r+0x1e>
 80083e2:	42bc      	cmp	r4, r7
 80083e4:	4622      	mov	r2, r4
 80083e6:	4631      	mov	r1, r6
 80083e8:	bf28      	it	cs
 80083ea:	463a      	movcs	r2, r7
 80083ec:	f7ff f838 	bl	8007460 <memcpy>
 80083f0:	4631      	mov	r1, r6
 80083f2:	4640      	mov	r0, r8
 80083f4:	f7ff fd0e 	bl	8007e14 <_free_r>
 80083f8:	e7e1      	b.n	80083be <_realloc_r+0x1e>
 80083fa:	4635      	mov	r5, r6
 80083fc:	e7df      	b.n	80083be <_realloc_r+0x1e>

080083fe <__sfputc_r>:
 80083fe:	6893      	ldr	r3, [r2, #8]
 8008400:	b410      	push	{r4}
 8008402:	3b01      	subs	r3, #1
 8008404:	2b00      	cmp	r3, #0
 8008406:	6093      	str	r3, [r2, #8]
 8008408:	da07      	bge.n	800841a <__sfputc_r+0x1c>
 800840a:	6994      	ldr	r4, [r2, #24]
 800840c:	42a3      	cmp	r3, r4
 800840e:	db01      	blt.n	8008414 <__sfputc_r+0x16>
 8008410:	290a      	cmp	r1, #10
 8008412:	d102      	bne.n	800841a <__sfputc_r+0x1c>
 8008414:	bc10      	pop	{r4}
 8008416:	f000 b949 	b.w	80086ac <__swbuf_r>
 800841a:	6813      	ldr	r3, [r2, #0]
 800841c:	1c58      	adds	r0, r3, #1
 800841e:	6010      	str	r0, [r2, #0]
 8008420:	7019      	strb	r1, [r3, #0]
 8008422:	4608      	mov	r0, r1
 8008424:	bc10      	pop	{r4}
 8008426:	4770      	bx	lr

08008428 <__sfputs_r>:
 8008428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842a:	4606      	mov	r6, r0
 800842c:	460f      	mov	r7, r1
 800842e:	4614      	mov	r4, r2
 8008430:	18d5      	adds	r5, r2, r3
 8008432:	42ac      	cmp	r4, r5
 8008434:	d101      	bne.n	800843a <__sfputs_r+0x12>
 8008436:	2000      	movs	r0, #0
 8008438:	e007      	b.n	800844a <__sfputs_r+0x22>
 800843a:	463a      	mov	r2, r7
 800843c:	4630      	mov	r0, r6
 800843e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008442:	f7ff ffdc 	bl	80083fe <__sfputc_r>
 8008446:	1c43      	adds	r3, r0, #1
 8008448:	d1f3      	bne.n	8008432 <__sfputs_r+0xa>
 800844a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800844c <_vfiprintf_r>:
 800844c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008450:	460d      	mov	r5, r1
 8008452:	4614      	mov	r4, r2
 8008454:	4698      	mov	r8, r3
 8008456:	4606      	mov	r6, r0
 8008458:	b09d      	sub	sp, #116	; 0x74
 800845a:	b118      	cbz	r0, 8008464 <_vfiprintf_r+0x18>
 800845c:	6983      	ldr	r3, [r0, #24]
 800845e:	b90b      	cbnz	r3, 8008464 <_vfiprintf_r+0x18>
 8008460:	f000 fb02 	bl	8008a68 <__sinit>
 8008464:	4b89      	ldr	r3, [pc, #548]	; (800868c <_vfiprintf_r+0x240>)
 8008466:	429d      	cmp	r5, r3
 8008468:	d11b      	bne.n	80084a2 <_vfiprintf_r+0x56>
 800846a:	6875      	ldr	r5, [r6, #4]
 800846c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800846e:	07d9      	lsls	r1, r3, #31
 8008470:	d405      	bmi.n	800847e <_vfiprintf_r+0x32>
 8008472:	89ab      	ldrh	r3, [r5, #12]
 8008474:	059a      	lsls	r2, r3, #22
 8008476:	d402      	bmi.n	800847e <_vfiprintf_r+0x32>
 8008478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800847a:	f000 fb93 	bl	8008ba4 <__retarget_lock_acquire_recursive>
 800847e:	89ab      	ldrh	r3, [r5, #12]
 8008480:	071b      	lsls	r3, r3, #28
 8008482:	d501      	bpl.n	8008488 <_vfiprintf_r+0x3c>
 8008484:	692b      	ldr	r3, [r5, #16]
 8008486:	b9eb      	cbnz	r3, 80084c4 <_vfiprintf_r+0x78>
 8008488:	4629      	mov	r1, r5
 800848a:	4630      	mov	r0, r6
 800848c:	f000 f960 	bl	8008750 <__swsetup_r>
 8008490:	b1c0      	cbz	r0, 80084c4 <_vfiprintf_r+0x78>
 8008492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008494:	07dc      	lsls	r4, r3, #31
 8008496:	d50e      	bpl.n	80084b6 <_vfiprintf_r+0x6a>
 8008498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800849c:	b01d      	add	sp, #116	; 0x74
 800849e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a2:	4b7b      	ldr	r3, [pc, #492]	; (8008690 <_vfiprintf_r+0x244>)
 80084a4:	429d      	cmp	r5, r3
 80084a6:	d101      	bne.n	80084ac <_vfiprintf_r+0x60>
 80084a8:	68b5      	ldr	r5, [r6, #8]
 80084aa:	e7df      	b.n	800846c <_vfiprintf_r+0x20>
 80084ac:	4b79      	ldr	r3, [pc, #484]	; (8008694 <_vfiprintf_r+0x248>)
 80084ae:	429d      	cmp	r5, r3
 80084b0:	bf08      	it	eq
 80084b2:	68f5      	ldreq	r5, [r6, #12]
 80084b4:	e7da      	b.n	800846c <_vfiprintf_r+0x20>
 80084b6:	89ab      	ldrh	r3, [r5, #12]
 80084b8:	0598      	lsls	r0, r3, #22
 80084ba:	d4ed      	bmi.n	8008498 <_vfiprintf_r+0x4c>
 80084bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084be:	f000 fb72 	bl	8008ba6 <__retarget_lock_release_recursive>
 80084c2:	e7e9      	b.n	8008498 <_vfiprintf_r+0x4c>
 80084c4:	2300      	movs	r3, #0
 80084c6:	9309      	str	r3, [sp, #36]	; 0x24
 80084c8:	2320      	movs	r3, #32
 80084ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084ce:	2330      	movs	r3, #48	; 0x30
 80084d0:	f04f 0901 	mov.w	r9, #1
 80084d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80084d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008698 <_vfiprintf_r+0x24c>
 80084dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084e0:	4623      	mov	r3, r4
 80084e2:	469a      	mov	sl, r3
 80084e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084e8:	b10a      	cbz	r2, 80084ee <_vfiprintf_r+0xa2>
 80084ea:	2a25      	cmp	r2, #37	; 0x25
 80084ec:	d1f9      	bne.n	80084e2 <_vfiprintf_r+0x96>
 80084ee:	ebba 0b04 	subs.w	fp, sl, r4
 80084f2:	d00b      	beq.n	800850c <_vfiprintf_r+0xc0>
 80084f4:	465b      	mov	r3, fp
 80084f6:	4622      	mov	r2, r4
 80084f8:	4629      	mov	r1, r5
 80084fa:	4630      	mov	r0, r6
 80084fc:	f7ff ff94 	bl	8008428 <__sfputs_r>
 8008500:	3001      	adds	r0, #1
 8008502:	f000 80aa 	beq.w	800865a <_vfiprintf_r+0x20e>
 8008506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008508:	445a      	add	r2, fp
 800850a:	9209      	str	r2, [sp, #36]	; 0x24
 800850c:	f89a 3000 	ldrb.w	r3, [sl]
 8008510:	2b00      	cmp	r3, #0
 8008512:	f000 80a2 	beq.w	800865a <_vfiprintf_r+0x20e>
 8008516:	2300      	movs	r3, #0
 8008518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800851c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008520:	f10a 0a01 	add.w	sl, sl, #1
 8008524:	9304      	str	r3, [sp, #16]
 8008526:	9307      	str	r3, [sp, #28]
 8008528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800852c:	931a      	str	r3, [sp, #104]	; 0x68
 800852e:	4654      	mov	r4, sl
 8008530:	2205      	movs	r2, #5
 8008532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008536:	4858      	ldr	r0, [pc, #352]	; (8008698 <_vfiprintf_r+0x24c>)
 8008538:	f7fe ff84 	bl	8007444 <memchr>
 800853c:	9a04      	ldr	r2, [sp, #16]
 800853e:	b9d8      	cbnz	r0, 8008578 <_vfiprintf_r+0x12c>
 8008540:	06d1      	lsls	r1, r2, #27
 8008542:	bf44      	itt	mi
 8008544:	2320      	movmi	r3, #32
 8008546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800854a:	0713      	lsls	r3, r2, #28
 800854c:	bf44      	itt	mi
 800854e:	232b      	movmi	r3, #43	; 0x2b
 8008550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008554:	f89a 3000 	ldrb.w	r3, [sl]
 8008558:	2b2a      	cmp	r3, #42	; 0x2a
 800855a:	d015      	beq.n	8008588 <_vfiprintf_r+0x13c>
 800855c:	4654      	mov	r4, sl
 800855e:	2000      	movs	r0, #0
 8008560:	f04f 0c0a 	mov.w	ip, #10
 8008564:	9a07      	ldr	r2, [sp, #28]
 8008566:	4621      	mov	r1, r4
 8008568:	f811 3b01 	ldrb.w	r3, [r1], #1
 800856c:	3b30      	subs	r3, #48	; 0x30
 800856e:	2b09      	cmp	r3, #9
 8008570:	d94e      	bls.n	8008610 <_vfiprintf_r+0x1c4>
 8008572:	b1b0      	cbz	r0, 80085a2 <_vfiprintf_r+0x156>
 8008574:	9207      	str	r2, [sp, #28]
 8008576:	e014      	b.n	80085a2 <_vfiprintf_r+0x156>
 8008578:	eba0 0308 	sub.w	r3, r0, r8
 800857c:	fa09 f303 	lsl.w	r3, r9, r3
 8008580:	4313      	orrs	r3, r2
 8008582:	46a2      	mov	sl, r4
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	e7d2      	b.n	800852e <_vfiprintf_r+0xe2>
 8008588:	9b03      	ldr	r3, [sp, #12]
 800858a:	1d19      	adds	r1, r3, #4
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	9103      	str	r1, [sp, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	bfbb      	ittet	lt
 8008594:	425b      	neglt	r3, r3
 8008596:	f042 0202 	orrlt.w	r2, r2, #2
 800859a:	9307      	strge	r3, [sp, #28]
 800859c:	9307      	strlt	r3, [sp, #28]
 800859e:	bfb8      	it	lt
 80085a0:	9204      	strlt	r2, [sp, #16]
 80085a2:	7823      	ldrb	r3, [r4, #0]
 80085a4:	2b2e      	cmp	r3, #46	; 0x2e
 80085a6:	d10c      	bne.n	80085c2 <_vfiprintf_r+0x176>
 80085a8:	7863      	ldrb	r3, [r4, #1]
 80085aa:	2b2a      	cmp	r3, #42	; 0x2a
 80085ac:	d135      	bne.n	800861a <_vfiprintf_r+0x1ce>
 80085ae:	9b03      	ldr	r3, [sp, #12]
 80085b0:	3402      	adds	r4, #2
 80085b2:	1d1a      	adds	r2, r3, #4
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	9203      	str	r2, [sp, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	bfb8      	it	lt
 80085bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80085c0:	9305      	str	r3, [sp, #20]
 80085c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800869c <_vfiprintf_r+0x250>
 80085c6:	2203      	movs	r2, #3
 80085c8:	4650      	mov	r0, sl
 80085ca:	7821      	ldrb	r1, [r4, #0]
 80085cc:	f7fe ff3a 	bl	8007444 <memchr>
 80085d0:	b140      	cbz	r0, 80085e4 <_vfiprintf_r+0x198>
 80085d2:	2340      	movs	r3, #64	; 0x40
 80085d4:	eba0 000a 	sub.w	r0, r0, sl
 80085d8:	fa03 f000 	lsl.w	r0, r3, r0
 80085dc:	9b04      	ldr	r3, [sp, #16]
 80085de:	3401      	adds	r4, #1
 80085e0:	4303      	orrs	r3, r0
 80085e2:	9304      	str	r3, [sp, #16]
 80085e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085e8:	2206      	movs	r2, #6
 80085ea:	482d      	ldr	r0, [pc, #180]	; (80086a0 <_vfiprintf_r+0x254>)
 80085ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085f0:	f7fe ff28 	bl	8007444 <memchr>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	d03f      	beq.n	8008678 <_vfiprintf_r+0x22c>
 80085f8:	4b2a      	ldr	r3, [pc, #168]	; (80086a4 <_vfiprintf_r+0x258>)
 80085fa:	bb1b      	cbnz	r3, 8008644 <_vfiprintf_r+0x1f8>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	3307      	adds	r3, #7
 8008600:	f023 0307 	bic.w	r3, r3, #7
 8008604:	3308      	adds	r3, #8
 8008606:	9303      	str	r3, [sp, #12]
 8008608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800860a:	443b      	add	r3, r7
 800860c:	9309      	str	r3, [sp, #36]	; 0x24
 800860e:	e767      	b.n	80084e0 <_vfiprintf_r+0x94>
 8008610:	460c      	mov	r4, r1
 8008612:	2001      	movs	r0, #1
 8008614:	fb0c 3202 	mla	r2, ip, r2, r3
 8008618:	e7a5      	b.n	8008566 <_vfiprintf_r+0x11a>
 800861a:	2300      	movs	r3, #0
 800861c:	f04f 0c0a 	mov.w	ip, #10
 8008620:	4619      	mov	r1, r3
 8008622:	3401      	adds	r4, #1
 8008624:	9305      	str	r3, [sp, #20]
 8008626:	4620      	mov	r0, r4
 8008628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800862c:	3a30      	subs	r2, #48	; 0x30
 800862e:	2a09      	cmp	r2, #9
 8008630:	d903      	bls.n	800863a <_vfiprintf_r+0x1ee>
 8008632:	2b00      	cmp	r3, #0
 8008634:	d0c5      	beq.n	80085c2 <_vfiprintf_r+0x176>
 8008636:	9105      	str	r1, [sp, #20]
 8008638:	e7c3      	b.n	80085c2 <_vfiprintf_r+0x176>
 800863a:	4604      	mov	r4, r0
 800863c:	2301      	movs	r3, #1
 800863e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008642:	e7f0      	b.n	8008626 <_vfiprintf_r+0x1da>
 8008644:	ab03      	add	r3, sp, #12
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	462a      	mov	r2, r5
 800864a:	4630      	mov	r0, r6
 800864c:	4b16      	ldr	r3, [pc, #88]	; (80086a8 <_vfiprintf_r+0x25c>)
 800864e:	a904      	add	r1, sp, #16
 8008650:	f7fc f878 	bl	8004744 <_printf_float>
 8008654:	4607      	mov	r7, r0
 8008656:	1c78      	adds	r0, r7, #1
 8008658:	d1d6      	bne.n	8008608 <_vfiprintf_r+0x1bc>
 800865a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800865c:	07d9      	lsls	r1, r3, #31
 800865e:	d405      	bmi.n	800866c <_vfiprintf_r+0x220>
 8008660:	89ab      	ldrh	r3, [r5, #12]
 8008662:	059a      	lsls	r2, r3, #22
 8008664:	d402      	bmi.n	800866c <_vfiprintf_r+0x220>
 8008666:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008668:	f000 fa9d 	bl	8008ba6 <__retarget_lock_release_recursive>
 800866c:	89ab      	ldrh	r3, [r5, #12]
 800866e:	065b      	lsls	r3, r3, #25
 8008670:	f53f af12 	bmi.w	8008498 <_vfiprintf_r+0x4c>
 8008674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008676:	e711      	b.n	800849c <_vfiprintf_r+0x50>
 8008678:	ab03      	add	r3, sp, #12
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	462a      	mov	r2, r5
 800867e:	4630      	mov	r0, r6
 8008680:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <_vfiprintf_r+0x25c>)
 8008682:	a904      	add	r1, sp, #16
 8008684:	f7fc fafa 	bl	8004c7c <_printf_i>
 8008688:	e7e4      	b.n	8008654 <_vfiprintf_r+0x208>
 800868a:	bf00      	nop
 800868c:	08009a9c 	.word	0x08009a9c
 8008690:	08009abc 	.word	0x08009abc
 8008694:	08009a7c 	.word	0x08009a7c
 8008698:	08009a2c 	.word	0x08009a2c
 800869c:	08009a32 	.word	0x08009a32
 80086a0:	08009a36 	.word	0x08009a36
 80086a4:	08004745 	.word	0x08004745
 80086a8:	08008429 	.word	0x08008429

080086ac <__swbuf_r>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	460e      	mov	r6, r1
 80086b0:	4614      	mov	r4, r2
 80086b2:	4605      	mov	r5, r0
 80086b4:	b118      	cbz	r0, 80086be <__swbuf_r+0x12>
 80086b6:	6983      	ldr	r3, [r0, #24]
 80086b8:	b90b      	cbnz	r3, 80086be <__swbuf_r+0x12>
 80086ba:	f000 f9d5 	bl	8008a68 <__sinit>
 80086be:	4b21      	ldr	r3, [pc, #132]	; (8008744 <__swbuf_r+0x98>)
 80086c0:	429c      	cmp	r4, r3
 80086c2:	d12b      	bne.n	800871c <__swbuf_r+0x70>
 80086c4:	686c      	ldr	r4, [r5, #4]
 80086c6:	69a3      	ldr	r3, [r4, #24]
 80086c8:	60a3      	str	r3, [r4, #8]
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	071a      	lsls	r2, r3, #28
 80086ce:	d52f      	bpl.n	8008730 <__swbuf_r+0x84>
 80086d0:	6923      	ldr	r3, [r4, #16]
 80086d2:	b36b      	cbz	r3, 8008730 <__swbuf_r+0x84>
 80086d4:	6923      	ldr	r3, [r4, #16]
 80086d6:	6820      	ldr	r0, [r4, #0]
 80086d8:	b2f6      	uxtb	r6, r6
 80086da:	1ac0      	subs	r0, r0, r3
 80086dc:	6963      	ldr	r3, [r4, #20]
 80086de:	4637      	mov	r7, r6
 80086e0:	4283      	cmp	r3, r0
 80086e2:	dc04      	bgt.n	80086ee <__swbuf_r+0x42>
 80086e4:	4621      	mov	r1, r4
 80086e6:	4628      	mov	r0, r5
 80086e8:	f000 f92a 	bl	8008940 <_fflush_r>
 80086ec:	bb30      	cbnz	r0, 800873c <__swbuf_r+0x90>
 80086ee:	68a3      	ldr	r3, [r4, #8]
 80086f0:	3001      	adds	r0, #1
 80086f2:	3b01      	subs	r3, #1
 80086f4:	60a3      	str	r3, [r4, #8]
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	6022      	str	r2, [r4, #0]
 80086fc:	701e      	strb	r6, [r3, #0]
 80086fe:	6963      	ldr	r3, [r4, #20]
 8008700:	4283      	cmp	r3, r0
 8008702:	d004      	beq.n	800870e <__swbuf_r+0x62>
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	07db      	lsls	r3, r3, #31
 8008708:	d506      	bpl.n	8008718 <__swbuf_r+0x6c>
 800870a:	2e0a      	cmp	r6, #10
 800870c:	d104      	bne.n	8008718 <__swbuf_r+0x6c>
 800870e:	4621      	mov	r1, r4
 8008710:	4628      	mov	r0, r5
 8008712:	f000 f915 	bl	8008940 <_fflush_r>
 8008716:	b988      	cbnz	r0, 800873c <__swbuf_r+0x90>
 8008718:	4638      	mov	r0, r7
 800871a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800871c:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <__swbuf_r+0x9c>)
 800871e:	429c      	cmp	r4, r3
 8008720:	d101      	bne.n	8008726 <__swbuf_r+0x7a>
 8008722:	68ac      	ldr	r4, [r5, #8]
 8008724:	e7cf      	b.n	80086c6 <__swbuf_r+0x1a>
 8008726:	4b09      	ldr	r3, [pc, #36]	; (800874c <__swbuf_r+0xa0>)
 8008728:	429c      	cmp	r4, r3
 800872a:	bf08      	it	eq
 800872c:	68ec      	ldreq	r4, [r5, #12]
 800872e:	e7ca      	b.n	80086c6 <__swbuf_r+0x1a>
 8008730:	4621      	mov	r1, r4
 8008732:	4628      	mov	r0, r5
 8008734:	f000 f80c 	bl	8008750 <__swsetup_r>
 8008738:	2800      	cmp	r0, #0
 800873a:	d0cb      	beq.n	80086d4 <__swbuf_r+0x28>
 800873c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008740:	e7ea      	b.n	8008718 <__swbuf_r+0x6c>
 8008742:	bf00      	nop
 8008744:	08009a9c 	.word	0x08009a9c
 8008748:	08009abc 	.word	0x08009abc
 800874c:	08009a7c 	.word	0x08009a7c

08008750 <__swsetup_r>:
 8008750:	4b32      	ldr	r3, [pc, #200]	; (800881c <__swsetup_r+0xcc>)
 8008752:	b570      	push	{r4, r5, r6, lr}
 8008754:	681d      	ldr	r5, [r3, #0]
 8008756:	4606      	mov	r6, r0
 8008758:	460c      	mov	r4, r1
 800875a:	b125      	cbz	r5, 8008766 <__swsetup_r+0x16>
 800875c:	69ab      	ldr	r3, [r5, #24]
 800875e:	b913      	cbnz	r3, 8008766 <__swsetup_r+0x16>
 8008760:	4628      	mov	r0, r5
 8008762:	f000 f981 	bl	8008a68 <__sinit>
 8008766:	4b2e      	ldr	r3, [pc, #184]	; (8008820 <__swsetup_r+0xd0>)
 8008768:	429c      	cmp	r4, r3
 800876a:	d10f      	bne.n	800878c <__swsetup_r+0x3c>
 800876c:	686c      	ldr	r4, [r5, #4]
 800876e:	89a3      	ldrh	r3, [r4, #12]
 8008770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008774:	0719      	lsls	r1, r3, #28
 8008776:	d42c      	bmi.n	80087d2 <__swsetup_r+0x82>
 8008778:	06dd      	lsls	r5, r3, #27
 800877a:	d411      	bmi.n	80087a0 <__swsetup_r+0x50>
 800877c:	2309      	movs	r3, #9
 800877e:	6033      	str	r3, [r6, #0]
 8008780:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008788:	81a3      	strh	r3, [r4, #12]
 800878a:	e03e      	b.n	800880a <__swsetup_r+0xba>
 800878c:	4b25      	ldr	r3, [pc, #148]	; (8008824 <__swsetup_r+0xd4>)
 800878e:	429c      	cmp	r4, r3
 8008790:	d101      	bne.n	8008796 <__swsetup_r+0x46>
 8008792:	68ac      	ldr	r4, [r5, #8]
 8008794:	e7eb      	b.n	800876e <__swsetup_r+0x1e>
 8008796:	4b24      	ldr	r3, [pc, #144]	; (8008828 <__swsetup_r+0xd8>)
 8008798:	429c      	cmp	r4, r3
 800879a:	bf08      	it	eq
 800879c:	68ec      	ldreq	r4, [r5, #12]
 800879e:	e7e6      	b.n	800876e <__swsetup_r+0x1e>
 80087a0:	0758      	lsls	r0, r3, #29
 80087a2:	d512      	bpl.n	80087ca <__swsetup_r+0x7a>
 80087a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087a6:	b141      	cbz	r1, 80087ba <__swsetup_r+0x6a>
 80087a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087ac:	4299      	cmp	r1, r3
 80087ae:	d002      	beq.n	80087b6 <__swsetup_r+0x66>
 80087b0:	4630      	mov	r0, r6
 80087b2:	f7ff fb2f 	bl	8007e14 <_free_r>
 80087b6:	2300      	movs	r3, #0
 80087b8:	6363      	str	r3, [r4, #52]	; 0x34
 80087ba:	89a3      	ldrh	r3, [r4, #12]
 80087bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087c0:	81a3      	strh	r3, [r4, #12]
 80087c2:	2300      	movs	r3, #0
 80087c4:	6063      	str	r3, [r4, #4]
 80087c6:	6923      	ldr	r3, [r4, #16]
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	f043 0308 	orr.w	r3, r3, #8
 80087d0:	81a3      	strh	r3, [r4, #12]
 80087d2:	6923      	ldr	r3, [r4, #16]
 80087d4:	b94b      	cbnz	r3, 80087ea <__swsetup_r+0x9a>
 80087d6:	89a3      	ldrh	r3, [r4, #12]
 80087d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087e0:	d003      	beq.n	80087ea <__swsetup_r+0x9a>
 80087e2:	4621      	mov	r1, r4
 80087e4:	4630      	mov	r0, r6
 80087e6:	f000 fa05 	bl	8008bf4 <__smakebuf_r>
 80087ea:	89a0      	ldrh	r0, [r4, #12]
 80087ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087f0:	f010 0301 	ands.w	r3, r0, #1
 80087f4:	d00a      	beq.n	800880c <__swsetup_r+0xbc>
 80087f6:	2300      	movs	r3, #0
 80087f8:	60a3      	str	r3, [r4, #8]
 80087fa:	6963      	ldr	r3, [r4, #20]
 80087fc:	425b      	negs	r3, r3
 80087fe:	61a3      	str	r3, [r4, #24]
 8008800:	6923      	ldr	r3, [r4, #16]
 8008802:	b943      	cbnz	r3, 8008816 <__swsetup_r+0xc6>
 8008804:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008808:	d1ba      	bne.n	8008780 <__swsetup_r+0x30>
 800880a:	bd70      	pop	{r4, r5, r6, pc}
 800880c:	0781      	lsls	r1, r0, #30
 800880e:	bf58      	it	pl
 8008810:	6963      	ldrpl	r3, [r4, #20]
 8008812:	60a3      	str	r3, [r4, #8]
 8008814:	e7f4      	b.n	8008800 <__swsetup_r+0xb0>
 8008816:	2000      	movs	r0, #0
 8008818:	e7f7      	b.n	800880a <__swsetup_r+0xba>
 800881a:	bf00      	nop
 800881c:	20000014 	.word	0x20000014
 8008820:	08009a9c 	.word	0x08009a9c
 8008824:	08009abc 	.word	0x08009abc
 8008828:	08009a7c 	.word	0x08009a7c

0800882c <abort>:
 800882c:	2006      	movs	r0, #6
 800882e:	b508      	push	{r3, lr}
 8008830:	f000 fa50 	bl	8008cd4 <raise>
 8008834:	2001      	movs	r0, #1
 8008836:	f7f9 f9c0 	bl	8001bba <_exit>
	...

0800883c <__sflush_r>:
 800883c:	898a      	ldrh	r2, [r1, #12]
 800883e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008840:	4605      	mov	r5, r0
 8008842:	0710      	lsls	r0, r2, #28
 8008844:	460c      	mov	r4, r1
 8008846:	d457      	bmi.n	80088f8 <__sflush_r+0xbc>
 8008848:	684b      	ldr	r3, [r1, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	dc04      	bgt.n	8008858 <__sflush_r+0x1c>
 800884e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008850:	2b00      	cmp	r3, #0
 8008852:	dc01      	bgt.n	8008858 <__sflush_r+0x1c>
 8008854:	2000      	movs	r0, #0
 8008856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800885a:	2e00      	cmp	r6, #0
 800885c:	d0fa      	beq.n	8008854 <__sflush_r+0x18>
 800885e:	2300      	movs	r3, #0
 8008860:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008864:	682f      	ldr	r7, [r5, #0]
 8008866:	602b      	str	r3, [r5, #0]
 8008868:	d032      	beq.n	80088d0 <__sflush_r+0x94>
 800886a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800886c:	89a3      	ldrh	r3, [r4, #12]
 800886e:	075a      	lsls	r2, r3, #29
 8008870:	d505      	bpl.n	800887e <__sflush_r+0x42>
 8008872:	6863      	ldr	r3, [r4, #4]
 8008874:	1ac0      	subs	r0, r0, r3
 8008876:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008878:	b10b      	cbz	r3, 800887e <__sflush_r+0x42>
 800887a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800887c:	1ac0      	subs	r0, r0, r3
 800887e:	2300      	movs	r3, #0
 8008880:	4602      	mov	r2, r0
 8008882:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008884:	4628      	mov	r0, r5
 8008886:	6a21      	ldr	r1, [r4, #32]
 8008888:	47b0      	blx	r6
 800888a:	1c43      	adds	r3, r0, #1
 800888c:	89a3      	ldrh	r3, [r4, #12]
 800888e:	d106      	bne.n	800889e <__sflush_r+0x62>
 8008890:	6829      	ldr	r1, [r5, #0]
 8008892:	291d      	cmp	r1, #29
 8008894:	d82c      	bhi.n	80088f0 <__sflush_r+0xb4>
 8008896:	4a29      	ldr	r2, [pc, #164]	; (800893c <__sflush_r+0x100>)
 8008898:	40ca      	lsrs	r2, r1
 800889a:	07d6      	lsls	r6, r2, #31
 800889c:	d528      	bpl.n	80088f0 <__sflush_r+0xb4>
 800889e:	2200      	movs	r2, #0
 80088a0:	6062      	str	r2, [r4, #4]
 80088a2:	6922      	ldr	r2, [r4, #16]
 80088a4:	04d9      	lsls	r1, r3, #19
 80088a6:	6022      	str	r2, [r4, #0]
 80088a8:	d504      	bpl.n	80088b4 <__sflush_r+0x78>
 80088aa:	1c42      	adds	r2, r0, #1
 80088ac:	d101      	bne.n	80088b2 <__sflush_r+0x76>
 80088ae:	682b      	ldr	r3, [r5, #0]
 80088b0:	b903      	cbnz	r3, 80088b4 <__sflush_r+0x78>
 80088b2:	6560      	str	r0, [r4, #84]	; 0x54
 80088b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088b6:	602f      	str	r7, [r5, #0]
 80088b8:	2900      	cmp	r1, #0
 80088ba:	d0cb      	beq.n	8008854 <__sflush_r+0x18>
 80088bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088c0:	4299      	cmp	r1, r3
 80088c2:	d002      	beq.n	80088ca <__sflush_r+0x8e>
 80088c4:	4628      	mov	r0, r5
 80088c6:	f7ff faa5 	bl	8007e14 <_free_r>
 80088ca:	2000      	movs	r0, #0
 80088cc:	6360      	str	r0, [r4, #52]	; 0x34
 80088ce:	e7c2      	b.n	8008856 <__sflush_r+0x1a>
 80088d0:	6a21      	ldr	r1, [r4, #32]
 80088d2:	2301      	movs	r3, #1
 80088d4:	4628      	mov	r0, r5
 80088d6:	47b0      	blx	r6
 80088d8:	1c41      	adds	r1, r0, #1
 80088da:	d1c7      	bne.n	800886c <__sflush_r+0x30>
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d0c4      	beq.n	800886c <__sflush_r+0x30>
 80088e2:	2b1d      	cmp	r3, #29
 80088e4:	d001      	beq.n	80088ea <__sflush_r+0xae>
 80088e6:	2b16      	cmp	r3, #22
 80088e8:	d101      	bne.n	80088ee <__sflush_r+0xb2>
 80088ea:	602f      	str	r7, [r5, #0]
 80088ec:	e7b2      	b.n	8008854 <__sflush_r+0x18>
 80088ee:	89a3      	ldrh	r3, [r4, #12]
 80088f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088f4:	81a3      	strh	r3, [r4, #12]
 80088f6:	e7ae      	b.n	8008856 <__sflush_r+0x1a>
 80088f8:	690f      	ldr	r7, [r1, #16]
 80088fa:	2f00      	cmp	r7, #0
 80088fc:	d0aa      	beq.n	8008854 <__sflush_r+0x18>
 80088fe:	0793      	lsls	r3, r2, #30
 8008900:	bf18      	it	ne
 8008902:	2300      	movne	r3, #0
 8008904:	680e      	ldr	r6, [r1, #0]
 8008906:	bf08      	it	eq
 8008908:	694b      	ldreq	r3, [r1, #20]
 800890a:	1bf6      	subs	r6, r6, r7
 800890c:	600f      	str	r7, [r1, #0]
 800890e:	608b      	str	r3, [r1, #8]
 8008910:	2e00      	cmp	r6, #0
 8008912:	dd9f      	ble.n	8008854 <__sflush_r+0x18>
 8008914:	4633      	mov	r3, r6
 8008916:	463a      	mov	r2, r7
 8008918:	4628      	mov	r0, r5
 800891a:	6a21      	ldr	r1, [r4, #32]
 800891c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008920:	47e0      	blx	ip
 8008922:	2800      	cmp	r0, #0
 8008924:	dc06      	bgt.n	8008934 <__sflush_r+0xf8>
 8008926:	89a3      	ldrh	r3, [r4, #12]
 8008928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800892c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008930:	81a3      	strh	r3, [r4, #12]
 8008932:	e790      	b.n	8008856 <__sflush_r+0x1a>
 8008934:	4407      	add	r7, r0
 8008936:	1a36      	subs	r6, r6, r0
 8008938:	e7ea      	b.n	8008910 <__sflush_r+0xd4>
 800893a:	bf00      	nop
 800893c:	20400001 	.word	0x20400001

08008940 <_fflush_r>:
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	690b      	ldr	r3, [r1, #16]
 8008944:	4605      	mov	r5, r0
 8008946:	460c      	mov	r4, r1
 8008948:	b913      	cbnz	r3, 8008950 <_fflush_r+0x10>
 800894a:	2500      	movs	r5, #0
 800894c:	4628      	mov	r0, r5
 800894e:	bd38      	pop	{r3, r4, r5, pc}
 8008950:	b118      	cbz	r0, 800895a <_fflush_r+0x1a>
 8008952:	6983      	ldr	r3, [r0, #24]
 8008954:	b90b      	cbnz	r3, 800895a <_fflush_r+0x1a>
 8008956:	f000 f887 	bl	8008a68 <__sinit>
 800895a:	4b14      	ldr	r3, [pc, #80]	; (80089ac <_fflush_r+0x6c>)
 800895c:	429c      	cmp	r4, r3
 800895e:	d11b      	bne.n	8008998 <_fflush_r+0x58>
 8008960:	686c      	ldr	r4, [r5, #4]
 8008962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0ef      	beq.n	800894a <_fflush_r+0xa>
 800896a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800896c:	07d0      	lsls	r0, r2, #31
 800896e:	d404      	bmi.n	800897a <_fflush_r+0x3a>
 8008970:	0599      	lsls	r1, r3, #22
 8008972:	d402      	bmi.n	800897a <_fflush_r+0x3a>
 8008974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008976:	f000 f915 	bl	8008ba4 <__retarget_lock_acquire_recursive>
 800897a:	4628      	mov	r0, r5
 800897c:	4621      	mov	r1, r4
 800897e:	f7ff ff5d 	bl	800883c <__sflush_r>
 8008982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008984:	4605      	mov	r5, r0
 8008986:	07da      	lsls	r2, r3, #31
 8008988:	d4e0      	bmi.n	800894c <_fflush_r+0xc>
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	059b      	lsls	r3, r3, #22
 800898e:	d4dd      	bmi.n	800894c <_fflush_r+0xc>
 8008990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008992:	f000 f908 	bl	8008ba6 <__retarget_lock_release_recursive>
 8008996:	e7d9      	b.n	800894c <_fflush_r+0xc>
 8008998:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <_fflush_r+0x70>)
 800899a:	429c      	cmp	r4, r3
 800899c:	d101      	bne.n	80089a2 <_fflush_r+0x62>
 800899e:	68ac      	ldr	r4, [r5, #8]
 80089a0:	e7df      	b.n	8008962 <_fflush_r+0x22>
 80089a2:	4b04      	ldr	r3, [pc, #16]	; (80089b4 <_fflush_r+0x74>)
 80089a4:	429c      	cmp	r4, r3
 80089a6:	bf08      	it	eq
 80089a8:	68ec      	ldreq	r4, [r5, #12]
 80089aa:	e7da      	b.n	8008962 <_fflush_r+0x22>
 80089ac:	08009a9c 	.word	0x08009a9c
 80089b0:	08009abc 	.word	0x08009abc
 80089b4:	08009a7c 	.word	0x08009a7c

080089b8 <std>:
 80089b8:	2300      	movs	r3, #0
 80089ba:	b510      	push	{r4, lr}
 80089bc:	4604      	mov	r4, r0
 80089be:	e9c0 3300 	strd	r3, r3, [r0]
 80089c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089c6:	6083      	str	r3, [r0, #8]
 80089c8:	8181      	strh	r1, [r0, #12]
 80089ca:	6643      	str	r3, [r0, #100]	; 0x64
 80089cc:	81c2      	strh	r2, [r0, #14]
 80089ce:	6183      	str	r3, [r0, #24]
 80089d0:	4619      	mov	r1, r3
 80089d2:	2208      	movs	r2, #8
 80089d4:	305c      	adds	r0, #92	; 0x5c
 80089d6:	f7fb fe0f 	bl	80045f8 <memset>
 80089da:	4b05      	ldr	r3, [pc, #20]	; (80089f0 <std+0x38>)
 80089dc:	6224      	str	r4, [r4, #32]
 80089de:	6263      	str	r3, [r4, #36]	; 0x24
 80089e0:	4b04      	ldr	r3, [pc, #16]	; (80089f4 <std+0x3c>)
 80089e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80089e4:	4b04      	ldr	r3, [pc, #16]	; (80089f8 <std+0x40>)
 80089e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089e8:	4b04      	ldr	r3, [pc, #16]	; (80089fc <std+0x44>)
 80089ea:	6323      	str	r3, [r4, #48]	; 0x30
 80089ec:	bd10      	pop	{r4, pc}
 80089ee:	bf00      	nop
 80089f0:	08008d0d 	.word	0x08008d0d
 80089f4:	08008d2f 	.word	0x08008d2f
 80089f8:	08008d67 	.word	0x08008d67
 80089fc:	08008d8b 	.word	0x08008d8b

08008a00 <_cleanup_r>:
 8008a00:	4901      	ldr	r1, [pc, #4]	; (8008a08 <_cleanup_r+0x8>)
 8008a02:	f000 b8af 	b.w	8008b64 <_fwalk_reent>
 8008a06:	bf00      	nop
 8008a08:	08008941 	.word	0x08008941

08008a0c <__sfmoreglue>:
 8008a0c:	2268      	movs	r2, #104	; 0x68
 8008a0e:	b570      	push	{r4, r5, r6, lr}
 8008a10:	1e4d      	subs	r5, r1, #1
 8008a12:	4355      	muls	r5, r2
 8008a14:	460e      	mov	r6, r1
 8008a16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a1a:	f7ff fa63 	bl	8007ee4 <_malloc_r>
 8008a1e:	4604      	mov	r4, r0
 8008a20:	b140      	cbz	r0, 8008a34 <__sfmoreglue+0x28>
 8008a22:	2100      	movs	r1, #0
 8008a24:	e9c0 1600 	strd	r1, r6, [r0]
 8008a28:	300c      	adds	r0, #12
 8008a2a:	60a0      	str	r0, [r4, #8]
 8008a2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a30:	f7fb fde2 	bl	80045f8 <memset>
 8008a34:	4620      	mov	r0, r4
 8008a36:	bd70      	pop	{r4, r5, r6, pc}

08008a38 <__sfp_lock_acquire>:
 8008a38:	4801      	ldr	r0, [pc, #4]	; (8008a40 <__sfp_lock_acquire+0x8>)
 8008a3a:	f000 b8b3 	b.w	8008ba4 <__retarget_lock_acquire_recursive>
 8008a3e:	bf00      	nop
 8008a40:	20000729 	.word	0x20000729

08008a44 <__sfp_lock_release>:
 8008a44:	4801      	ldr	r0, [pc, #4]	; (8008a4c <__sfp_lock_release+0x8>)
 8008a46:	f000 b8ae 	b.w	8008ba6 <__retarget_lock_release_recursive>
 8008a4a:	bf00      	nop
 8008a4c:	20000729 	.word	0x20000729

08008a50 <__sinit_lock_acquire>:
 8008a50:	4801      	ldr	r0, [pc, #4]	; (8008a58 <__sinit_lock_acquire+0x8>)
 8008a52:	f000 b8a7 	b.w	8008ba4 <__retarget_lock_acquire_recursive>
 8008a56:	bf00      	nop
 8008a58:	2000072a 	.word	0x2000072a

08008a5c <__sinit_lock_release>:
 8008a5c:	4801      	ldr	r0, [pc, #4]	; (8008a64 <__sinit_lock_release+0x8>)
 8008a5e:	f000 b8a2 	b.w	8008ba6 <__retarget_lock_release_recursive>
 8008a62:	bf00      	nop
 8008a64:	2000072a 	.word	0x2000072a

08008a68 <__sinit>:
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	f7ff fff0 	bl	8008a50 <__sinit_lock_acquire>
 8008a70:	69a3      	ldr	r3, [r4, #24]
 8008a72:	b11b      	cbz	r3, 8008a7c <__sinit+0x14>
 8008a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a78:	f7ff bff0 	b.w	8008a5c <__sinit_lock_release>
 8008a7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a80:	6523      	str	r3, [r4, #80]	; 0x50
 8008a82:	4b13      	ldr	r3, [pc, #76]	; (8008ad0 <__sinit+0x68>)
 8008a84:	4a13      	ldr	r2, [pc, #76]	; (8008ad4 <__sinit+0x6c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a8a:	42a3      	cmp	r3, r4
 8008a8c:	bf08      	it	eq
 8008a8e:	2301      	moveq	r3, #1
 8008a90:	4620      	mov	r0, r4
 8008a92:	bf08      	it	eq
 8008a94:	61a3      	streq	r3, [r4, #24]
 8008a96:	f000 f81f 	bl	8008ad8 <__sfp>
 8008a9a:	6060      	str	r0, [r4, #4]
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f000 f81b 	bl	8008ad8 <__sfp>
 8008aa2:	60a0      	str	r0, [r4, #8]
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f000 f817 	bl	8008ad8 <__sfp>
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2104      	movs	r1, #4
 8008aae:	60e0      	str	r0, [r4, #12]
 8008ab0:	6860      	ldr	r0, [r4, #4]
 8008ab2:	f7ff ff81 	bl	80089b8 <std>
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	2109      	movs	r1, #9
 8008aba:	68a0      	ldr	r0, [r4, #8]
 8008abc:	f7ff ff7c 	bl	80089b8 <std>
 8008ac0:	2202      	movs	r2, #2
 8008ac2:	2112      	movs	r1, #18
 8008ac4:	68e0      	ldr	r0, [r4, #12]
 8008ac6:	f7ff ff77 	bl	80089b8 <std>
 8008aca:	2301      	movs	r3, #1
 8008acc:	61a3      	str	r3, [r4, #24]
 8008ace:	e7d1      	b.n	8008a74 <__sinit+0xc>
 8008ad0:	08009638 	.word	0x08009638
 8008ad4:	08008a01 	.word	0x08008a01

08008ad8 <__sfp>:
 8008ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ada:	4607      	mov	r7, r0
 8008adc:	f7ff ffac 	bl	8008a38 <__sfp_lock_acquire>
 8008ae0:	4b1e      	ldr	r3, [pc, #120]	; (8008b5c <__sfp+0x84>)
 8008ae2:	681e      	ldr	r6, [r3, #0]
 8008ae4:	69b3      	ldr	r3, [r6, #24]
 8008ae6:	b913      	cbnz	r3, 8008aee <__sfp+0x16>
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f7ff ffbd 	bl	8008a68 <__sinit>
 8008aee:	3648      	adds	r6, #72	; 0x48
 8008af0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	d503      	bpl.n	8008b00 <__sfp+0x28>
 8008af8:	6833      	ldr	r3, [r6, #0]
 8008afa:	b30b      	cbz	r3, 8008b40 <__sfp+0x68>
 8008afc:	6836      	ldr	r6, [r6, #0]
 8008afe:	e7f7      	b.n	8008af0 <__sfp+0x18>
 8008b00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b04:	b9d5      	cbnz	r5, 8008b3c <__sfp+0x64>
 8008b06:	4b16      	ldr	r3, [pc, #88]	; (8008b60 <__sfp+0x88>)
 8008b08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b0c:	60e3      	str	r3, [r4, #12]
 8008b0e:	6665      	str	r5, [r4, #100]	; 0x64
 8008b10:	f000 f847 	bl	8008ba2 <__retarget_lock_init_recursive>
 8008b14:	f7ff ff96 	bl	8008a44 <__sfp_lock_release>
 8008b18:	2208      	movs	r2, #8
 8008b1a:	4629      	mov	r1, r5
 8008b1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b24:	6025      	str	r5, [r4, #0]
 8008b26:	61a5      	str	r5, [r4, #24]
 8008b28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b2c:	f7fb fd64 	bl	80045f8 <memset>
 8008b30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b38:	4620      	mov	r0, r4
 8008b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b3c:	3468      	adds	r4, #104	; 0x68
 8008b3e:	e7d9      	b.n	8008af4 <__sfp+0x1c>
 8008b40:	2104      	movs	r1, #4
 8008b42:	4638      	mov	r0, r7
 8008b44:	f7ff ff62 	bl	8008a0c <__sfmoreglue>
 8008b48:	4604      	mov	r4, r0
 8008b4a:	6030      	str	r0, [r6, #0]
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	d1d5      	bne.n	8008afc <__sfp+0x24>
 8008b50:	f7ff ff78 	bl	8008a44 <__sfp_lock_release>
 8008b54:	230c      	movs	r3, #12
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	e7ee      	b.n	8008b38 <__sfp+0x60>
 8008b5a:	bf00      	nop
 8008b5c:	08009638 	.word	0x08009638
 8008b60:	ffff0001 	.word	0xffff0001

08008b64 <_fwalk_reent>:
 8008b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b68:	4606      	mov	r6, r0
 8008b6a:	4688      	mov	r8, r1
 8008b6c:	2700      	movs	r7, #0
 8008b6e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b76:	f1b9 0901 	subs.w	r9, r9, #1
 8008b7a:	d505      	bpl.n	8008b88 <_fwalk_reent+0x24>
 8008b7c:	6824      	ldr	r4, [r4, #0]
 8008b7e:	2c00      	cmp	r4, #0
 8008b80:	d1f7      	bne.n	8008b72 <_fwalk_reent+0xe>
 8008b82:	4638      	mov	r0, r7
 8008b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b88:	89ab      	ldrh	r3, [r5, #12]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d907      	bls.n	8008b9e <_fwalk_reent+0x3a>
 8008b8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b92:	3301      	adds	r3, #1
 8008b94:	d003      	beq.n	8008b9e <_fwalk_reent+0x3a>
 8008b96:	4629      	mov	r1, r5
 8008b98:	4630      	mov	r0, r6
 8008b9a:	47c0      	blx	r8
 8008b9c:	4307      	orrs	r7, r0
 8008b9e:	3568      	adds	r5, #104	; 0x68
 8008ba0:	e7e9      	b.n	8008b76 <_fwalk_reent+0x12>

08008ba2 <__retarget_lock_init_recursive>:
 8008ba2:	4770      	bx	lr

08008ba4 <__retarget_lock_acquire_recursive>:
 8008ba4:	4770      	bx	lr

08008ba6 <__retarget_lock_release_recursive>:
 8008ba6:	4770      	bx	lr

08008ba8 <__swhatbuf_r>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	460e      	mov	r6, r1
 8008bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb0:	4614      	mov	r4, r2
 8008bb2:	2900      	cmp	r1, #0
 8008bb4:	461d      	mov	r5, r3
 8008bb6:	b096      	sub	sp, #88	; 0x58
 8008bb8:	da08      	bge.n	8008bcc <__swhatbuf_r+0x24>
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008bc0:	602a      	str	r2, [r5, #0]
 8008bc2:	061a      	lsls	r2, r3, #24
 8008bc4:	d410      	bmi.n	8008be8 <__swhatbuf_r+0x40>
 8008bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bca:	e00e      	b.n	8008bea <__swhatbuf_r+0x42>
 8008bcc:	466a      	mov	r2, sp
 8008bce:	f000 f903 	bl	8008dd8 <_fstat_r>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	dbf1      	blt.n	8008bba <__swhatbuf_r+0x12>
 8008bd6:	9a01      	ldr	r2, [sp, #4]
 8008bd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008be0:	425a      	negs	r2, r3
 8008be2:	415a      	adcs	r2, r3
 8008be4:	602a      	str	r2, [r5, #0]
 8008be6:	e7ee      	b.n	8008bc6 <__swhatbuf_r+0x1e>
 8008be8:	2340      	movs	r3, #64	; 0x40
 8008bea:	2000      	movs	r0, #0
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	b016      	add	sp, #88	; 0x58
 8008bf0:	bd70      	pop	{r4, r5, r6, pc}
	...

08008bf4 <__smakebuf_r>:
 8008bf4:	898b      	ldrh	r3, [r1, #12]
 8008bf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bf8:	079d      	lsls	r5, r3, #30
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	d507      	bpl.n	8008c10 <__smakebuf_r+0x1c>
 8008c00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	6123      	str	r3, [r4, #16]
 8008c08:	2301      	movs	r3, #1
 8008c0a:	6163      	str	r3, [r4, #20]
 8008c0c:	b002      	add	sp, #8
 8008c0e:	bd70      	pop	{r4, r5, r6, pc}
 8008c10:	466a      	mov	r2, sp
 8008c12:	ab01      	add	r3, sp, #4
 8008c14:	f7ff ffc8 	bl	8008ba8 <__swhatbuf_r>
 8008c18:	9900      	ldr	r1, [sp, #0]
 8008c1a:	4605      	mov	r5, r0
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	f7ff f961 	bl	8007ee4 <_malloc_r>
 8008c22:	b948      	cbnz	r0, 8008c38 <__smakebuf_r+0x44>
 8008c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c28:	059a      	lsls	r2, r3, #22
 8008c2a:	d4ef      	bmi.n	8008c0c <__smakebuf_r+0x18>
 8008c2c:	f023 0303 	bic.w	r3, r3, #3
 8008c30:	f043 0302 	orr.w	r3, r3, #2
 8008c34:	81a3      	strh	r3, [r4, #12]
 8008c36:	e7e3      	b.n	8008c00 <__smakebuf_r+0xc>
 8008c38:	4b0d      	ldr	r3, [pc, #52]	; (8008c70 <__smakebuf_r+0x7c>)
 8008c3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c3c:	89a3      	ldrh	r3, [r4, #12]
 8008c3e:	6020      	str	r0, [r4, #0]
 8008c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c44:	81a3      	strh	r3, [r4, #12]
 8008c46:	9b00      	ldr	r3, [sp, #0]
 8008c48:	6120      	str	r0, [r4, #16]
 8008c4a:	6163      	str	r3, [r4, #20]
 8008c4c:	9b01      	ldr	r3, [sp, #4]
 8008c4e:	b15b      	cbz	r3, 8008c68 <__smakebuf_r+0x74>
 8008c50:	4630      	mov	r0, r6
 8008c52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c56:	f000 f8d1 	bl	8008dfc <_isatty_r>
 8008c5a:	b128      	cbz	r0, 8008c68 <__smakebuf_r+0x74>
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	f023 0303 	bic.w	r3, r3, #3
 8008c62:	f043 0301 	orr.w	r3, r3, #1
 8008c66:	81a3      	strh	r3, [r4, #12]
 8008c68:	89a0      	ldrh	r0, [r4, #12]
 8008c6a:	4305      	orrs	r5, r0
 8008c6c:	81a5      	strh	r5, [r4, #12]
 8008c6e:	e7cd      	b.n	8008c0c <__smakebuf_r+0x18>
 8008c70:	08008a01 	.word	0x08008a01

08008c74 <_malloc_usable_size_r>:
 8008c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c78:	1f18      	subs	r0, r3, #4
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	bfbc      	itt	lt
 8008c7e:	580b      	ldrlt	r3, [r1, r0]
 8008c80:	18c0      	addlt	r0, r0, r3
 8008c82:	4770      	bx	lr

08008c84 <_raise_r>:
 8008c84:	291f      	cmp	r1, #31
 8008c86:	b538      	push	{r3, r4, r5, lr}
 8008c88:	4604      	mov	r4, r0
 8008c8a:	460d      	mov	r5, r1
 8008c8c:	d904      	bls.n	8008c98 <_raise_r+0x14>
 8008c8e:	2316      	movs	r3, #22
 8008c90:	6003      	str	r3, [r0, #0]
 8008c92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c96:	bd38      	pop	{r3, r4, r5, pc}
 8008c98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c9a:	b112      	cbz	r2, 8008ca2 <_raise_r+0x1e>
 8008c9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ca0:	b94b      	cbnz	r3, 8008cb6 <_raise_r+0x32>
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f000 f830 	bl	8008d08 <_getpid_r>
 8008ca8:	462a      	mov	r2, r5
 8008caa:	4601      	mov	r1, r0
 8008cac:	4620      	mov	r0, r4
 8008cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cb2:	f000 b817 	b.w	8008ce4 <_kill_r>
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d00a      	beq.n	8008cd0 <_raise_r+0x4c>
 8008cba:	1c59      	adds	r1, r3, #1
 8008cbc:	d103      	bne.n	8008cc6 <_raise_r+0x42>
 8008cbe:	2316      	movs	r3, #22
 8008cc0:	6003      	str	r3, [r0, #0]
 8008cc2:	2001      	movs	r0, #1
 8008cc4:	e7e7      	b.n	8008c96 <_raise_r+0x12>
 8008cc6:	2400      	movs	r4, #0
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cce:	4798      	blx	r3
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	e7e0      	b.n	8008c96 <_raise_r+0x12>

08008cd4 <raise>:
 8008cd4:	4b02      	ldr	r3, [pc, #8]	; (8008ce0 <raise+0xc>)
 8008cd6:	4601      	mov	r1, r0
 8008cd8:	6818      	ldr	r0, [r3, #0]
 8008cda:	f7ff bfd3 	b.w	8008c84 <_raise_r>
 8008cde:	bf00      	nop
 8008ce0:	20000014 	.word	0x20000014

08008ce4 <_kill_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	4d06      	ldr	r5, [pc, #24]	; (8008d04 <_kill_r+0x20>)
 8008cea:	4604      	mov	r4, r0
 8008cec:	4608      	mov	r0, r1
 8008cee:	4611      	mov	r1, r2
 8008cf0:	602b      	str	r3, [r5, #0]
 8008cf2:	f7f8 ff52 	bl	8001b9a <_kill>
 8008cf6:	1c43      	adds	r3, r0, #1
 8008cf8:	d102      	bne.n	8008d00 <_kill_r+0x1c>
 8008cfa:	682b      	ldr	r3, [r5, #0]
 8008cfc:	b103      	cbz	r3, 8008d00 <_kill_r+0x1c>
 8008cfe:	6023      	str	r3, [r4, #0]
 8008d00:	bd38      	pop	{r3, r4, r5, pc}
 8008d02:	bf00      	nop
 8008d04:	20000724 	.word	0x20000724

08008d08 <_getpid_r>:
 8008d08:	f7f8 bf40 	b.w	8001b8c <_getpid>

08008d0c <__sread>:
 8008d0c:	b510      	push	{r4, lr}
 8008d0e:	460c      	mov	r4, r1
 8008d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d14:	f000 f894 	bl	8008e40 <_read_r>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	bfab      	itete	ge
 8008d1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d1e:	89a3      	ldrhlt	r3, [r4, #12]
 8008d20:	181b      	addge	r3, r3, r0
 8008d22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d26:	bfac      	ite	ge
 8008d28:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d2a:	81a3      	strhlt	r3, [r4, #12]
 8008d2c:	bd10      	pop	{r4, pc}

08008d2e <__swrite>:
 8008d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d32:	461f      	mov	r7, r3
 8008d34:	898b      	ldrh	r3, [r1, #12]
 8008d36:	4605      	mov	r5, r0
 8008d38:	05db      	lsls	r3, r3, #23
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	4616      	mov	r6, r2
 8008d3e:	d505      	bpl.n	8008d4c <__swrite+0x1e>
 8008d40:	2302      	movs	r3, #2
 8008d42:	2200      	movs	r2, #0
 8008d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d48:	f000 f868 	bl	8008e1c <_lseek_r>
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	4632      	mov	r2, r6
 8008d50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d54:	81a3      	strh	r3, [r4, #12]
 8008d56:	4628      	mov	r0, r5
 8008d58:	463b      	mov	r3, r7
 8008d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d62:	f000 b817 	b.w	8008d94 <_write_r>

08008d66 <__sseek>:
 8008d66:	b510      	push	{r4, lr}
 8008d68:	460c      	mov	r4, r1
 8008d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6e:	f000 f855 	bl	8008e1c <_lseek_r>
 8008d72:	1c43      	adds	r3, r0, #1
 8008d74:	89a3      	ldrh	r3, [r4, #12]
 8008d76:	bf15      	itete	ne
 8008d78:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d82:	81a3      	strheq	r3, [r4, #12]
 8008d84:	bf18      	it	ne
 8008d86:	81a3      	strhne	r3, [r4, #12]
 8008d88:	bd10      	pop	{r4, pc}

08008d8a <__sclose>:
 8008d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d8e:	f000 b813 	b.w	8008db8 <_close_r>
	...

08008d94 <_write_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4604      	mov	r4, r0
 8008d98:	4608      	mov	r0, r1
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	4d05      	ldr	r5, [pc, #20]	; (8008db4 <_write_r+0x20>)
 8008da0:	602a      	str	r2, [r5, #0]
 8008da2:	461a      	mov	r2, r3
 8008da4:	f7f8 ff30 	bl	8001c08 <_write>
 8008da8:	1c43      	adds	r3, r0, #1
 8008daa:	d102      	bne.n	8008db2 <_write_r+0x1e>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	b103      	cbz	r3, 8008db2 <_write_r+0x1e>
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	bd38      	pop	{r3, r4, r5, pc}
 8008db4:	20000724 	.word	0x20000724

08008db8 <_close_r>:
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	2300      	movs	r3, #0
 8008dbc:	4d05      	ldr	r5, [pc, #20]	; (8008dd4 <_close_r+0x1c>)
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	4608      	mov	r0, r1
 8008dc2:	602b      	str	r3, [r5, #0]
 8008dc4:	f7f8 ff3c 	bl	8001c40 <_close>
 8008dc8:	1c43      	adds	r3, r0, #1
 8008dca:	d102      	bne.n	8008dd2 <_close_r+0x1a>
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	b103      	cbz	r3, 8008dd2 <_close_r+0x1a>
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	20000724 	.word	0x20000724

08008dd8 <_fstat_r>:
 8008dd8:	b538      	push	{r3, r4, r5, lr}
 8008dda:	2300      	movs	r3, #0
 8008ddc:	4d06      	ldr	r5, [pc, #24]	; (8008df8 <_fstat_r+0x20>)
 8008dde:	4604      	mov	r4, r0
 8008de0:	4608      	mov	r0, r1
 8008de2:	4611      	mov	r1, r2
 8008de4:	602b      	str	r3, [r5, #0]
 8008de6:	f7f8 ff36 	bl	8001c56 <_fstat>
 8008dea:	1c43      	adds	r3, r0, #1
 8008dec:	d102      	bne.n	8008df4 <_fstat_r+0x1c>
 8008dee:	682b      	ldr	r3, [r5, #0]
 8008df0:	b103      	cbz	r3, 8008df4 <_fstat_r+0x1c>
 8008df2:	6023      	str	r3, [r4, #0]
 8008df4:	bd38      	pop	{r3, r4, r5, pc}
 8008df6:	bf00      	nop
 8008df8:	20000724 	.word	0x20000724

08008dfc <_isatty_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	2300      	movs	r3, #0
 8008e00:	4d05      	ldr	r5, [pc, #20]	; (8008e18 <_isatty_r+0x1c>)
 8008e02:	4604      	mov	r4, r0
 8008e04:	4608      	mov	r0, r1
 8008e06:	602b      	str	r3, [r5, #0]
 8008e08:	f7f8 ff34 	bl	8001c74 <_isatty>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d102      	bne.n	8008e16 <_isatty_r+0x1a>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b103      	cbz	r3, 8008e16 <_isatty_r+0x1a>
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	20000724 	.word	0x20000724

08008e1c <_lseek_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4604      	mov	r4, r0
 8008e20:	4608      	mov	r0, r1
 8008e22:	4611      	mov	r1, r2
 8008e24:	2200      	movs	r2, #0
 8008e26:	4d05      	ldr	r5, [pc, #20]	; (8008e3c <_lseek_r+0x20>)
 8008e28:	602a      	str	r2, [r5, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f7f8 ff2c 	bl	8001c88 <_lseek>
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d102      	bne.n	8008e3a <_lseek_r+0x1e>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	b103      	cbz	r3, 8008e3a <_lseek_r+0x1e>
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	20000724 	.word	0x20000724

08008e40 <_read_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	4604      	mov	r4, r0
 8008e44:	4608      	mov	r0, r1
 8008e46:	4611      	mov	r1, r2
 8008e48:	2200      	movs	r2, #0
 8008e4a:	4d05      	ldr	r5, [pc, #20]	; (8008e60 <_read_r+0x20>)
 8008e4c:	602a      	str	r2, [r5, #0]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	f7f8 febd 	bl	8001bce <_read>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	d102      	bne.n	8008e5e <_read_r+0x1e>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	b103      	cbz	r3, 8008e5e <_read_r+0x1e>
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	20000724 	.word	0x20000724

08008e64 <_init>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	bf00      	nop
 8008e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e6a:	bc08      	pop	{r3}
 8008e6c:	469e      	mov	lr, r3
 8008e6e:	4770      	bx	lr

08008e70 <_fini>:
 8008e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e72:	bf00      	nop
 8008e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e76:	bc08      	pop	{r3}
 8008e78:	469e      	mov	lr, r3
 8008e7a:	4770      	bx	lr
